package Parser;

import java_cup.runtime.Symbol;

parser code
{:
    /*
    private Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }
    */
     public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.right+1)+" columna "+(s.left+1) );
    }

    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.right+1)+" columna "+(s.left+1) );
    }
:};


terminal IDENTIFIER,
         // ERRORS
         STRING_ERROR,
         UNKNOWN_ERROR,
         COMMENTS_ERROR,
         CHARACTER_ERROR,
         IDENTIFIER_ERROR,
         FLOAT_MANY_DOTS_ERROR,

         // RESERVED WORDS
         RESERVED_LOOP,
         RESERVED_ENUM,
         RESERVED_WORDS,
         RESERVED_MODIFIER,
         RESERVED_CONDITION,
         RESERVED_DATA_TYPE,

         // LITERALS
         LITERAL_HEXA,
         LITERAL_FLOAT,
         LITERAL_OCTAL,
         LITERAL_STRING,
         LITERAL_DECIMAL,
         LITERAL_CHARACTER,
         LITERAL_EXPONENTIAL_FLOAT,

         // OPERATORS
         OPERATOR_INC,
         OPERATOR_DEC,
         OPERATOR_ADD,
         OPERATOR_DOT,
         OPERATOR_MEMORY,
         OPERATOR_DIVIDE,
         OPERATOR_BINARY,
         OPERATOR_BRACKET,
         OPERATOR_BOOLEAN,
         OPERATOR_PLUS_EQ,
         OPERATOR_MINUS_EQ,
         OPERATOR_END_LINE,
         OPERATOR_NEGATIVE,
         OPERATOR_SEPARATE,
         OPERATOR_MULTIPLY,
         OPERATOR_DIVIDE_EQ,
         OPERATOR_REMAINDER,
         OPERATOR_ASSIGNMENT,
         OPERATOR_L_SHIFT_EQ,
         OPERATOR_R_SHIFT_EQ,
         OPERATOR_BITWISE_OR,
         OPERATOR_SQ_BRACKET,
         OPERATOR_PARENTHESIS_L,
         OPERATOR_PARENTHESIS_R,
         OPERATOR_MULTIPLY_EQ,
         OPERATOR_CONTINUE_LINE,
         OPERATOR_BITWISE_AND,
         OPERATOR_BITWISE_EXCLUSIVE_OR,
         OPERATOR_COMPARATIVE,
         OPERATOR_NOT,
         ASSIGNMENT,
         BREAK, CASE, CHAR, CONST, CONTINUE, DEFAULT, DO, ELSE, FOR, IF, INT, LONG, RETURN, SHORT, SWITCH, VOID, WHILE, READ, WRITE;

non terminal INICIO, DECLARACION, DECLARACION1, MAIN;


start with INICIO;

INICIO ::=
    DECLARACION MAIN
;

MAIN ::=
    INT IDENTIFIER OPERATOR_PARENTHESIS_L OPERATOR_PARENTHESIS_R OPERATOR_BRACKET OPERATOR_BRACKET |
    INT IDENTIFIER OPERATOR_PARENTHESIS_L OPERATOR_PARENTHESIS_R OPERATOR_BRACKET DECLARACION OPERATOR_BRACKET
;

DECLARACION ::=
    INT IDENTIFIER ASSIGNMENT LITERAL_DECIMAL OPERATOR_END_LINE DECLARACION1
;

DECLARACION1 ::=
    DECLARACION |
    OPERATOR_END_LINE
;