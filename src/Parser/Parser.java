
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Parser;

import java.util.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\006\004\000\002\006\003\000\002\007\004" +
    "\000\002\007\003\000\002\010\005\000\002\010\003\000" +
    "\002\010\004\000\002\010\006\000\002\010\004\000\002" +
    "\011\004\000\002\011\003\000\002\012\005\000\002\012" +
    "\005\000\002\012\006\000\002\012\006\000\002\016\006" +
    "\000\002\016\005\000\002\016\004\000\002\020\004\000" +
    "\002\020\003\000\002\014\005\000\002\015\005\000\002" +
    "\015\004\000\002\013\005\000\002\013\004\000\002\013" +
    "\003\000\002\013\003\000\002\022\005\000\002\022\003" +
    "\000\002\017\005\000\002\017\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\003\003\000\002\003\003\000\002\005\004\000\002\005" +
    "\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\022\010\014\067\022\070\024\100\023\102" +
    "\011\106\016\107\004\110\005\001\002\000\006\010\uffde" +
    "\106\uffde\001\002\000\006\010\uffdf\106\uffdf\001\002\000" +
    "\022\002\ufff4\010\ufff4\067\ufff4\100\ufff4\102\ufff4\106\ufff4" +
    "\107\ufff4\110\ufff4\001\002\000\022\002\uffff\010\014\067" +
    "\022\100\023\102\011\106\016\107\004\110\005\001\002" +
    "\000\034\010\uffd8\042\uffd8\044\uffd8\047\uffd8\055\uffd8\056" +
    "\uffd8\067\uffd8\070\uffd8\100\uffd8\102\uffd8\106\uffd8\107\uffd8" +
    "\110\uffd8\001\002\000\006\010\014\106\016\001\002\000" +
    "\004\002\101\001\002\000\024\010\ufffb\042\100\067\ufffb" +
    "\070\ufffb\100\ufffb\102\ufffb\106\ufffb\107\ufffb\110\ufffb\001" +
    "\002\000\034\010\uffda\042\uffda\044\uffda\047\uffda\055\uffda" +
    "\056\uffda\067\uffda\070\uffda\100\uffda\102\uffda\106\uffda\107" +
    "\uffda\110\uffda\001\002\000\032\010\ufff9\042\ufff9\047\074" +
    "\055\036\056\037\067\ufff9\070\ufff9\100\ufff9\102\ufff9\106" +
    "\ufff9\107\ufff9\110\ufff9\001\002\000\034\010\uffdb\042\uffdb" +
    "\044\uffdb\047\uffdb\055\uffdb\056\uffdb\067\uffdb\070\uffdb\100" +
    "\uffdb\102\uffdb\106\uffdb\107\uffdb\110\uffdb\001\002\000\022" +
    "\010\ufffd\067\ufffd\070\ufffd\100\ufffd\102\ufffd\106\ufffd\107" +
    "\ufffd\110\ufffd\001\002\000\006\010\014\106\016\001\002" +
    "\000\022\010\014\067\022\070\024\100\023\102\011\106" +
    "\016\107\004\110\005\001\002\000\006\010\uffdc\106\uffdc" +
    "\001\002\000\006\010\uffdd\106\uffdd\001\002\000\016\010" +
    "\014\067\022\100\023\106\016\107\004\110\005\001\002" +
    "\000\026\010\ufff8\042\ufff8\047\026\067\ufff8\070\ufff8\100" +
    "\ufff8\102\ufff8\106\ufff8\107\ufff8\110\ufff8\001\002\000\004" +
    "\032\030\001\002\000\024\010\ufff7\042\ufff7\067\ufff7\070" +
    "\ufff7\100\ufff7\102\ufff7\106\ufff7\107\ufff7\110\ufff7\001\002" +
    "\000\030\010\uffd7\042\uffd7\044\uffd7\056\uffd7\067\uffd7\070" +
    "\uffd7\100\uffd7\102\uffd7\106\uffd7\107\uffd7\110\uffd7\001\002" +
    "\000\022\002\000\010\014\067\022\100\023\102\011\106" +
    "\016\107\004\110\005\001\002\000\022\010\ufffe\067\ufffe" +
    "\070\ufffe\100\ufffe\102\ufffe\106\ufffe\107\ufffe\110\ufffe\001" +
    "\002\000\022\002\ufff5\010\ufff5\067\ufff5\100\ufff5\102\ufff5" +
    "\106\ufff5\107\ufff5\110\ufff5\001\002\000\006\055\036\056" +
    "\037\001\002\000\006\037\046\042\050\001\002\000\024" +
    "\010\014\037\uffe5\042\uffe5\056\042\067\022\100\023\106" +
    "\016\107\004\110\005\001\002\000\006\037\uffe4\042\uffe4" +
    "\001\002\000\006\044\uffe0\056\uffe0\001\002\000\006\044" +
    "\043\056\044\001\002\000\006\037\uffe6\042\uffe6\001\002" +
    "\000\016\010\014\067\022\100\023\106\016\107\004\110" +
    "\005\001\002\000\006\037\uffe7\042\uffe7\001\002\000\006" +
    "\044\uffe1\056\uffe1\001\002\000\022\010\014\040\051\067" +
    "\022\070\024\100\023\106\016\107\004\110\005\001\002" +
    "\000\022\002\ufff3\010\ufff3\067\ufff3\100\ufff3\102\ufff3\106" +
    "\ufff3\107\ufff3\110\ufff3\001\002\000\022\002\ufff2\010\ufff2" +
    "\067\ufff2\100\ufff2\102\ufff2\106\ufff2\107\ufff2\110\ufff2\001" +
    "\002\000\022\002\uffed\010\uffed\067\uffed\100\uffed\102\uffed" +
    "\106\uffed\107\uffed\110\uffed\001\002\000\026\010\uffd8\042" +
    "\uffd8\047\uffd8\055\064\067\uffd8\070\uffd8\100\uffd8\106\uffd8" +
    "\107\uffd8\110\uffd8\001\002\000\010\010\014\040\076\106" +
    "\016\001\002\000\010\010\uffeb\040\uffeb\106\uffeb\001\002" +
    "\000\024\010\ufff9\042\ufff9\047\074\067\ufff9\070\ufff9\100" +
    "\ufff9\106\ufff9\107\ufff9\110\ufff9\001\002\000\020\010\014" +
    "\067\022\070\024\100\023\106\016\107\004\110\005\001" +
    "\002\000\010\010\014\040\061\106\016\001\002\000\004" +
    "\055\064\001\002\000\022\002\uffef\010\uffef\067\uffef\100" +
    "\uffef\102\uffef\106\uffef\107\uffef\110\uffef\001\002\000\010" +
    "\010\uffec\040\uffec\106\uffec\001\002\000\004\042\073\001" +
    "\002\000\006\032\030\056\067\001\002\000\006\044\070" +
    "\056\071\001\002\000\006\044\uffe2\056\uffe2\001\002\000" +
    "\004\042\uffe8\001\002\000\004\032\030\001\002\000\004" +
    "\042\uffe9\001\002\000\006\044\uffe3\056\uffe3\001\002\000" +
    "\010\010\uffea\040\uffea\106\uffea\001\002\000\026\010\ufff6" +
    "\032\030\042\ufff6\067\ufff6\070\ufff6\100\ufff6\102\ufff6\106" +
    "\ufff6\107\ufff6\110\ufff6\001\002\000\024\010\ufffa\042\ufffa" +
    "\067\ufffa\070\ufffa\100\ufffa\102\ufffa\106\ufffa\107\ufffa\110" +
    "\ufffa\001\002\000\022\002\uffee\010\uffee\067\uffee\100\uffee" +
    "\102\uffee\106\uffee\107\uffee\110\uffee\001\002\000\034\010" +
    "\uffd9\042\uffd9\044\uffd9\047\uffd9\055\uffd9\056\uffd9\067\uffd9" +
    "\070\uffd9\100\uffd9\102\uffd9\106\uffd9\107\uffd9\110\uffd9\001" +
    "\002\000\022\010\ufffc\067\ufffc\070\ufffc\100\ufffc\102\ufffc" +
    "\106\ufffc\107\ufffc\110\ufffc\001\002\000\004\002\001\001" +
    "\002\000\006\055\036\056\037\001\002\000\006\037\046" +
    "\042\105\001\002\000\022\002\ufff1\010\ufff1\067\ufff1\100" +
    "\ufff1\102\ufff1\106\ufff1\107\ufff1\110\ufff1\001\002\000\022" +
    "\002\ufff0\010\ufff0\067\ufff0\100\ufff0\102\ufff0\106\ufff0\107" +
    "\ufff0\110\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\024\002\011\003\007\004\017\005\014\006" +
    "\020\007\016\010\012\011\006\012\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\007\004\017\005\033\012\032\001\001\000\002\001\001" +
    "\000\004\003\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\076\001\001\000" +
    "\020\003\007\004\017\005\014\007\031\010\012\011\030" +
    "\012\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\007\004\017\005\024\001\001\000\002\001\001" +
    "\000\004\021\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\007\004\017\005\033\012\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\034\001" +
    "\001\000\004\016\046\001\001\000\012\003\007\004\017" +
    "\005\037\017\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\007" +
    "\004\017\005\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\051\004\017\005\054\006\055\007\016" +
    "\010\012\014\053\020\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\062\001\001" +
    "\000\006\003\057\014\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\051\004\017\005\054\007\031" +
    "\010\012\014\053\020\056\001\001\000\006\003\057\014" +
    "\061\001\001\000\004\015\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\065\022" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\102\001\001" +
    "\000\004\016\103\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /*
    private Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }
    */
     public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.right+1)+" columna "+(s.left+1) );
    }

    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.right+1)+" columna "+(s.left+1) );
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initial ::= var_declarations func_declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // initial ::= func_declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // var_declarations ::= var_declarations var_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declarations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // var_declarations ::= var_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declarations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // var_declaration ::= var_expression OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_declaration ::= var_expression 
            {
              Object RESULT =null;
		 System.out.println("Missing ;"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_expression ::= typed_identifier OPERATOR_ASSIGNMENT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_expression ::= typed_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_expression ::= CONST typed_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_expression ::= CONST typed_identifier OPERATOR_ASSIGNMENT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_expression ::= typed_identifier OPERATOR_ASSIGNMENT 
            {
              Object RESULT =null;
		 System.out.println("Missing expression after assignment"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // func_declarations ::= func_declarations func_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_declarations",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // func_declarations ::= func_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_declarations",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // func_declaration ::= typed_identifier func_decl_parentheses brackets 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_declaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // func_declaration ::= typed_identifier func_decl_parentheses OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_declaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // func_declaration ::= VOID valid_name func_decl_parentheses brackets 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_declaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // func_declaration ::= VOID valid_name func_decl_parentheses OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_declaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // brackets ::= OPERATOR_BRACKET_L var_declarations statements OPERATOR_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brackets",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // brackets ::= OPERATOR_BRACKET_L statements OPERATOR_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brackets",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // brackets ::= OPERATOR_BRACKET_L OPERATOR_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brackets",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= valid_name func_call_parentheses OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // func_call_parentheses ::= OPERATOR_PARENTHESIS_L expressions OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call_parentheses",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // func_call_parentheses ::= OPERATOR_PARENTHESIS_L OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call_parentheses",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // func_decl_parentheses ::= OPERATOR_PARENTHESIS_L parameter OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_decl_parentheses",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // func_decl_parentheses ::= OPERATOR_PARENTHESIS_L OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_decl_parentheses",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // func_decl_parentheses ::= OPERATOR_PARENTHESIS_L 
            {
              Object RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_decl_parentheses",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // func_decl_parentheses ::= OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_decl_parentheses",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expressions ::= expressions OPERATOR_SEPARATE expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expressions ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameter ::= parameter OPERATOR_SEPARATE typed_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parameter ::= typed_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // data_type ::= LONG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // data_type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // data_type ::= SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // data_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valid_name ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valid_name",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // valid_name ::= IDENTIFIER_ERROR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valid_name",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // typed_identifier ::= data_type valid_name 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typed_identifier",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // typed_identifier ::= valid_name 
            {
              Object RESULT =null;
		 System.out.println("Missing data type"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typed_identifier",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= OPERATOR_DOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
