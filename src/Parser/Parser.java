
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Parser;

import Semantic.*;
import java.util.*;
import java.io.File;
import Parser.Error.*;
import java.util.HashMap;
import java_cup.runtime.*;
import java.io.IOException;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import Main.AssemblerGenerator;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\242\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\052\004\000\002\052\004" +
    "\000\002\044\011\000\002\044\013\000\002\044\010\000" +
    "\002\044\010\000\002\044\012\000\002\044\007\000\002" +
    "\050\007\000\002\050\006\000\002\050\004\000\002\050" +
    "\003\000\002\007\004\000\002\007\003\000\002\010\004" +
    "\000\002\010\003\000\002\010\004\000\002\010\004\000" +
    "\002\011\004\000\002\011\007\000\002\011\004\000\002" +
    "\011\007\000\002\042\005\000\002\042\003\000\002\042" +
    "\004\000\002\012\005\000\002\012\004\000\002\012\005" +
    "\000\002\012\003\000\002\053\004\000\002\053\003\000" +
    "\002\053\003\000\002\053\004\000\002\053\004\000\002" +
    "\053\004\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\017\004\000\002\017\003" +
    "\000\002\020\005\000\002\020\005\000\002\020\006\000" +
    "\002\020\006\000\002\047\006\000\002\047\005\000\002" +
    "\047\004\000\002\047\005\000\002\025\004\000\002\025" +
    "\003\000\002\022\004\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\006\000" +
    "\002\022\006\000\002\022\003\000\002\022\004\000\002" +
    "\022\005\000\002\022\004\000\002\022\003\000\002\022" +
    "\005\000\002\022\003\000\002\022\004\000\002\022\003" +
    "\000\002\022\004\000\002\031\003\000\002\031\003\000" +
    "\002\033\005\000\002\033\006\000\002\033\006\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\023" +
    "\005\000\002\023\004\000\002\021\005\000\002\021\004" +
    "\000\002\021\004\000\002\021\003\000\002\027\005\000" +
    "\002\027\003\000\002\024\005\000\002\024\003\000\002" +
    "\024\004\000\002\024\003\000\002\030\005\000\002\030" +
    "\004\000\002\006\003\000\002\006\003\000\002\032\007" +
    "\000\002\032\005\000\002\034\010\000\002\034\007\000" +
    "\002\034\005\000\002\034\004\000\002\041\004\000\002" +
    "\035\004\000\002\035\003\000\002\035\004\000\002\036" +
    "\007\000\002\036\006\000\002\036\006\000\002\036\005" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\043\011\000\002\043\007\000\002\043" +
    "\007\000\002\043\005\000\002\043\007\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\003\003\000\002\003\003\000\002" +
    "\005\004\000\002\005\003\000\002\045\010\000\002\045" +
    "\007\000\002\045\006\000\002\045\005\000\002\045\003" +
    "\000\002\046\004\000\002\046\004\000\002\037\005\000" +
    "\002\037\003\000\002\026\004\000\002\026\005\000\002" +
    "\026\004\000\002\026\005\000\002\026\005\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\015\003" +
    "\000\002\015\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\051\003\000\002\051\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0112\000\026\003\020\004\012\005\023\043\007\044" +
    "\017\054\021\056\025\062\011\063\006\064\004\001\002" +
    "\000\066\003\uff87\004\uff87\005\uff87\015\uff87\016\uff87\021" +
    "\uff87\022\uff87\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87" +
    "\046\uff87\047\uff87\051\uff87\052\uff87\053\uff87\054\uff87\055" +
    "\uff87\056\uff87\057\uff87\060\uff87\061\uff87\062\uff87\063\uff87" +
    "\064\uff87\001\002\000\004\002\u0114\001\002\000\066\003" +
    "\uff86\004\uff86\005\uff86\015\uff86\016\uff86\021\uff86\022\uff86" +
    "\041\uff86\042\uff86\043\uff86\044\uff86\045\uff86\046\uff86\047" +
    "\uff86\051\uff86\052\uff86\053\uff86\054\uff86\055\uff86\056\uff86" +
    "\057\uff86\060\uff86\061\uff86\062\uff86\063\uff86\064\uff86\001" +
    "\002\000\066\003\uff84\004\uff84\005\uff84\015\uff84\016\uff84" +
    "\021\uff84\022\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045" +
    "\uff84\046\uff84\047\uff84\051\uff84\052\uff84\053\uff84\054\uff84" +
    "\055\uff84\056\uff84\057\uff84\060\uff84\061\uff84\062\uff84\063" +
    "\uff84\064\uff84\001\002\000\006\004\012\062\011\001\002" +
    "\000\134\003\uff82\004\uff82\005\uff82\007\uff82\011\uff82\012" +
    "\uff82\013\uff82\014\uff82\015\uff82\016\uff82\017\uff82\020\uff82" +
    "\021\uff82\022\uff82\023\uff82\024\uff82\025\uff82\026\uff82\027" +
    "\uff82\030\uff82\031\uff82\032\uff82\033\uff82\034\uff82\035\uff82" +
    "\036\uff82\041\uff82\042\uff82\043\uff82\044\uff82\045\uff82\046" +
    "\uff82\047\uff82\051\uff82\052\uff82\053\uff82\054\uff82\055\uff82" +
    "\056\uff82\057\uff82\060\uff82\061\uff82\062\uff82\063\uff82\064" +
    "\uff82\001\002\000\134\003\uff81\004\uff81\005\uff81\007\uff81" +
    "\011\uff81\012\uff81\013\uff81\014\uff81\015\uff81\016\uff81\017" +
    "\uff81\020\uff81\021\uff81\022\uff81\023\uff81\024\uff81\025\uff81" +
    "\026\uff81\027\uff81\030\uff81\031\uff81\032\uff81\033\uff81\034" +
    "\uff81\035\uff81\036\uff81\041\uff81\042\uff81\043\uff81\044\uff81" +
    "\045\uff81\046\uff81\047\uff81\051\uff81\052\uff81\053\uff81\054" +
    "\uff81\055\uff81\056\uff81\057\uff81\060\uff81\061\uff81\062\uff81" +
    "\063\uff81\064\uff81\001\002\000\032\007\uff7f\011\uff7f\012" +
    "\uff7f\013\uff7f\014\uff7f\021\uff7f\023\uff7f\025\uff7f\032\uff7f" +
    "\033\uff7f\034\uff7f\035\uff7f\001\002\000\026\003\u0112\004" +
    "\012\005\023\043\007\044\017\054\021\056\025\062\011" +
    "\063\006\064\004\001\002\000\024\002\uffd5\004\uffd5\005" +
    "\uffd5\043\uffd5\054\uffd5\056\uffd5\062\uffd5\063\uffd5\064\uffd5" +
    "\001\002\000\066\003\ufff0\004\ufff0\005\ufff0\015\ufff0\016" +
    "\ufff0\021\ufff0\022\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0" +
    "\045\ufff0\046\ufff0\047\ufff0\051\ufff0\052\ufff0\053\ufff0\054" +
    "\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0" +
    "\063\ufff0\064\ufff0\001\002\000\020\004\012\005\023\043" +
    "\007\054\021\062\011\063\006\064\004\001\002\000\022" +
    "\005\023\022\246\023\250\043\007\054\021\056\274\063" +
    "\006\064\004\001\002\000\066\003\uff85\004\uff85\005\uff85" +
    "\015\uff85\016\uff85\021\uff85\022\uff85\041\uff85\042\uff85\043" +
    "\uff85\044\uff85\045\uff85\046\uff85\047\uff85\051\uff85\052\uff85" +
    "\053\uff85\054\uff85\055\uff85\056\uff85\057\uff85\060\uff85\061" +
    "\uff85\062\uff85\063\uff85\064\uff85\001\002\000\024\002\uffff" +
    "\004\012\005\023\043\007\054\021\056\025\062\011\063" +
    "\006\064\004\001\002\000\066\003\uff83\004\uff83\005\uff83" +
    "\015\uff83\016\uff83\021\uff83\022\uff83\041\uff83\042\uff83\043" +
    "\uff83\044\uff83\045\uff83\046\uff83\047\uff83\051\uff83\052\uff83" +
    "\053\uff83\054\uff83\055\uff83\056\uff83\057\uff83\060\uff83\061" +
    "\uff83\062\uff83\063\uff83\064\uff83\001\002\000\070\003\uffee" +
    "\004\uffee\005\uffee\015\uffee\016\uffee\021\uffee\022\uffee\023" +
    "\u0101\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee" +
    "\047\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056" +
    "\uffee\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064\uffee" +
    "\001\002\000\006\004\012\062\011\001\002\000\022\007" +
    "\036\011\034\012\027\013\042\014\040\032\035\033\031" +
    "\034\030\001\002\000\004\033\374\001\002\000\042\004" +
    "\012\005\023\006\121\010\117\011\133\012\126\013\132" +
    "\021\uffac\023\uffac\035\361\043\007\044\365\054\021\062" +
    "\011\063\006\064\004\001\002\000\072\003\uffde\004\uffde" +
    "\005\uffde\015\uffde\016\uffde\021\uffde\022\uffde\023\uffde\031" +
    "\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde" +
    "\047\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056" +
    "\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde" +
    "\001\002\000\006\021\051\023\053\001\002\000\070\003" +
    "\uffe9\004\uffe9\005\uffe9\015\uffe9\016\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046" +
    "\uffe9\047\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9" +
    "\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\064" +
    "\uffe9\001\002\000\076\003\uffd9\004\uffd9\005\uffd9\015\uffd9" +
    "\016\uffd9\021\uffd9\022\uffd9\023\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9" +
    "\047\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056" +
    "\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9" +
    "\001\002\000\106\003\uffdf\004\uffdf\005\uffdf\007\036\011" +
    "\034\012\045\013\042\014\040\015\uffdf\016\uffdf\021\uffdf" +
    "\022\uffdf\023\uffdf\031\uffdf\033\044\041\uffdf\042\uffdf\043" +
    "\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\051\uffdf\052\uffdf" +
    "\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061" +
    "\uffdf\062\uffdf\063\uffdf\064\uffdf\001\002\000\076\003\uffda" +
    "\004\uffda\005\uffda\015\uffda\016\uffda\021\uffda\022\uffda\023" +
    "\uffda\031\uffda\032\uffda\033\uffda\041\uffda\042\uffda\043\uffda" +
    "\044\uffda\045\uffda\046\uffda\047\uffda\051\uffda\052\uffda\053" +
    "\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda" +
    "\062\uffda\063\uffda\064\uffda\001\002\000\004\032\043\001" +
    "\002\000\076\003\uffd7\004\uffd7\005\uffd7\015\uffd7\016\uffd7" +
    "\021\uffd7\022\uffd7\023\uffd7\031\uffd7\032\uffd7\033\uffd7\041" +
    "\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7" +
    "\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057" +
    "\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\001\002" +
    "\000\072\003\uffe1\004\uffe1\005\uffe1\015\uffe1\016\uffe1\021" +
    "\uffe1\022\uffe1\023\uffe1\031\uffe1\041\uffe1\042\uffe1\043\uffe1" +
    "\044\uffe1\045\uffe1\046\uffe1\047\uffe1\051\uffe1\052\uffe1\053" +
    "\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1" +
    "\062\uffe1\063\uffe1\064\uffe1\001\002\000\076\003\uffd8\004" +
    "\uffd8\005\uffd8\015\uffd8\016\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\041\uffd8\042\uffd8\043\uffd8\044" +
    "\uffd8\045\uffd8\046\uffd8\047\uffd8\051\uffd8\052\uffd8\053\uffd8" +
    "\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062" +
    "\uffd8\063\uffd8\064\uffd8\001\002\000\072\003\uffdb\004\uffdb" +
    "\005\uffdb\015\uffdb\016\uffdb\021\uffdb\022\uffdb\023\uffdb\031" +
    "\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb" +
    "\047\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056" +
    "\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb" +
    "\001\002\000\072\003\uffe3\004\uffe3\005\uffe3\015\uffe3\016" +
    "\uffe3\021\uffe3\022\uffe3\023\uffe3\031\uffe3\041\uffe3\042\uffe3" +
    "\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\051\uffe3\052" +
    "\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3" +
    "\061\uffe3\062\uffe3\063\uffe3\064\uffe3\001\002\000\074\003" +
    "\uffe0\004\uffe0\005\uffe0\015\uffe0\016\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\031\uffe0\033\050\041\uffe0\042\uffe0\043\uffe0\044" +
    "\uffe0\045\uffe0\046\uffe0\047\uffe0\051\uffe0\052\uffe0\053\uffe0" +
    "\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062" +
    "\uffe0\063\uffe0\064\uffe0\001\002\000\074\003\uffdc\004\uffdc" +
    "\005\uffdc\015\uffdc\016\uffdc\021\uffdc\022\uffdc\023\uffdc\031" +
    "\uffdc\033\047\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc" +
    "\046\uffdc\047\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055" +
    "\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc" +
    "\064\uffdc\001\002\000\072\003\uffe2\004\uffe2\005\uffe2\015" +
    "\uffe2\016\uffe2\021\uffe2\022\uffe2\023\uffe2\031\uffe2\041\uffe2" +
    "\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\051" +
    "\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2" +
    "\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\001\002\000" +
    "\072\003\uffe4\004\uffe4\005\uffe4\015\uffe4\016\uffe4\021\uffe4" +
    "\022\uffe4\023\uffe4\031\uffe4\041\uffe4\042\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\051\uffe4\052\uffe4\053\uffe4" +
    "\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062" +
    "\uffe4\063\uffe4\064\uffe4\001\002\000\060\003\074\004\012" +
    "\005\023\015\106\016\064\021\051\022\110\041\100\043" +
    "\007\044\017\045\061\047\107\051\062\052\070\053\072" +
    "\054\021\055\101\057\105\060\104\061\063\062\011\063" +
    "\006\064\004\001\002\000\024\002\uffd4\004\uffd4\005\uffd4" +
    "\043\uffd4\054\uffd4\056\uffd4\062\uffd4\063\uffd4\064\uffd4\001" +
    "\002\000\024\002\uffd3\004\uffd3\005\uffd3\043\uffd3\054\uffd3" +
    "\056\uffd3\062\uffd3\063\uffd3\064\uffd3\001\002\000\050\003" +
    "\uffc7\004\uffc7\015\uffc7\016\uffc7\021\uffc7\022\uffc7\041\uffc7" +
    "\042\uffc7\045\uffc7\046\uffc7\047\uffc7\051\uffc7\052\uffc7\053" +
    "\uffc7\055\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\001\002" +
    "\000\050\003\uffc3\004\uffc3\015\uffc3\016\uffc3\021\uffc3\022" +
    "\uffc3\041\uffc3\042\uffc3\045\uffc3\046\uffc3\047\uffc3\051\uffc3" +
    "\052\uffc3\053\uffc3\055\uffc3\057\uffc3\060\uffc3\061\uffc3\062" +
    "\uffc3\001\002\000\052\003\uffbf\004\uffbf\015\uffbf\016\uffbf" +
    "\021\uffbf\022\uffbf\023\360\041\uffbf\042\uffbf\045\uffbf\046" +
    "\uffbf\047\uffbf\051\uffbf\052\uffbf\053\uffbf\055\uffbf\057\uffbf" +
    "\060\uffbf\061\uffbf\062\uffbf\001\002\000\044\003\245\004" +
    "\012\015\106\016\064\021\051\022\357\041\100\045\061" +
    "\047\107\051\062\052\070\053\072\055\101\057\105\060" +
    "\104\061\063\062\011\001\002\000\050\003\uffc8\004\uffc8" +
    "\015\uffc8\016\uffc8\021\uffc8\022\uffc8\041\uffc8\042\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\051\uffc8\052\uffc8\053\uffc8\055\uffc8" +
    "\057\uffc8\060\uffc8\061\uffc8\062\uffc8\001\002\000\052\003" +
    "\uff60\004\uff60\015\uff60\016\uff60\021\uff60\022\uff60\023\uff60" +
    "\041\uff60\042\uff60\045\uff60\046\uff60\047\uff60\051\uff60\052" +
    "\uff60\053\uff60\055\uff60\057\uff60\060\uff60\061\uff60\062\uff60" +
    "\001\002\000\004\034\322\001\002\000\004\034\317\001" +
    "\002\000\110\003\uff6c\004\uff6c\005\uff6c\015\uff6c\016\uff6c" +
    "\017\uff6c\020\uff6c\021\uff6c\022\uff6c\023\uff6c\024\uff6c\025" +
    "\uff6c\026\uff6c\027\uff6c\035\uff6c\036\uff6c\041\uff6c\042\uff6c" +
    "\043\uff6c\044\uff6c\045\uff6c\046\uff6c\047\uff6c\051\uff6c\052" +
    "\uff6c\053\uff6c\054\uff6c\055\uff6c\056\uff6c\057\uff6c\060\uff6c" +
    "\061\uff6c\062\uff6c\063\uff6c\064\uff6c\001\002\000\060\003" +
    "\074\004\012\005\023\015\106\016\064\021\051\022\315" +
    "\041\100\043\007\044\017\045\061\047\107\051\062\052" +
    "\070\053\072\054\021\055\101\057\105\060\104\061\063" +
    "\062\011\063\006\064\004\001\002\000\006\004\012\062" +
    "\011\001\002\000\032\007\uff7f\011\uff7f\012\uff7f\013\uff7f" +
    "\014\uff7f\015\106\016\064\030\161\031\252\032\uff7f\033" +
    "\uff7f\034\147\001\002\000\052\003\uff7a\004\uff7a\015\uff7a" +
    "\016\uff7a\021\uff7a\022\uff7a\034\300\041\uff7a\042\uff7a\045" +
    "\uff7a\046\uff7a\047\uff7a\051\uff7a\052\uff7a\053\uff7a\055\uff7a" +
    "\057\uff7a\060\uff7a\061\uff7a\062\uff7a\001\002\000\050\003" +
    "\uffcb\004\uffcb\015\uffcb\016\uffcb\021\uffcb\022\uffcb\041\uffcb" +
    "\042\uffcb\045\uffcb\046\uffcb\047\uffcb\051\uffcb\052\uffcb\053" +
    "\uffcb\055\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\001\002" +
    "\000\032\004\012\006\121\010\117\011\133\012\126\013" +
    "\132\015\106\016\064\024\120\034\125\037\130\062\011" +
    "\001\002\000\050\003\uffc6\004\uffc6\015\uffc6\016\uffc6\021" +
    "\uffc6\022\uffc6\041\uffc6\042\uffc6\045\uffc6\046\uffc6\047\uffc6" +
    "\051\uffc6\052\uffc6\053\uffc6\055\uffc6\057\uffc6\060\uffc6\061" +
    "\uffc6\062\uffc6\001\002\000\022\005\023\022\246\023\250" +
    "\043\007\054\021\056\274\063\006\064\004\001\002\000" +
    "\020\007\036\011\034\012\027\013\042\014\040\032\035" +
    "\033\031\001\002\000\006\021\051\023\273\001\002\000" +
    "\050\003\uffc9\004\uffc9\015\uffc9\016\uffc9\021\uffc9\022\uffc9" +
    "\041\uffc9\042\uffc9\045\uffc9\046\uffc9\047\uffc9\051\uffc9\052" +
    "\uffc9\053\uffc9\055\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9" +
    "\001\002\000\052\003\uff61\004\uff61\015\uff61\016\uff61\021" +
    "\uff61\022\uff61\023\uff61\041\uff61\042\uff61\045\uff61\046\uff61" +
    "\047\uff61\051\uff61\052\uff61\053\uff61\055\uff61\057\uff61\060" +
    "\uff61\061\uff61\062\uff61\001\002\000\004\034\206\001\002" +
    "\000\052\003\uffbd\004\uffbd\015\uffbd\016\uffbd\021\uffbd\022" +
    "\uffbd\023\205\041\uffbd\042\uffbd\045\uffbd\046\uffbd\047\uffbd" +
    "\051\uffbd\052\uffbd\053\uffbd\055\uffbd\057\uffbd\060\uffbd\061" +
    "\uffbd\062\uffbd\001\002\000\052\003\uffbb\004\uffbb\015\uffbb" +
    "\016\uffbb\021\uffbb\022\uffbb\023\204\041\uffbb\042\uffbb\045" +
    "\uffbb\046\uffbb\047\uffbb\051\uffbb\052\uffbb\053\uffbb\055\uffbb" +
    "\057\uffbb\060\uffbb\061\uffbb\062\uffbb\001\002\000\004\034" +
    "\200\001\002\000\004\034\171\001\002\000\110\003\uff6d" +
    "\004\uff6d\005\uff6d\015\uff6d\016\uff6d\017\uff6d\020\uff6d\021" +
    "\uff6d\022\uff6d\023\uff6d\024\uff6d\025\uff6d\026\uff6d\027\uff6d" +
    "\035\uff6d\036\uff6d\041\uff6d\042\uff6d\043\uff6d\044\uff6d\045" +
    "\uff6d\046\uff6d\047\uff6d\051\uff6d\052\uff6d\053\uff6d\054\uff6d" +
    "\055\uff6d\056\uff6d\057\uff6d\060\uff6d\061\uff6d\062\uff6d\063" +
    "\uff6d\064\uff6d\001\002\000\004\021\051\001\002\000\070" +
    "\002\uffce\003\uffce\004\uffce\005\uffce\015\uffce\016\uffce\021" +
    "\uffce\022\uffce\041\uffce\042\uffce\043\uffce\045\uffce\046\uffce" +
    "\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055" +
    "\uffce\056\uffce\057\uffce\060\uffce\061\uffce\062\uffce\063\uffce" +
    "\064\uffce\001\002\000\004\057\112\001\002\000\004\034" +
    "\113\001\002\000\034\004\012\006\121\010\117\011\133" +
    "\012\126\013\132\015\106\016\064\024\120\034\125\035" +
    "\122\037\130\062\011\001\002\000\004\023\115\001\002" +
    "\000\050\003\uff88\004\uff88\015\uff88\016\uff88\021\uff88\022" +
    "\uff88\041\uff88\042\uff88\045\uff88\046\uff88\047\uff88\051\uff88" +
    "\052\uff88\053\uff88\055\uff88\057\uff88\060\uff88\061\uff88\062" +
    "\uff88\001\002\000\110\003\uff6e\004\uff6e\005\uff6e\015\uff6e" +
    "\016\uff6e\017\uff6e\020\uff6e\021\uff6e\022\uff6e\023\uff6e\024" +
    "\uff6e\025\uff6e\026\uff6e\027\uff6e\035\uff6e\036\uff6e\041\uff6e" +
    "\042\uff6e\043\uff6e\044\uff6e\045\uff6e\046\uff6e\047\uff6e\051" +
    "\uff6e\052\uff6e\053\uff6e\054\uff6e\055\uff6e\056\uff6e\057\uff6e" +
    "\060\uff6e\061\uff6e\062\uff6e\063\uff6e\064\uff6e\001\002\000" +
    "\110\003\uff65\004\uff65\005\uff65\015\uff65\016\uff65\017\uff65" +
    "\020\uff65\021\uff65\022\uff65\023\uff65\024\uff65\025\uff65\026" +
    "\uff65\027\uff65\035\uff65\036\uff65\041\uff65\042\uff65\043\uff65" +
    "\044\uff65\045\uff65\046\uff65\047\uff65\051\uff65\052\uff65\053" +
    "\uff65\054\uff65\055\uff65\056\uff65\057\uff65\060\uff65\061\uff65" +
    "\062\uff65\063\uff65\064\uff65\001\002\000\032\004\012\006" +
    "\121\010\117\011\133\012\126\013\132\015\106\016\064" +
    "\024\120\034\125\037\130\062\011\001\002\000\110\003" +
    "\uff66\004\uff66\005\uff66\015\uff66\016\uff66\017\uff66\020\uff66" +
    "\021\uff66\022\uff66\023\uff66\024\uff66\025\uff66\026\uff66\027" +
    "\uff66\035\uff66\036\uff66\041\uff66\042\uff66\043\uff66\044\uff66" +
    "\045\uff66\046\uff66\047\uff66\051\uff66\052\uff66\053\uff66\054" +
    "\uff66\055\uff66\056\uff66\057\uff66\060\uff66\061\uff66\062\uff66" +
    "\063\uff66\064\uff66\001\002\000\006\021\uff9b\023\uff9b\001" +
    "\002\000\004\035\166\001\002\000\110\003\uff70\004\uff70" +
    "\005\uff70\015\uff70\016\uff70\017\uff70\020\uff70\021\uff70\022" +
    "\uff70\023\uff70\024\uff70\025\uff70\026\uff70\027\uff70\035\uff70" +
    "\036\uff70\041\uff70\042\uff70\043\uff70\044\uff70\045\uff70\046" +
    "\uff70\047\uff70\051\uff70\052\uff70\053\uff70\054\uff70\055\uff70" +
    "\056\uff70\057\uff70\060\uff70\061\uff70\062\uff70\063\uff70\064" +
    "\uff70\001\002\000\032\004\012\006\121\010\117\011\133" +
    "\012\126\013\132\015\106\016\064\024\120\034\125\037" +
    "\130\062\011\001\002\000\110\003\uff62\004\uff62\005\uff62" +
    "\015\uff62\016\uff62\017\uff62\020\uff62\021\uff62\022\uff62\023" +
    "\uff62\024\uff62\025\uff62\026\uff62\027\uff62\035\uff62\036\uff62" +
    "\041\uff62\042\uff62\043\uff62\044\uff62\045\uff62\046\uff62\047" +
    "\uff62\051\uff62\052\uff62\053\uff62\054\uff62\055\uff62\056\uff62" +
    "\057\uff62\060\uff62\061\uff62\062\uff62\063\uff62\064\uff62\001" +
    "\002\000\032\015\106\016\064\017\uff6f\020\uff6f\024\uff6f" +
    "\026\uff6f\027\uff6f\030\161\031\162\034\147\035\uff6f\036" +
    "\uff6f\001\002\000\032\004\012\006\121\010\117\011\133" +
    "\012\126\013\132\015\106\016\064\024\120\034\125\037" +
    "\130\062\011\001\002\000\020\017\140\020\134\024\135" +
    "\026\142\027\137\035\uff76\036\136\001\002\000\110\003" +
    "\uff63\004\uff63\005\uff63\015\uff63\016\uff63\017\uff63\020\uff63" +
    "\021\uff63\022\uff63\023\uff63\024\uff63\025\uff63\026\uff63\027" +
    "\uff63\035\uff63\036\uff63\041\uff63\042\uff63\043\uff63\044\uff63" +
    "\045\uff63\046\uff63\047\uff63\051\uff63\052\uff63\053\uff63\054" +
    "\uff63\055\uff63\056\uff63\057\uff63\060\uff63\061\uff63\062\uff63" +
    "\063\uff63\064\uff63\001\002\000\110\003\uff64\004\uff64\005" +
    "\uff64\015\uff64\016\uff64\017\uff64\020\uff64\021\uff64\022\uff64" +
    "\023\uff64\024\uff64\025\uff64\026\uff64\027\uff64\035\uff64\036" +
    "\uff64\041\uff64\042\uff64\043\uff64\044\uff64\045\uff64\046\uff64" +
    "\047\uff64\051\uff64\052\uff64\053\uff64\054\uff64\055\uff64\056" +
    "\uff64\057\uff64\060\uff64\061\uff64\062\uff64\063\uff64\064\uff64" +
    "\001\002\000\032\004\uff68\006\uff68\010\uff68\011\uff68\012" +
    "\uff68\013\uff68\015\uff68\016\uff68\024\uff68\034\uff68\037\uff68" +
    "\062\uff68\001\002\000\032\004\uff6a\006\uff6a\010\uff6a\011" +
    "\uff6a\012\uff6a\013\uff6a\015\uff6a\016\uff6a\024\uff6a\034\uff6a" +
    "\037\uff6a\062\uff6a\001\002\000\032\004\012\006\121\010" +
    "\117\011\133\012\126\013\132\015\106\016\064\024\120" +
    "\034\125\037\130\062\011\001\002\000\032\004\uff67\006" +
    "\uff67\010\uff67\011\uff67\012\uff67\013\uff67\015\uff67\016\uff67" +
    "\024\uff67\034\uff67\037\uff67\062\uff67\001\002\000\032\004" +
    "\uff6b\006\uff6b\010\uff6b\011\uff6b\012\uff6b\013\uff6b\015\uff6b" +
    "\016\uff6b\024\uff6b\034\uff6b\037\uff6b\062\uff6b\001\002\000" +
    "\032\004\012\006\121\010\117\011\133\012\126\013\132" +
    "\015\106\016\064\024\120\034\125\037\130\062\011\001" +
    "\002\000\032\004\uff69\006\uff69\010\uff69\011\uff69\012\uff69" +
    "\013\uff69\015\uff69\016\uff69\024\uff69\034\uff69\037\uff69\062" +
    "\uff69\001\002\000\112\003\uff6f\004\uff6f\005\uff6f\015\106" +
    "\016\064\017\uff6f\020\uff6f\021\uff6f\022\uff6f\023\uff6f\024" +
    "\uff6f\025\uff6f\026\uff6f\027\uff6f\034\147\035\uff6f\036\uff6f" +
    "\041\uff6f\042\uff6f\043\uff6f\044\uff6f\045\uff6f\046\uff6f\047" +
    "\uff6f\051\uff6f\052\uff6f\053\uff6f\054\uff6f\055\uff6f\056\uff6f" +
    "\057\uff6f\060\uff6f\061\uff6f\062\uff6f\063\uff6f\064\uff6f\001" +
    "\002\000\110\003\uff72\004\uff72\005\uff72\015\uff72\016\uff72" +
    "\017\140\020\134\021\uff72\022\uff72\023\uff72\024\135\025" +
    "\uff72\026\142\027\137\035\uff72\036\136\041\uff72\042\uff72" +
    "\043\uff72\044\uff72\045\uff72\046\uff72\047\uff72\051\uff72\052" +
    "\uff72\053\uff72\054\uff72\055\uff72\056\uff72\057\uff72\060\uff72" +
    "\061\uff72\062\uff72\063\uff72\064\uff72\001\002\000\110\003" +
    "\uffb3\004\uffb3\005\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3" +
    "\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\035\uffb3\036\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3" +
    "\045\uffb3\046\uffb3\047\uffb3\051\uffb3\052\uffb3\053\uffb3\054" +
    "\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3" +
    "\063\uffb3\064\uffb3\001\002\000\110\003\uffb4\004\uffb4\005" +
    "\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4" +
    "\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\035\uffb4\036" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4" +
    "\047\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056" +
    "\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4" +
    "\001\002\000\034\004\012\006\121\010\117\011\133\012" +
    "\126\013\132\015\106\016\064\024\120\034\125\035\150" +
    "\037\130\062\011\001\002\000\110\003\uffb0\004\uffb0\005" +
    "\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0" +
    "\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\035\uffb0\036" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0" +
    "\047\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056" +
    "\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0" +
    "\001\002\000\024\017\140\020\134\022\uffaa\024\135\025" +
    "\uffaa\026\142\027\137\035\uffaa\036\136\001\002\000\006" +
    "\025\153\035\154\001\002\000\032\004\012\006\121\010" +
    "\117\011\133\012\126\013\132\015\106\016\064\024\120" +
    "\034\125\037\130\062\011\001\002\000\110\003\uffb1\004" +
    "\uffb1\005\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\035" +
    "\uffb1\036\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1" +
    "\046\uffb1\047\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055" +
    "\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1" +
    "\064\uffb1\001\002\000\024\017\140\020\134\022\uffab\024" +
    "\135\025\uffab\026\142\027\137\035\uffab\036\136\001\002" +
    "\000\110\003\uff74\004\uff74\005\uff74\015\uff74\016\uff74\017" +
    "\140\020\134\021\uff74\022\uff74\023\uff74\024\135\025\uff74" +
    "\026\142\027\137\035\uff74\036\uff74\041\uff74\042\uff74\043" +
    "\uff74\044\uff74\045\uff74\046\uff74\047\uff74\051\uff74\052\uff74" +
    "\053\uff74\054\uff74\055\uff74\056\uff74\057\uff74\060\uff74\061" +
    "\uff74\062\uff74\063\uff74\064\uff74\001\002\000\110\003\uff75" +
    "\004\uff75\005\uff75\015\uff75\016\uff75\017\140\020\134\021" +
    "\uff75\022\uff75\023\uff75\024\135\025\uff75\026\142\027\137" +
    "\035\uff75\036\136\041\uff75\042\uff75\043\uff75\044\uff75\045" +
    "\uff75\046\uff75\047\uff75\051\uff75\052\uff75\053\uff75\054\uff75" +
    "\055\uff75\056\uff75\057\uff75\060\uff75\061\uff75\062\uff75\063" +
    "\uff75\064\uff75\001\002\000\032\004\012\006\121\010\117" +
    "\011\133\012\126\013\132\015\106\016\064\024\120\034" +
    "\125\037\130\062\011\001\002\000\032\004\uffa3\006\uffa3" +
    "\010\uffa3\011\uffa3\012\uffa3\013\uffa3\015\uffa3\016\uffa3\024" +
    "\uffa3\034\uffa3\037\uffa3\062\uffa3\001\002\000\032\004\uffa2" +
    "\006\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\015\uffa2\016" +
    "\uffa2\024\uffa2\034\uffa2\037\uffa2\062\uffa2\001\002\000\020" +
    "\017\140\020\134\024\135\026\142\027\137\035\uff77\036" +
    "\136\001\002\000\020\017\140\020\134\024\135\026\142" +
    "\027\137\035\165\036\136\001\002\000\110\003\uff71\004" +
    "\uff71\005\uff71\015\uff71\016\uff71\017\uff71\020\uff71\021\uff71" +
    "\022\uff71\023\uff71\024\uff71\025\uff71\026\uff71\027\uff71\035" +
    "\uff71\036\uff71\041\uff71\042\uff71\043\uff71\044\uff71\045\uff71" +
    "\046\uff71\047\uff71\051\uff71\052\uff71\053\uff71\054\uff71\055" +
    "\uff71\056\uff71\057\uff71\060\uff71\061\uff71\062\uff71\063\uff71" +
    "\064\uff71\001\002\000\004\023\167\001\002\000\050\003" +
    "\uff8c\004\uff8c\015\uff8c\016\uff8c\021\uff8c\022\uff8c\041\uff8c" +
    "\042\uff8c\045\uff8c\046\uff8c\047\uff8c\051\uff8c\052\uff8c\053" +
    "\uff8c\055\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c\001\002" +
    "\000\110\003\uff73\004\uff73\005\uff73\015\uff73\016\uff73\017" +
    "\uff73\020\134\021\uff73\022\uff73\023\uff73\024\uff73\025\uff73" +
    "\026\142\027\137\035\uff73\036\uff73\041\uff73\042\uff73\043" +
    "\uff73\044\uff73\045\uff73\046\uff73\047\uff73\051\uff73\052\uff73" +
    "\053\uff73\054\uff73\055\uff73\056\uff73\057\uff73\060\uff73\061" +
    "\uff73\062\uff73\063\uff73\064\uff73\001\002\000\034\004\012" +
    "\006\121\010\117\011\133\012\126\013\132\015\106\016" +
    "\064\024\120\034\125\035\122\037\130\062\011\001\002" +
    "\000\004\021\051\001\002\000\050\003\uff89\004\uff89\015" +
    "\uff89\016\uff89\021\uff89\022\uff89\041\uff89\042\uff89\045\uff89" +
    "\046\uff89\047\uff89\051\uff89\052\uff89\053\uff89\055\uff89\057" +
    "\uff89\060\uff89\061\uff89\062\uff89\001\002\000\004\035\175" +
    "\001\002\000\006\021\051\023\177\001\002\000\050\003" +
    "\uff8a\004\uff8a\015\uff8a\016\uff8a\021\uff8a\022\uff8a\041\uff8a" +
    "\042\uff8a\045\uff8a\046\uff8a\047\uff8a\051\uff8a\052\uff8a\053" +
    "\uff8a\055\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a\001\002" +
    "\000\050\003\uff8b\004\uff8b\015\uff8b\016\uff8b\021\uff8b\022" +
    "\uff8b\041\uff8b\042\uff8b\045\uff8b\046\uff8b\047\uff8b\051\uff8b" +
    "\052\uff8b\053\uff8b\055\uff8b\057\uff8b\060\uff8b\061\uff8b\062" +
    "\uff8b\001\002\000\010\004\012\035\202\062\011\001\002" +
    "\000\004\035\203\001\002\000\052\003\uffb7\004\uffb7\015" +
    "\uffb7\016\uffb7\021\uffb7\022\uffb7\023\uffb7\041\uffb7\042\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\051\uffb7\052\uffb7\053\uffb7\055" +
    "\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\001\002\000\052" +
    "\003\uffb6\004\uffb6\015\uffb6\016\uffb6\021\uffb6\022\uffb6\023" +
    "\uffb6\041\uffb6\042\uffb6\045\uffb6\046\uffb6\047\uffb6\051\uffb6" +
    "\052\uffb6\053\uffb6\055\uffb6\057\uffb6\060\uffb6\061\uffb6\062" +
    "\uffb6\001\002\000\050\003\uffc0\004\uffc0\015\uffc0\016\uffc0" +
    "\021\uffc0\022\uffc0\041\uffc0\042\uffc0\045\uffc0\046\uffc0\047" +
    "\uffc0\051\uffc0\052\uffc0\053\uffc0\055\uffc0\057\uffc0\060\uffc0" +
    "\061\uffc0\062\uffc0\001\002\000\050\003\uffc2\004\uffc2\015" +
    "\uffc2\016\uffc2\021\uffc2\022\uffc2\041\uffc2\042\uffc2\045\uffc2" +
    "\046\uffc2\047\uffc2\051\uffc2\052\uffc2\053\uffc2\055\uffc2\057" +
    "\uffc2\060\uffc2\061\uffc2\062\uffc2\001\002\000\034\004\012" +
    "\006\121\010\117\011\133\012\126\013\132\015\106\016" +
    "\064\024\120\034\125\035\122\037\130\062\011\001\002" +
    "\000\004\021\210\001\002\000\012\003\215\022\214\042" +
    "\216\046\212\001\002\000\050\003\uffa0\004\uffa0\015\uffa0" +
    "\016\uffa0\021\uffa0\022\uffa0\041\uffa0\042\uffa0\045\uffa0\046" +
    "\uffa0\047\uffa0\051\uffa0\052\uffa0\053\uffa0\055\uffa0\057\uffa0" +
    "\060\uffa0\061\uffa0\062\uffa0\001\002\000\004\040\264\001" +
    "\002\000\010\022\uff99\042\uff99\046\uff99\001\002\000\050" +
    "\003\uff9c\004\uff9c\015\uff9c\016\uff9c\021\uff9c\022\uff9c\041" +
    "\uff9c\042\uff9c\045\uff9c\046\uff9c\047\uff9c\051\uff9c\052\uff9c" +
    "\053\uff9c\055\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c\001" +
    "\002\000\004\023\263\001\002\000\020\006\234\007\235" +
    "\010\226\011\233\012\231\013\230\014\232\001\002\000" +
    "\010\022\221\042\216\046\220\001\002\000\004\040\223" +
    "\001\002\000\050\003\uff9d\004\uff9d\015\uff9d\016\uff9d\021" +
    "\uff9d\022\uff9d\041\uff9d\042\uff9d\045\uff9d\046\uff9d\047\uff9d" +
    "\051\uff9d\052\uff9d\053\uff9d\055\uff9d\057\uff9d\060\uff9d\061" +
    "\uff9d\062\uff9d\001\002\000\010\022\uff9a\042\uff9a\046\uff9a" +
    "\001\002\000\032\004\012\006\121\010\117\011\133\012" +
    "\126\013\132\015\106\016\064\024\120\034\125\037\130" +
    "\062\011\001\002\000\020\017\140\020\134\022\225\024" +
    "\135\026\142\027\137\036\136\001\002\000\050\003\uff9f" +
    "\004\uff9f\015\uff9f\016\uff9f\021\uff9f\022\uff9f\041\uff9f\042" +
    "\uff9f\045\uff9f\046\uff9f\047\uff9f\051\uff9f\052\uff9f\053\uff9f" +
    "\055\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\001\002\000" +
    "\004\040\uff90\001\002\000\004\040\236\001\002\000\004" +
    "\040\uff8e\001\002\000\004\040\uff93\001\002\000\004\040" +
    "\uff8f\001\002\000\004\040\uff8d\001\002\000\004\040\uff91" +
    "\001\002\000\004\040\uff92\001\002\000\064\003\074\004" +
    "\012\005\023\015\106\016\064\021\051\022\uff94\041\100" +
    "\042\uff94\043\007\044\017\045\061\046\uff94\047\107\051" +
    "\062\052\070\053\072\054\021\055\101\057\105\060\104" +
    "\061\063\062\011\063\006\064\004\001\002\000\050\003" +
    "\245\004\012\015\106\016\064\021\051\022\uff96\041\100" +
    "\042\uff96\045\061\046\uff96\047\107\051\062\052\070\053" +
    "\072\055\101\057\105\060\104\061\063\062\011\001\002" +
    "\000\064\003\074\004\012\005\023\015\106\016\064\021" +
    "\051\022\uff95\041\100\042\uff95\043\007\044\017\045\061" +
    "\046\uff95\047\107\051\062\052\070\053\072\054\021\055" +
    "\101\057\105\060\104\061\063\062\011\063\006\064\004" +
    "\001\002\000\050\003\245\004\012\015\106\016\064\021" +
    "\051\022\uff97\041\100\042\uff97\045\061\046\uff97\047\107" +
    "\051\062\052\070\053\072\055\101\057\105\060\104\061" +
    "\063\062\011\001\002\000\066\003\ufff1\004\ufff1\005\ufff1" +
    "\015\ufff1\016\ufff1\021\ufff1\022\ufff1\041\ufff1\042\ufff1\043" +
    "\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\051\ufff1\052\ufff1" +
    "\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061" +
    "\ufff1\062\ufff1\063\ufff1\064\ufff1\001\002\000\050\003\uffcc" +
    "\004\uffcc\015\uffcc\016\uffcc\021\uffcc\022\uffcc\041\uffcc\042" +
    "\uffcc\045\uffcc\046\uffcc\047\uffcc\051\uffcc\052\uffcc\053\uffcc" +
    "\055\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\001\002\000" +
    "\014\015\106\016\064\030\161\031\252\034\147\001\002" +
    "\000\006\022\246\023\250\001\002\000\052\002\uffb8\003" +
    "\uffb8\004\uffb8\015\uffb8\016\uffb8\021\uffb8\022\uffb8\041\uffb8" +
    "\042\uffb8\045\uffb8\046\uffb8\047\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\055\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\001\002" +
    "\000\050\003\uffba\004\uffba\015\uffba\016\uffba\021\uffba\022" +
    "\uffba\041\uffba\042\uffba\045\uffba\046\uffba\047\uffba\051\uffba" +
    "\052\uffba\053\uffba\055\uffba\057\uffba\060\uffba\061\uffba\062" +
    "\uffba\001\002\000\052\002\uffb9\003\uffb9\004\uffb9\015\uffb9" +
    "\016\uffb9\021\uffb9\022\uffb9\041\uffb9\042\uffb9\045\uffb9\046" +
    "\uffb9\047\uffb9\051\uffb9\052\uffb9\053\uffb9\055\uffb9\057\uffb9" +
    "\060\uffb9\061\uffb9\062\uffb9\001\002\000\032\004\012\006" +
    "\121\010\117\011\133\012\126\013\132\015\106\016\064" +
    "\024\120\034\125\037\130\062\011\001\002\000\034\004" +
    "\uffa2\006\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\015\uffa2" +
    "\016\uffa2\021\254\024\uffa2\034\uffa2\037\uffa2\062\uffa2\001" +
    "\002\000\004\023\260\001\002\000\034\004\012\006\121" +
    "\010\117\011\133\012\126\013\132\015\106\016\064\022" +
    "\255\024\120\034\125\037\130\062\011\001\002\000\070" +
    "\003\uffa4\004\uffa4\005\uffa4\015\uffa4\016\uffa4\021\uffa4\022" +
    "\uffa4\023\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4" +
    "\046\uffa4\047\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055" +
    "\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4" +
    "\064\uffa4\001\002\000\006\022\257\025\153\001\002\000" +
    "\070\003\uffa5\004\uffa5\005\uffa5\015\uffa5\016\uffa5\021\uffa5" +
    "\022\uffa5\023\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045" +
    "\uffa5\046\uffa5\047\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5" +
    "\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\063" +
    "\uffa5\064\uffa5\001\002\000\050\003\uffc4\004\uffc4\015\uffc4" +
    "\016\uffc4\021\uffc4\022\uffc4\041\uffc4\042\uffc4\045\uffc4\046" +
    "\uffc4\047\uffc4\051\uffc4\052\uffc4\053\uffc4\055\uffc4\057\uffc4" +
    "\060\uffc4\061\uffc4\062\uffc4\001\002\000\066\003\uffbe\004" +
    "\uffbe\015\uffbe\016\uffbe\017\140\020\134\021\uffbe\022\uffbe" +
    "\023\262\024\135\026\142\027\137\036\136\041\uffbe\042" +
    "\uffbe\045\uffbe\046\uffbe\047\uffbe\051\uffbe\052\uffbe\053\uffbe" +
    "\055\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\001\002\000" +
    "\050\003\uffc5\004\uffc5\015\uffc5\016\uffc5\021\uffc5\022\uffc5" +
    "\041\uffc5\042\uffc5\045\uffc5\046\uffc5\047\uffc5\051\uffc5\052" +
    "\uffc5\053\uffc5\055\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5" +
    "\001\002\000\010\022\uff98\042\uff98\046\uff98\001\002\000" +
    "\032\004\012\006\121\010\117\011\133\012\126\013\132" +
    "\015\106\016\064\024\120\034\125\037\130\062\011\001" +
    "\002\000\020\017\140\020\134\022\266\024\135\026\142" +
    "\027\137\036\136\001\002\000\050\003\uff9e\004\uff9e\015" +
    "\uff9e\016\uff9e\021\uff9e\022\uff9e\041\uff9e\042\uff9e\045\uff9e" +
    "\046\uff9e\047\uff9e\051\uff9e\052\uff9e\053\uff9e\055\uff9e\057" +
    "\uff9e\060\uff9e\061\uff9e\062\uff9e\001\002\000\020\017\140" +
    "\020\134\024\135\026\142\027\137\035\270\036\136\001" +
    "\002\000\004\021\210\001\002\000\050\003\uffa1\004\uffa1" +
    "\015\uffa1\016\uffa1\021\uffa1\022\uffa1\041\uffa1\042\uffa1\045" +
    "\uffa1\046\uffa1\047\uffa1\051\uffa1\052\uffa1\053\uffa1\055\uffa1" +
    "\057\uffa1\060\uffa1\061\uffa1\062\uffa1\001\002\000\050\003" +
    "\ufffd\004\ufffd\015\ufffd\016\ufffd\021\ufffd\022\ufffd\041\ufffd" +
    "\042\ufffd\045\ufffd\046\ufffd\047\ufffd\051\ufffd\052\ufffd\053" +
    "\ufffd\055\ufffd\057\ufffd\060\ufffd\061\ufffd\062\ufffd\001\002" +
    "\000\050\003\ufffc\004\ufffc\015\ufffc\016\ufffc\021\ufffc\022" +
    "\ufffc\041\ufffc\042\ufffc\045\ufffc\046\ufffc\047\ufffc\051\ufffc" +
    "\052\ufffc\053\ufffc\055\ufffc\057\ufffc\060\ufffc\061\ufffc\062" +
    "\ufffc\001\002\000\066\003\uffec\004\uffec\005\uffec\015\uffec" +
    "\016\uffec\021\uffec\022\uffec\041\uffec\042\uffec\043\uffec\044" +
    "\uffec\045\uffec\046\uffec\047\uffec\051\uffec\052\uffec\053\uffec" +
    "\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062" +
    "\uffec\063\uffec\064\uffec\001\002\000\066\003\uffed\004\uffed" +
    "\005\uffed\015\uffed\016\uffed\021\uffed\022\uffed\041\uffed\042" +
    "\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed\051\uffed" +
    "\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed\060" +
    "\uffed\061\uffed\062\uffed\063\uffed\064\uffed\001\002\000\066" +
    "\003\uffbc\004\uffbc\015\uffbc\016\uffbc\017\140\020\134\021" +
    "\uffbc\022\uffbc\023\277\024\135\026\142\027\137\036\136" +
    "\041\uffbc\042\uffbc\045\uffbc\046\uffbc\047\uffbc\051\uffbc\052" +
    "\uffbc\053\uffbc\055\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc" +
    "\001\002\000\050\003\uffc1\004\uffc1\015\uffc1\016\uffc1\021" +
    "\uffc1\022\uffc1\041\uffc1\042\uffc1\045\uffc1\046\uffc1\047\uffc1" +
    "\051\uffc1\052\uffc1\053\uffc1\055\uffc1\057\uffc1\060\uffc1\061" +
    "\uffc1\062\uffc1\001\002\000\034\004\012\006\121\010\117" +
    "\011\133\012\126\013\132\015\106\016\064\024\120\034" +
    "\125\035\122\037\130\062\011\001\002\000\004\021\051" +
    "\001\002\000\052\003\uff7b\004\uff7b\015\uff7b\016\uff7b\021" +
    "\uff7b\022\uff7b\041\uff7b\042\uff7b\045\uff7b\046\uff7b\047\uff7b" +
    "\050\304\051\uff7b\052\uff7b\053\uff7b\055\uff7b\057\uff7b\060" +
    "\uff7b\061\uff7b\062\uff7b\001\002\000\050\003\uff7c\004\uff7c" +
    "\015\uff7c\016\uff7c\021\uff7c\022\uff7c\041\uff7c\042\uff7c\045" +
    "\uff7c\046\uff7c\047\uff7c\051\uff7c\052\uff7c\053\uff7c\055\uff7c" +
    "\057\uff7c\060\uff7c\061\uff7c\062\uff7c\001\002\000\006\021" +
    "\051\052\070\001\002\000\050\003\uff78\004\uff78\015\uff78" +
    "\016\uff78\021\uff78\022\uff78\041\uff78\042\uff78\045\uff78\046" +
    "\uff78\047\uff78\051\uff78\052\uff78\053\uff78\055\uff78\057\uff78" +
    "\060\uff78\061\uff78\062\uff78\001\002\000\050\003\uff79\004" +
    "\uff79\015\uff79\016\uff79\021\uff79\022\uff79\041\uff79\042\uff79" +
    "\045\uff79\046\uff79\047\uff79\051\uff79\052\uff79\053\uff79\055" +
    "\uff79\057\uff79\060\uff79\061\uff79\062\uff79\001\002\000\004" +
    "\035\310\001\002\000\004\021\051\001\002\000\052\003" +
    "\uff7d\004\uff7d\015\uff7d\016\uff7d\021\uff7d\022\uff7d\041\uff7d" +
    "\042\uff7d\045\uff7d\046\uff7d\047\uff7d\050\304\051\uff7d\052" +
    "\uff7d\053\uff7d\055\uff7d\057\uff7d\060\uff7d\061\uff7d\062\uff7d" +
    "\001\002\000\050\003\uff7e\004\uff7e\015\uff7e\016\uff7e\021" +
    "\uff7e\022\uff7e\041\uff7e\042\uff7e\045\uff7e\046\uff7e\047\uff7e" +
    "\051\uff7e\052\uff7e\053\uff7e\055\uff7e\057\uff7e\060\uff7e\061" +
    "\uff7e\062\uff7e\001\002\000\110\003\uffb2\004\uffb2\005\uffb2" +
    "\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\035\uffb2\036\uffb2" +
    "\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047" +
    "\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2" +
    "\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\001" +
    "\002\000\044\003\245\004\012\015\106\016\064\021\051" +
    "\022\316\041\100\045\061\047\107\051\062\052\070\053" +
    "\072\055\101\057\105\060\104\061\063\062\011\001\002" +
    "\000\070\002\uffcd\003\uffcd\004\uffcd\005\uffcd\015\uffcd\016" +
    "\uffcd\021\uffcd\022\uffcd\041\uffcd\042\uffcd\043\uffcd\045\uffcd" +
    "\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054" +
    "\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd" +
    "\063\uffcd\064\uffcd\001\002\000\070\002\uffd0\003\uffd0\004" +
    "\uffd0\005\uffd0\015\uffd0\016\uffd0\021\uffd0\022\uffd0\041\uffd0" +
    "\042\uffd0\043\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051" +
    "\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0" +
    "\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\001\002\000" +
    "\032\004\012\006\121\010\117\011\133\012\126\013\132" +
    "\015\106\016\064\024\120\034\125\037\130\062\011\001" +
    "\002\000\020\017\140\020\134\024\135\026\142\027\137" +
    "\035\321\036\136\001\002\000\052\003\uffb5\004\uffb5\015" +
    "\uffb5\016\uffb5\021\uffb5\022\uffb5\023\uffb5\041\uffb5\042\uffb5" +
    "\045\uffb5\046\uffb5\047\uffb5\051\uffb5\052\uffb5\053\uffb5\055" +
    "\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\001\002\000\022" +
    "\004\012\005\023\023\323\043\007\054\021\062\011\063" +
    "\006\064\004\001\002\000\034\004\ufff2\006\ufff2\010\ufff2" +
    "\011\ufff2\012\ufff2\013\ufff2\015\ufff2\016\ufff2\023\ufff2\024" +
    "\ufff2\034\ufff2\037\ufff2\062\ufff2\001\002\000\006\023\354" +
    "\031\353\001\002\000\034\004\012\006\121\010\117\011" +
    "\133\012\126\013\132\015\106\016\064\023\335\024\120" +
    "\034\125\037\130\062\011\001\002\000\006\004\012\062" +
    "\011\001\002\000\004\031\330\001\002\000\032\004\012" +
    "\006\121\010\117\011\133\012\126\013\132\015\106\016" +
    "\064\024\120\034\125\037\130\062\011\001\002\000\020" +
    "\017\140\020\134\023\332\024\135\026\142\027\137\036" +
    "\136\001\002\000\034\004\ufff5\006\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\015\ufff5\016\ufff5\023\ufff5\024\ufff5\034" +
    "\ufff5\037\ufff5\062\ufff5\001\002\000\032\015\106\016\064" +
    "\017\uff6f\020\uff6f\023\uff6f\024\uff6f\026\uff6f\027\uff6f\030" +
    "\161\031\162\034\147\036\uff6f\001\002\000\020\017\140" +
    "\020\134\023\341\024\135\026\142\027\137\036\136\001" +
    "\002\000\034\004\012\006\121\010\117\011\133\012\126" +
    "\013\132\015\106\016\064\024\120\034\125\035\336\037" +
    "\130\062\011\001\002\000\006\021\ufff6\023\ufff6\001\002" +
    "\000\020\017\140\020\134\024\135\026\142\027\137\035" +
    "\340\036\136\001\002\000\006\021\ufff9\023\ufff9\001\002" +
    "\000\034\004\012\006\121\010\117\011\133\012\126\013" +
    "\132\015\106\016\064\024\120\034\125\035\342\037\130" +
    "\062\011\001\002\000\006\021\ufff8\023\ufff8\001\002\000" +
    "\020\017\140\020\134\024\135\026\142\027\137\035\344" +
    "\036\136\001\002\000\006\021\ufffb\023\ufffb\001\002\000" +
    "\032\004\012\006\121\010\117\011\133\012\126\013\132" +
    "\015\106\016\064\024\120\034\125\037\130\062\011\001" +
    "\002\000\020\017\140\020\134\023\347\024\135\026\142" +
    "\027\137\036\136\001\002\000\034\004\012\006\121\010" +
    "\117\011\133\012\126\013\132\015\106\016\064\024\120" +
    "\034\125\035\350\037\130\062\011\001\002\000\006\021" +
    "\ufff7\023\ufff7\001\002\000\020\017\140\020\134\024\135" +
    "\026\142\027\137\035\352\036\136\001\002\000\006\021" +
    "\ufffa\023\ufffa\001\002\000\032\004\012\006\121\010\117" +
    "\011\133\012\126\013\132\015\106\016\064\024\120\034" +
    "\125\037\130\062\011\001\002\000\034\004\ufff3\006\ufff3" +
    "\010\ufff3\011\ufff3\012\ufff3\013\ufff3\015\ufff3\016\ufff3\023" +
    "\ufff3\024\ufff3\034\ufff3\037\ufff3\062\ufff3\001\002\000\020" +
    "\017\140\020\134\023\356\024\135\026\142\027\137\036" +
    "\136\001\002\000\034\004\ufff4\006\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\015\ufff4\016\ufff4\023\ufff4\024\ufff4\034" +
    "\ufff4\037\ufff4\062\ufff4\001\002\000\070\002\uffcf\003\uffcf" +
    "\004\uffcf\005\uffcf\015\uffcf\016\uffcf\021\uffcf\022\uffcf\041" +
    "\uffcf\042\uffcf\043\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf" +
    "\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057" +
    "\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\001\002" +
    "\000\050\003\uffca\004\uffca\015\uffca\016\uffca\021\uffca\022" +
    "\uffca\041\uffca\042\uffca\045\uffca\046\uffca\047\uffca\051\uffca" +
    "\052\uffca\053\uffca\055\uffca\057\uffca\060\uffca\061\uffca\062" +
    "\uffca\001\002\000\006\021\uffae\023\uffae\001\002\000\012" +
    "\021\uffa6\023\uffa6\025\uffa6\035\uffa6\001\002\000\006\004" +
    "\012\062\011\001\002\000\012\021\uffad\023\uffad\025\370" +
    "\035\371\001\002\000\020\004\012\005\023\043\007\054" +
    "\021\062\011\063\006\064\004\001\002\000\012\021\uffa8" +
    "\023\uffa8\025\uffa8\035\uffa8\001\002\000\012\021\uffa7\023" +
    "\uffa7\025\uffa7\035\uffa7\001\002\000\020\004\012\005\023" +
    "\043\007\054\021\062\011\063\006\064\004\001\002\000" +
    "\006\021\uffaf\023\uffaf\001\002\000\012\021\uffa9\023\uffa9" +
    "\025\uffa9\035\uffa9\001\002\000\014\021\uff80\023\uff80\025" +
    "\uff80\034\uff80\035\uff80\001\002\000\072\003\uffdd\004\uffdd" +
    "\005\uffdd\015\uffdd\016\uffdd\021\uffdd\022\uffdd\023\uffdd\031" +
    "\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd" +
    "\047\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056" +
    "\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd" +
    "\001\002\000\004\034\030\001\002\000\006\021\051\023" +
    "\u0100\001\002\000\024\002\uffd2\004\uffd2\005\uffd2\043\uffd2" +
    "\054\uffd2\056\uffd2\062\uffd2\063\uffd2\064\uffd2\001\002\000" +
    "\024\002\uffd1\004\uffd1\005\uffd1\043\uffd1\054\uffd1\056\uffd1" +
    "\062\uffd1\063\uffd1\064\uffd1\001\002\000\066\003\uffef\004" +
    "\uffef\005\uffef\015\uffef\016\uffef\021\uffef\022\uffef\041\uffef" +
    "\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef\051" +
    "\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef" +
    "\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef\001\002\000" +
    "\024\002\uffd6\004\uffd6\005\uffd6\043\uffd6\054\uffd6\056\uffd6" +
    "\062\uffd6\063\uffd6\064\uffd6\001\002\000\004\034\030\001" +
    "\002\000\004\002\ufffe\001\002\000\020\007\036\011\034" +
    "\012\027\013\042\014\040\032\035\033\031\001\002\000" +
    "\006\004\012\062\011\001\002\000\114\003\uffe6\004\uffe6" +
    "\005\uffe6\007\uff80\011\uff80\012\uff80\013\uff80\014\uff80\015" +
    "\uffe6\016\uffe6\021\uffe6\022\uffe6\023\uffe6\025\uffe6\031\uffe6" +
    "\032\uff80\033\uff80\034\uff80\041\uffe6\042\uffe6\043\uffe6\044" +
    "\uffe6\045\uffe6\046\uffe6\047\uffe6\051\uffe6\052\uffe6\053\uffe6" +
    "\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062" +
    "\uffe6\063\uffe6\064\uffe6\001\002\000\012\004\012\025\u010a" +
    "\031\u010b\062\011\001\002\000\074\003\uffe5\004\uffe5\005" +
    "\uffe5\015\uffe5\016\uffe5\021\uffe5\022\uffe5\023\uffe5\025\uffe5" +
    "\031\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046" +
    "\uffe5\047\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5" +
    "\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064" +
    "\uffe5\001\002\000\006\004\012\062\011\001\002\000\032" +
    "\004\012\006\121\010\117\011\133\012\126\013\132\015" +
    "\106\016\064\024\120\034\125\037\130\062\011\001\002" +
    "\000\104\003\uffea\004\uffea\005\uffea\015\uffea\016\uffea\017" +
    "\140\020\134\021\uffea\022\uffea\023\uffea\024\135\026\142" +
    "\027\137\036\136\041\uffea\042\uffea\043\uffea\044\uffea\045" +
    "\uffea\046\uffea\047\uffea\051\uffea\052\uffea\053\uffea\054\uffea" +
    "\055\uffea\056\uffea\057\uffea\060\uffea\061\uffea\062\uffea\063" +
    "\uffea\064\uffea\001\002\000\074\003\uffe7\004\uffe7\005\uffe7" +
    "\015\uffe7\016\uffe7\021\uffe7\022\uffe7\023\uffe7\025\uffe7\031" +
    "\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7" +
    "\047\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056" +
    "\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7" +
    "\001\002\000\004\031\u010f\001\002\000\004\021\254\001" +
    "\002\000\070\003\uffe8\004\uffe8\005\uffe8\015\uffe8\016\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\041\uffe8\042\uffe8\043\uffe8\044" +
    "\uffe8\045\uffe8\046\uffe8\047\uffe8\051\uffe8\052\uffe8\053\uffe8" +
    "\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062" +
    "\uffe8\063\uffe8\064\uffe8\001\002\000\024\002\000\004\012" +
    "\005\023\043\007\054\021\056\025\062\011\063\006\064" +
    "\004\001\002\000\016\005\023\043\007\054\021\056\274" +
    "\063\006\064\004\001\002\000\072\003\uffeb\004\012\005" +
    "\uffeb\015\uffeb\016\uffeb\021\uffeb\022\uffeb\023\uffeb\025\u010a" +
    "\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047" +
    "\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb" +
    "\057\uffeb\060\uffeb\061\uffeb\062\011\063\uffeb\064\uffeb\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0112\000\024\002\004\003\012\004\007\005\025\007" +
    "\013\010\015\011\023\017\021\020\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\u0106\042\u0112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\012\004" +
    "\007\005\025\010\241\011\023\017\u0110\020\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\012\004" +
    "\u0105\005\u0104\001\001\000\006\004\274\031\u0103\001\001" +
    "\000\002\001\001\000\012\003\012\004\362\005\u0102\020" +
    "\u0101\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\374\001\001\000\012\012\032\021\031\053\040\054" +
    "\036\001\001\000\002\001\001\000\014\003\012\004\362" +
    "\005\365\013\361\024\363\001\001\000\002\001\001\000" +
    "\004\047\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\003\066\004\007\005\074\007\064\010\015\011\023\014" +
    "\055\015\065\022\070\025\056\032\053\033\102\043\076" +
    "\044\075\045\072\047\054\051\101\052\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\243\014\055\015" +
    "\065\022\242\032\053\033\102\043\076\044\075\045\072" +
    "\047\054\051\101\052\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\003\066\004\007\005\074\010\241\011" +
    "\023\014\055\015\065\022\070\025\313\032\053\033\102" +
    "\043\076\044\075\045\072\047\054\051\101\052\057\001" +
    "\001\000\004\003\312\001\001\000\010\006\250\015\144" +
    "\023\145\001\001\000\004\041\300\001\001\000\002\001" +
    "\001\000\014\003\142\013\123\014\115\015\065\026\275" +
    "\001\001\000\002\001\001\000\006\004\274\031\246\001" +
    "\001\000\010\012\032\053\040\054\036\001\001\000\004" +
    "\047\271\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\171\001\001\000\002\001" +
    "\001\000\004\047\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\113\001\001\000\016\003\126\013" +
    "\123\014\115\015\065\026\130\037\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\142\013\123\014\115\015\065\026\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\142\013\123\014\115" +
    "\015\065\026\163\001\001\000\002\001\001\000\010\006" +
    "\157\015\144\023\145\001\001\000\014\003\142\013\123" +
    "\014\115\015\065\026\156\001\001\000\004\016\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\142\013\123\014\115\015" +
    "\065\026\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\142\013\123\014\115\015\065\026\143\001" +
    "\001\000\002\001\001\000\006\015\144\023\145\001\001" +
    "\000\004\016\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\142\013\123\014\115\015\065\026\150" +
    "\027\151\001\001\000\002\001\001\000\004\016\140\001" +
    "\001\000\002\001\001\000\014\003\142\013\123\014\115" +
    "\015\065\026\154\001\001\000\002\001\001\000\004\016" +
    "\140\001\001\000\004\016\140\001\001\000\004\016\140" +
    "\001\001\000\014\003\142\013\123\014\115\015\065\026" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\140\001\001\000\004\016\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\140" +
    "\001\001\000\016\003\126\013\123\014\115\015\065\026" +
    "\130\037\173\001\001\000\004\047\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\142\013\123" +
    "\014\115\015\065\026\266\001\001\000\004\034\210\001" +
    "\001\000\006\035\216\036\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\226\001\001\000\004\036\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\142\013\123\014\115\015\065\026\223" +
    "\001\001\000\004\016\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\003\066\004\007\005\074" +
    "\007\237\010\015\011\023\014\055\015\065\022\070\025" +
    "\236\032\053\033\102\043\076\044\075\045\072\047\054" +
    "\051\101\052\057\001\001\000\032\003\243\014\055\015" +
    "\065\022\242\032\053\033\102\043\076\044\075\045\072" +
    "\047\054\051\101\052\057\001\001\000\044\003\066\004" +
    "\007\005\074\010\241\011\023\014\055\015\065\022\070" +
    "\025\240\032\053\033\102\043\076\044\075\045\072\047" +
    "\054\051\101\052\057\001\001\000\032\003\243\014\055" +
    "\015\065\022\242\032\053\033\102\043\076\044\075\045" +
    "\072\047\054\051\101\052\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\250\015\144\023\145\001" +
    "\001\000\004\031\246\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\142\013\123\014" +
    "\115\015\065\026\260\001\001\000\004\030\252\001\001" +
    "\000\002\001\001\000\016\003\142\013\123\014\115\015" +
    "\065\026\150\027\255\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\142\013\123\014\115\015\065\026\264\001\001\000" +
    "\004\016\140\001\001\000\002\001\001\000\004\016\140" +
    "\001\001\000\004\034\270\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\140\001\001\000\002\001\001\000" +
    "\016\003\126\013\123\014\115\015\065\026\130\037\306" +
    "\001\001\000\004\047\301\001\001\000\004\046\302\001" +
    "\001\000\002\001\001\000\006\045\305\047\304\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\310\001\001\000\004\046\311\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\243\014\055\015" +
    "\065\022\242\032\053\033\102\043\076\044\075\045\072" +
    "\047\054\051\101\052\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\142\013\123\014\115\015\065" +
    "\026\317\001\001\000\004\016\140\001\001\000\002\001" +
    "\001\000\010\003\323\004\325\050\324\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\332\013\123\014" +
    "\115\015\065\026\333\001\001\000\004\003\326\001\001" +
    "\000\002\001\001\000\014\003\142\013\123\014\115\015" +
    "\065\026\330\001\001\000\004\016\140\001\001\000\002" +
    "\001\001\000\010\006\344\015\144\023\145\001\001\000" +
    "\004\016\140\001\001\000\014\003\142\013\123\014\115" +
    "\015\065\026\336\001\001\000\002\001\001\000\004\016" +
    "\140\001\001\000\002\001\001\000\014\003\142\013\123" +
    "\014\115\015\065\026\342\001\001\000\002\001\001\000" +
    "\004\016\140\001\001\000\002\001\001\000\014\003\142" +
    "\013\123\014\115\015\065\026\345\001\001\000\004\016" +
    "\140\001\001\000\014\003\142\013\123\014\115\015\065" +
    "\026\350\001\001\000\002\001\001\000\004\016\140\001" +
    "\001\000\002\001\001\000\014\003\142\013\123\014\115" +
    "\015\065\026\354\001\001\000\002\001\001\000\004\016" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\372\001\001\000\002\001\001\000\010\003\012\004\362" +
    "\005\366\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\012\004\362\005\371\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\375\001\001\000\004\047\376\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\031\001\001\000\002\001\001\000\010" +
    "\012\u010d\053\040\054\036\001\001\000\006\003\u0106\042" +
    "\u0107\001\001\000\002\001\001\000\004\003\u0108\001\001" +
    "\000\002\001\001\000\004\003\u010c\001\001\000\014\003" +
    "\142\013\123\014\115\015\065\026\u010b\001\001\000\004" +
    "\016\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\u010f\001\001\000\002\001\001\000\012\003\012" +
    "\004\362\005\u0102\020\u0101\001\001\000\004\004\274\001" +
    "\001\000\004\003\u0108\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

        if (currentSymbol != null) this.previousSymbol = currentSymbol;
        this.currentSymbol = this.getScanner().next_token();
        return currentSymbol;

    }



    private Symbol currentSymbol;
    private Symbol previousSymbol;
    private Boolean generateASMFlag;
    private ArrayList<String> listaErroresSemanticos = new ArrayList<String>();
    private PilaSemantica pila = new PilaSemantica();
    public HashMap<String, RegistroSemantico> tablaSimbolos = new HashMap<String, RegistroSemantico>();
    public AssemblerGenerator assemblerGenerator = new AssemblerGenerator();

    public Symbol currentSymbol(){
        return this.currentSymbol;
    }

     public void syntax_error(Symbol s){
        syntaxerrors.add(new SyntaxError(ErrorTypes.UNEXPECTED_ERROR, s.right + 1, s.left + 1));
        //System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.right+1)+" columna "+(s.left+1) );
    }
    public void addError(String error){
            this.listaErroresSemanticos.add(error+" Linea "+(previousSymbol.right+1)+" columna "+(previousSymbol.left+1));
    }

    public ArrayList<String> getErroresSemanticos() {
        return this.listaErroresSemanticos;
    }

    public void unrecovered_syntax_error(Symbol s){
        //System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.right+1)+" columna "+(s.left+1) );
    }

    private ArrayList<SyntaxError> syntaxerrors = new ArrayList<SyntaxError>();

    @Override
    public String toString() {
        String result = "";

        if (!syntaxerrors.isEmpty()) {
            result += "====== Syntax Errors ======\n";

            for (int i = 0; i < syntaxerrors.size(); i++) {
                SyntaxError error = syntaxerrors.get(i);
                if (!(error.getLine() == 0)) result += error.toString();
            }
        }
        return result;
    }

    public void newSyntaxError(ErrorTypes pType) {
        syntaxerrors.add(new SyntaxError(pType, previousSymbol.right + 1, previousSymbol.left + previousSymbol.toString().length()));
    }

    public PilaSemantica getPila() {
        return this.pila;
    }

    public HashMap<String, RegistroSemantico> getTabla() {
        return this.tablaSimbolos;
    }
    public AssemblerGenerator getAssemblerGenerator(){
        return this.assemblerGenerator;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initial ::= var_declarations func_declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // initial ::= func_declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // initial ::= error error_terminal_tokens 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // for_loop ::= for_expression brackets 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_loop",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // for_loop ::= for_expression OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_loop",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // for_expression ::= FOR OPERATOR_PARENTHESIS_L for_variable expression OPERATOR_END_LINE expression OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_expression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // for_expression ::= FOR OPERATOR_PARENTHESIS_L for_variable valid_name assignments expression OPERATOR_END_LINE expression OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_expression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // for_expression ::= FOR OPERATOR_PARENTHESIS_L for_variable OPERATOR_END_LINE expression OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_expression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // for_expression ::= FOR OPERATOR_PARENTHESIS_L for_variable expression OPERATOR_END_LINE OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_expression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // for_expression ::= FOR OPERATOR_PARENTHESIS_L for_variable valid_name assignments expression OPERATOR_END_LINE OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_expression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // for_expression ::= FOR OPERATOR_PARENTHESIS_L for_variable OPERATOR_END_LINE OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_expression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // for_variable ::= data_type valid_name OPERATOR_ASSIGNMENT_EQUALS expression OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_variable",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // for_variable ::= valid_name OPERATOR_ASSIGNMENT_EQUALS expression OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_variable",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // for_variable ::= valid_name OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_variable",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // for_variable ::= OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_variable",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_declarations ::= var_declarations var_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declarations",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_declarations ::= var_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declarations",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_declaration ::= var_expression OPERATOR_END_LINE 
            {
              Object RESULT =null;
		

        RegistroTipo registro = (RegistroTipo) this.parser.pila.buscarRegistro(Registros.TIPO);
        while(this.parser.pila.peek() != registro) {
            RegistroIdentificador registroActual = (RegistroIdentificador) this.parser.pila.pop();

            if (this.parser.tablaSimbolos.get(registroActual.getToken()) != null) {
                System.out.println("Variable ya ha sido declarada: " + registroActual.getToken());
            } else {
                this.parser.tablaSimbolos.put(registroActual.getToken(), new RegistroIdentificador(registro.getTipo(), registroActual.getToken()));
            }

        }
        this.parser.pila.pop();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // var_declaration ::= var_expression 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.MISSING_SEMICOLON); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_declaration ::= error data_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var_declaration ::= error VOID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var_expression ::= data_type var_identifiers 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // var_expression ::= CONST data_type var_identifiers OPERATOR_ASSIGNMENT_EQUALS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // var_expression ::= typed_identifier var_list_brackets 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // var_expression ::= CONST typed_identifier var_list_brackets OPERATOR_ASSIGNMENT_EQUALS list_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // var_identifiers ::= var_identifiers OPERATOR_SEPARATE valid_name 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_identifiers",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // var_identifiers ::= valid_name 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_identifiers",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // var_identifiers ::= var_identifiers valid_name 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.MISSING_SEPARATOR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_identifiers",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // var_list_brackets ::= OPERATOR_SQ_BRACKET_L LITERAL_DECIMAL OPERATOR_SQ_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list_brackets",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // var_list_brackets ::= OPERATOR_SQ_BRACKET_L OPERATOR_SQ_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list_brackets",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var_list_brackets ::= OPERATOR_SQ_BRACKET_L var_list_types OPERATOR_SQ_BRACKET_R 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.INVALID_DATA_TYPE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list_brackets",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // var_list_brackets ::= var_list_errors 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.MISSING_SQUARE_BRACKETS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list_brackets",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // var_list_errors ::= OPERATOR_SQ_BRACKET_L LITERAL_DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list_errors",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // var_list_errors ::= OPERATOR_SQ_BRACKET_L 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list_errors",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // var_list_errors ::= OPERATOR_SQ_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list_errors",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var_list_errors ::= LITERAL_DECIMAL OPERATOR_SQ_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list_errors",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var_list_errors ::= OPERATOR_SQ_BRACKET_L var_list_types 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.INVALID_DATA_TYPE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list_errors",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // var_list_errors ::= var_list_types OPERATOR_SQ_BRACKET_L 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.INVALID_DATA_TYPE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list_errors",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // var_list_types ::= LITERAL_FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list_types",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var_list_types ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list_types",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // var_list_types ::= LITERAL_CHARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list_types",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // var_list_types ::= LITERAL_EXPONENTIAL_FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list_types",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // func_declarations ::= func_declarations func_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_declarations",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // func_declarations ::= func_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_declarations",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // func_declaration ::= typed_identifier func_decl_parentheses brackets 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_declaration",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // func_declaration ::= typed_identifier func_decl_parentheses OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_declaration",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // func_declaration ::= VOID valid_name func_decl_parentheses brackets 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_declaration",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // func_declaration ::= VOID valid_name func_decl_parentheses OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_declaration",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // brackets ::= OPERATOR_BRACKET_L var_declarations statements OPERATOR_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brackets",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // brackets ::= OPERATOR_BRACKET_L statements OPERATOR_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brackets",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // brackets ::= OPERATOR_BRACKET_L OPERATOR_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brackets",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // brackets ::= OPERATOR_BRACKET_L var_declarations OPERATOR_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brackets",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement ::= valid_statement OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statement ::= while_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement ::= for_loop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statement ::= switch 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement ::= if_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement ::= valid_name assignments expression OPERATOR_END_LINE 
            {
              Object RESULT =null;
		
        RegistroSemantico tempObject = (RegistroSemantico) this.parser.pila.pop();
        RegistroOperador rs_op = (RegistroOperador) this.parser.pila.pop();
        DataObject rs_do2;

        if (tempObject instanceof RegistroIdentificador) {
            RegistroSemantico registroTemporal = this.parser.getTabla().get(tempObject.getToken());
            if (registroTemporal != null) {
                rs_do2 = new DataObject(((RegistroIdentificador) registroTemporal).getTipo(),
                                        tempObject.getToken(),
                                        Integer.toHexString(System.identityHashCode(tempObject)),
                                        true);
            } else {
                rs_do2 = new DataObject(DataTypes.ERROR,
                                        tempObject.getToken(),
                                        Integer.toHexString(System.identityHashCode(tempObject)),
                                        true);
                addError("Variable no definida");
            }
        } else { // Es constante
            rs_do2 = (DataObject) tempObject;
        }

        if (rs_op.getToken().equals("=")) {
            RegistroIdentificador temporal = (RegistroIdentificador) this.parser.getTabla().get(
                            ((RegistroIdentificador) this.parser.pila.pop()).getToken());

            if (temporal != null) {

                DataObject nombreVar = new DataObject(temporal.getTipo(),
                                        temporal.getToken(),
                                        Integer.toHexString(System.identityHashCode(temporal)),
                                        true);


                if (this.parser.getTabla().get(nombreVar.getNombre()) != null) {

                    if (rs_do2.getTipo() == nombreVar.getTipo()) {
                        if (rs_do2.getVariable()) {
                            //TODO - ESCRIBIR EN ASM

                            this.parser.assemblerGenerator.writeAssemblerCode("mov ax, [" + rs_do2.getNombre() + "]");
                            this.parser.assemblerGenerator.writeAssemblerCode("mov [" + nombreVar.getNombre() + "], ax");
                        } else {
                            //TODO - ESCRIBIR EN ASM
                            this.parser.assemblerGenerator.writeAssemblerCode("mov ax, " + rs_do2.getValor());
                            this.parser.assemblerGenerator.writeAssemblerCode("mov [" + nombreVar.getNombre() + "], ax");
                        }

                    } else {
                        addError("Variables de diferente tipo");
                    }
                } else {
                    addError("Variable no declarada");
                }
            } else {
                addError("Variable no declarada");
            }

        } else {
            // Esto es eval binary

            DataObject rs_do1;

            tempObject = (RegistroSemantico) this.parser.pila.pop();

            if (tempObject instanceof RegistroIdentificador) {
                RegistroSemantico registroTemporal = this.parser.getTabla().get(tempObject.getToken());
                if (registroTemporal != null) {
                    rs_do1 = new DataObject(((RegistroIdentificador) registroTemporal).getTipo(),
                                            tempObject.getToken(),
                                            Integer.toHexString(System.identityHashCode(tempObject)),
                                            true);
                } else {
                    rs_do1 = new DataObject(DataTypes.ERROR,
                                            tempObject.getToken(),
                                            Integer.toHexString(System.identityHashCode(tempObject)),
                                            true);
                    addError("Variable no definida");
                }
            } else { // Es constante
                rs_do1 = (DataObject) tempObject;
            }

            this.parser.pila.pop(); // TODO guardar el operador

            RegistroIdentificador temporal = (RegistroIdentificador) this.parser.getTabla().get(
                                        ((RegistroIdentificador) this.parser.pila.pop()).getToken());

            if (temporal != null) {

                DataObject nombreVar = new DataObject(temporal.getTipo(),
                                        temporal.getToken(),
                                        Integer.toHexString(System.identityHashCode(temporal)),
                                        true);


                if (this.parser.getTabla().get(nombreVar.getNombre()) != null) {

                    if (rs_do2.getTipo() == nombreVar.getTipo() && rs_do1.getTipo() == nombreVar.getTipo()) {

                        // TODO copiar el codigo de kenneth
                        if (rs_do2.getTipo() == DataTypes.INT || rs_do2.getTipo() == DataTypes.LONG) {
                            // Constant folding
                            long valor2 = Long.parseLong(rs_do2.getValor());
                            long valor1 = Long.parseLong(rs_do1.getValor());
                            long nuevoValor = 0;
                            switch (rs_op.getToken()) {
                                case "+" :
                                    nuevoValor = valor1 + valor2;
                                    break;
                                case "-" :
                                    nuevoValor = valor1 - valor2;
                                    break;
                            }
                            System.out.println("Constant folding: " + nuevoValor);
                        }
                    } else {
                        addError("Variables de diferente tipo");
                    }
                } else {
                    addError("Variable no declarada");
                }
            } else {
                addError("Variable no declarada");
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement ::= valid_name OPERATOR_ASSIGNMENT_EQUALS list_expression OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statement ::= brackets 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statement ::= loop_words OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statement ::= RETURN expression OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statement ::= read_write OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statement ::= valid_statement 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.MISSING_SEMICOLON); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statement ::= valid_name assignments expression 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.MISSING_SEMICOLON); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // statement ::= loop_words 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.MISSING_SEMICOLON); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // statement ::= RETURN expression 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.MISSING_SEMICOLON); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // statement ::= read_write 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.MISSING_SEMICOLON); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // statement ::= error error_terminal_tokens 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // error_terminal_tokens ::= OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_terminal_tokens",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // error_terminal_tokens ::= OPERATOR_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_terminal_tokens",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // read_write ::= READ OPERATOR_PARENTHESIS_L OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_write",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // read_write ::= READ OPERATOR_PARENTHESIS_L valid_name OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_write",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // read_write ::= WRITE OPERATOR_PARENTHESIS_L expression OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_write",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valid_statement ::= valid_name func_call_parentheses 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valid_statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // valid_statement ::= valid_name inc_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valid_statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // valid_statement ::= inc_dec valid_name 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valid_statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // func_call_parentheses ::= OPERATOR_PARENTHESIS_L expressions OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call_parentheses",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // func_call_parentheses ::= OPERATOR_PARENTHESIS_L OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call_parentheses",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // func_decl_parentheses ::= OPERATOR_PARENTHESIS_L parameter OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_decl_parentheses",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // func_decl_parentheses ::= OPERATOR_PARENTHESIS_L OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_decl_parentheses",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // func_decl_parentheses ::= OPERATOR_PARENTHESIS_L parameter 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.MISSING_PARENTHESES); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_decl_parentheses",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // func_decl_parentheses ::= OPERATOR_PARENTHESIS_L 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.MISSING_PARENTHESES); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_decl_parentheses",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expressions ::= expressions OPERATOR_SEPARATE expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expressions ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parameter ::= parameter OPERATOR_SEPARATE typed_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parameter ::= typed_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parameter ::= CONST typed_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parameter ::= literals 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.FUNCTION_DECLARATION_ERROR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // list_expression ::= OPERATOR_BRACKET_L expressions OPERATOR_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // list_expression ::= OPERATOR_BRACKET_L OPERATOR_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // assignments ::= OPERATOR_ASSIGNMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignments",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // assignments ::= OPERATOR_ASSIGNMENT_EQUALS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroOperador registro = new RegistroOperador(e.toString()); this.parser.pila.push(registro); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignments",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // switch ::= SWITCH OPERATOR_PARENTHESIS_L expression OPERATOR_PARENTHESIS_R switch_inside 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // switch ::= SWITCH missing_expression switch_inside 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // switch_inside ::= OPERATOR_BRACKET_L case_expressions DEFAULT OPERATOR_COLON expression OPERATOR_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_inside",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // switch_inside ::= OPERATOR_BRACKET_L DEFAULT OPERATOR_COLON expression OPERATOR_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_inside",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // switch_inside ::= OPERATOR_BRACKET_L case_expressions OPERATOR_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_inside",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // switch_inside ::= OPERATOR_BRACKET_L OPERATOR_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_inside",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // missing_expression ::= OPERATOR_PARENTHESIS_L OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.MISSING_EXPRESSION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("missing_expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // case_expressions ::= case_expressions case_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_expressions",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // case_expressions ::= case_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_expressions",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // case_expressions ::= error OPERATOR_END_LINE 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.CASE_ERROR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_expressions",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // case_expression ::= CASE switch_data_type OPERATOR_COLON var_declarations statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // case_expression ::= CASE switch_data_type OPERATOR_COLON statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // case_expression ::= CASE switch_data_type OPERATOR_COLON var_declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // case_expression ::= CASE switch_data_type OPERATOR_COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // switch_data_type ::= LITERAL_DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_data_type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // switch_data_type ::= LITERAL_FLOAT 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.INVALID_DATA_TYPE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_data_type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // switch_data_type ::= LITERAL_HEXA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_data_type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // switch_data_type ::= LITERAL_OCTAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_data_type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // switch_data_type ::= LITERAL_EXPONENTIAL_FLOAT 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.INVALID_DATA_TYPE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_data_type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // switch_data_type ::= LITERAL_CHARACTER 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.INVALID_DATA_TYPE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_data_type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // switch_data_type ::= LITERAL_STRING 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.INVALID_DATA_TYPE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_data_type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // while_expression ::= DO brackets WHILE OPERATOR_PARENTHESIS_L assignment_expression OPERATOR_PARENTHESIS_R OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_expression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // while_expression ::= WHILE OPERATOR_PARENTHESIS_L assignment_expression OPERATOR_PARENTHESIS_R OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_expression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // while_expression ::= WHILE OPERATOR_PARENTHESIS_L assignment_expression OPERATOR_PARENTHESIS_R brackets 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_expression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // while_expression ::= WHILE missing_expression brackets 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_expression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // while_expression ::= DO brackets WHILE missing_expression OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_expression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // data_type ::= LONG 
            {
              Object RESULT =null;
		 RegistroTipo registro = new RegistroTipo(DataTypes.LONG); this.parser.pila.push(registro); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // data_type ::= INT 
            {
              Object RESULT =null;
		 RegistroTipo registro = new RegistroTipo(DataTypes.INT); this.parser.pila.push(registro); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // data_type ::= SHORT 
            {
              Object RESULT =null;
		 RegistroTipo registro = new RegistroTipo(DataTypes.SHORT); this.parser.pila.push(registro); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // data_type ::= CHAR 
            {
              Object RESULT =null;
		 RegistroTipo registro = new RegistroTipo(DataTypes.CHAR); this.parser.pila.push(registro); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // data_type ::= RESERVED_DATA_TYPE 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.NOT_SUPPORTED_DATA_TYPE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // valid_name ::= IDENTIFIER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RegistroIdentificador registro = new RegistroIdentificador(DataTypes.UNDETERMINED, e.toString());
        this.parser.pila.push(registro);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valid_name",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // valid_name ::= IDENTIFIER_ERROR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valid_name",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // typed_identifier ::= data_type valid_name 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typed_identifier",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // typed_identifier ::= valid_name 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.MISSING_DATA_TYPE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typed_identifier",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // if_expression ::= IF OPERATOR_PARENTHESIS_L assignment_expression OPERATOR_PARENTHESIS_R brackets else_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_expression",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // if_expression ::= IF OPERATOR_PARENTHESIS_L assignment_expression OPERATOR_PARENTHESIS_R brackets 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_expression",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // if_expression ::= IF missing_expression brackets else_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_expression",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // if_expression ::= IF missing_expression brackets 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_expression",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // if_expression ::= IF 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.INCOMPLETE_EXPRESSION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_expression",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // else_expression ::= ELSE if_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_expression",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // else_expression ::= ELSE brackets 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_expression",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // assignment_expression ::= valid_name assignments expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // assignment_expression ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expression ::= OPERATOR_NOT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expression ::= expression OPERATOR_COMPARATIVE expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expression ::= OPERATOR_NEGATIVE expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expression ::= expression math expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expression ::= OPERATOR_PARENTHESIS_L expression OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expression ::= literals 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expression ::= valid_name 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expression ::= valid_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // inc_dec ::= OPERATOR_INC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inc_dec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // inc_dec ::= OPERATOR_DEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inc_dec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // math ::= OPERATOR_ADD 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroOperador registro = new RegistroOperador(e.toString()); this.parser.pila.push(registro); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("math",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // math ::= OPERATOR_NEGATIVE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroOperador registro = new RegistroOperador(e.toString()); this.parser.pila.push(registro); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("math",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // math ::= OPERATOR_MULTIPLY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroOperador registro = new RegistroOperador(e.toString()); this.parser.pila.push(registro); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("math",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // math ::= OPERATOR_DIVIDE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroOperador registro = new RegistroOperador(e.toString()); this.parser.pila.push(registro); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("math",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // math ::= OPERATOR_REMAINDER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RegistroOperador registro = new RegistroOperador(e.toString()); this.parser.pila.push(registro); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("math",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // literals ::= LITERAL_HEXA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 DataObject registro = new DataObject(DataTypes.INT, "", e.toString()); this.parser.pila.push(registro); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // literals ::= LITERAL_OCTAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 DataObject registro = new DataObject(DataTypes.INT, "", e.toString()); this.parser.pila.push(registro); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // literals ::= LITERAL_STRING 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 DataObject registro = new DataObject(DataTypes.STRING, "", e.toString()); this.parser.pila.push(registro); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // literals ::= LITERAL_CHARACTER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 DataObject registro = new DataObject(DataTypes.CHAR, "", e.toString()); this.parser.pila.push(registro); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // literals ::= LITERAL_DECIMAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 DataObject registro = new DataObject(DataTypes.INT, "", e.toString()); this.parser.pila.push(registro); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // loop_words ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_words",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // loop_words ::= CONTINUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_words",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
