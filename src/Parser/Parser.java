
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Parser;

import java.util.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import Parser.Error.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\221\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\053\004\000\002\053\004\000\002\044\011" +
    "\000\002\044\013\000\002\044\010\000\002\044\010\000" +
    "\002\044\012\000\002\044\007\000\002\050\007\000\002" +
    "\050\006\000\002\050\004\000\002\050\003\000\002\007" +
    "\004\000\002\007\003\000\002\010\004\000\002\010\003" +
    "\000\002\011\003\000\002\011\004\000\002\011\004\000" +
    "\002\011\005\000\002\012\005\000\002\012\004\000\002" +
    "\012\005\000\002\012\003\000\002\055\004\000\002\055" +
    "\003\000\002\055\003\000\002\055\004\000\002\055\004" +
    "\000\002\055\004\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\017\004\000\002" +
    "\017\003\000\002\020\005\000\002\020\005\000\002\020" +
    "\006\000\002\020\006\000\002\047\006\000\002\047\005" +
    "\000\002\047\004\000\002\047\005\000\002\025\004\000" +
    "\002\025\003\000\002\022\004\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\006\000\002\022\006\000\002\022\003\000\002\022\004" +
    "\000\002\022\004\000\002\022\003\000\002\022\005\000" +
    "\002\033\005\000\002\033\006\000\002\033\006\000\002" +
    "\014\004\000\002\014\004\000\002\023\005\000\002\023" +
    "\004\000\002\021\005\000\002\021\004\000\002\021\003" +
    "\000\002\021\003\000\002\027\005\000\002\027\003\000" +
    "\002\024\005\000\002\024\003\000\002\024\004\000\002" +
    "\030\005\000\002\030\004\000\002\006\003\000\002\006" +
    "\003\000\002\032\014\000\002\032\013\000\002\032\011" +
    "\000\002\032\010\000\002\032\004\000\002\034\004\000" +
    "\002\034\003\000\002\034\004\000\002\034\013\000\002" +
    "\034\012\000\002\035\004\000\002\035\003\000\002\036" +
    "\010\000\002\036\007\000\002\036\006\000\002\036\005" +
    "\000\002\036\003\000\002\041\004\000\002\041\004\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\043\007\000\002\043\005\000\002\043\004\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\003\003\000\002\003\003\000\002\005\004\000" +
    "\002\005\003\000\002\045\010\000\002\045\007\000\002" +
    "\045\004\000\002\046\004\000\002\046\004\000\002\040" +
    "\005\000\002\040\003\000\002\026\004\000\002\026\005" +
    "\000\002\026\004\000\002\026\005\000\002\026\005\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\015\003\000\002\015\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\052\003\000\002" +
    "\052\003\000\002\054\004\000\002\054\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\363\000\022\010\014\071\023\072\024\102\022\104" +
    "\011\110\016\111\004\112\005\001\002\000\006\010\uff96" +
    "\110\uff96\001\002\000\006\010\uff97\110\uff97\001\002\000" +
    "\022\002\uffdb\010\uffdb\071\uffdb\102\uffdb\104\uffdb\110\uffdb" +
    "\111\uffdb\112\uffdb\001\002\000\022\002\uffff\010\014\071" +
    "\023\102\022\104\011\110\016\111\004\112\005\001\002" +
    "\000\074\010\uff90\021\uff90\023\uff90\024\uff90\025\uff90\026" +
    "\uff90\037\uff90\040\uff90\042\uff90\044\uff90\054\uff90\055\uff90" +
    "\056\uff90\057\uff90\067\uff90\071\uff90\072\uff90\073\uff90\077" +
    "\uff90\100\uff90\102\uff90\103\uff90\104\uff90\105\uff90\106\uff90" +
    "\107\uff90\110\uff90\111\uff90\112\uff90\001\002\000\006\010" +
    "\014\110\016\001\002\000\004\002\361\001\002\000\050" +
    "\010\uffef\037\uffef\040\uffef\042\360\067\uffef\071\uffef\072" +
    "\uffef\073\uffef\077\uffef\100\uffef\102\uffef\103\uffef\104\uffef" +
    "\105\uffef\106\uffef\107\uffef\110\uffef\111\uffef\112\uffef\001" +
    "\002\000\124\010\uff92\021\uff92\023\uff92\024\uff92\025\uff92" +
    "\026\uff92\027\uff92\030\uff92\031\uff92\035\uff92\037\uff92\040" +
    "\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92" +
    "\050\uff92\054\uff92\055\uff92\056\uff92\057\uff92\064\uff92\067" +
    "\uff92\070\uff92\071\uff92\072\uff92\073\uff92\074\uff92\077\uff92" +
    "\100\uff92\102\uff92\103\uff92\104\uff92\105\uff92\106\uff92\107" +
    "\uff92\110\uff92\111\uff92\112\uff92\001\002\000\046\010\uffee" +
    "\021\033\023\030\024\026\025\037\026\036\042\uffee\054" +
    "\032\055\027\056\054\057\055\071\uffee\072\uffee\102\uffee" +
    "\104\uffee\110\uffee\111\uffee\112\uffee\001\002\000\124\010" +
    "\uff93\021\uff93\023\uff93\024\uff93\025\uff93\026\uff93\027\uff93" +
    "\030\uff93\031\uff93\035\uff93\037\uff93\040\uff93\042\uff93\043" +
    "\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93\054\uff93" +
    "\055\uff93\056\uff93\057\uff93\064\uff93\067\uff93\070\uff93\071" +
    "\uff93\072\uff93\073\uff93\074\uff93\077\uff93\100\uff93\102\uff93" +
    "\103\uff93\104\uff93\105\uff93\106\uff93\107\uff93\110\uff93\111" +
    "\uff93\112\uff93\001\002\000\046\010\ufff1\037\ufff1\040\ufff1" +
    "\067\ufff1\071\ufff1\072\ufff1\073\ufff1\077\ufff1\100\ufff1\102" +
    "\ufff1\103\ufff1\104\ufff1\105\ufff1\106\ufff1\107\ufff1\110\ufff1" +
    "\111\ufff1\112\ufff1\001\002\000\006\010\014\110\016\001" +
    "\002\000\022\010\014\071\023\072\024\102\022\104\011" +
    "\110\016\111\004\112\005\001\002\000\006\010\uff95\110" +
    "\uff95\001\002\000\006\010\uff94\110\uff94\001\002\000\016" +
    "\010\014\071\023\102\022\110\016\111\004\112\005\001" +
    "\002\000\066\010\uffed\021\033\023\030\024\026\025\037" +
    "\026\036\037\uffed\040\uffed\042\uffed\054\032\055\027\067" +
    "\uffed\071\uffed\072\uffed\073\uffed\077\uffed\100\uffed\102\uffed" +
    "\103\uffed\104\uffed\105\uffed\106\uffed\107\uffed\110\uffed\111" +
    "\uffed\112\uffed\001\002\000\004\055\046\001\002\000\050" +
    "\010\uffe4\037\uffe4\040\uffe4\042\uffe4\067\uffe4\071\uffe4\072" +
    "\uffe4\073\uffe4\077\uffe4\100\uffe4\102\uffe4\103\uffe4\104\uffe4" +
    "\105\uffe4\106\uffe4\107\uffe4\110\uffe4\111\uffe4\112\uffe4\001" +
    "\002\000\054\010\uffdf\037\uffdf\040\uffdf\042\uffdf\054\uffdf" +
    "\055\uffdf\067\uffdf\071\uffdf\072\uffdf\073\uffdf\077\uffdf\100" +
    "\uffdf\102\uffdf\103\uffdf\104\uffdf\105\uffdf\106\uffdf\107\uffdf" +
    "\110\uffdf\111\uffdf\112\uffdf\001\002\000\050\010\uffeb\037" +
    "\uffeb\040\uffeb\042\uffeb\067\uffeb\071\uffeb\072\uffeb\073\uffeb" +
    "\077\uffeb\100\uffeb\102\uffeb\103\uffeb\104\uffeb\105\uffeb\106" +
    "\uffeb\107\uffeb\110\uffeb\111\uffeb\112\uffeb\001\002\000\064" +
    "\010\uffe5\021\033\023\030\024\042\025\037\026\036\037" +
    "\uffe5\040\uffe5\042\uffe5\055\041\067\uffe5\071\uffe5\072\uffe5" +
    "\073\uffe5\077\uffe5\100\uffe5\102\uffe5\103\uffe5\104\uffe5\105" +
    "\uffe5\106\uffe5\107\uffe5\110\uffe5\111\uffe5\112\uffe5\001\002" +
    "\000\054\010\uffe0\037\uffe0\040\uffe0\042\uffe0\054\uffe0\055" +
    "\uffe0\067\uffe0\071\uffe0\072\uffe0\073\uffe0\077\uffe0\100\uffe0" +
    "\102\uffe0\103\uffe0\104\uffe0\105\uffe0\106\uffe0\107\uffe0\110" +
    "\uffe0\111\uffe0\112\uffe0\001\002\000\004\054\040\001\002" +
    "\000\050\010\uffe7\037\uffe7\040\uffe7\042\uffe7\067\uffe7\071" +
    "\uffe7\072\uffe7\073\uffe7\077\uffe7\100\uffe7\102\uffe7\103\uffe7" +
    "\104\uffe7\105\uffe7\106\uffe7\107\uffe7\110\uffe7\111\uffe7\112" +
    "\uffe7\001\002\000\054\010\uffdd\037\uffdd\040\uffdd\042\uffdd" +
    "\054\uffdd\055\uffdd\067\uffdd\071\uffdd\072\uffdd\073\uffdd\077" +
    "\uffdd\100\uffdd\102\uffdd\103\uffdd\104\uffdd\105\uffdd\106\uffdd" +
    "\107\uffdd\110\uffdd\111\uffdd\112\uffdd\001\002\000\054\010" +
    "\uffde\037\uffde\040\uffde\042\uffde\054\uffde\055\uffde\067\uffde" +
    "\071\uffde\072\uffde\073\uffde\077\uffde\100\uffde\102\uffde\103" +
    "\uffde\104\uffde\105\uffde\106\uffde\107\uffde\110\uffde\111\uffde" +
    "\112\uffde\001\002\000\050\010\uffe1\037\uffe1\040\uffe1\042" +
    "\uffe1\067\uffe1\071\uffe1\072\uffe1\073\uffe1\077\uffe1\100\uffe1" +
    "\102\uffe1\103\uffe1\104\uffe1\105\uffe1\106\uffe1\107\uffe1\110" +
    "\uffe1\111\uffe1\112\uffe1\001\002\000\050\010\uffe9\037\uffe9" +
    "\040\uffe9\042\uffe9\067\uffe9\071\uffe9\072\uffe9\073\uffe9\077" +
    "\uffe9\100\uffe9\102\uffe9\103\uffe9\104\uffe9\105\uffe9\106\uffe9" +
    "\107\uffe9\110\uffe9\111\uffe9\112\uffe9\001\002\000\052\010" +
    "\uffe6\037\uffe6\040\uffe6\042\uffe6\055\045\067\uffe6\071\uffe6" +
    "\072\uffe6\073\uffe6\077\uffe6\100\uffe6\102\uffe6\103\uffe6\104" +
    "\uffe6\105\uffe6\106\uffe6\107\uffe6\110\uffe6\111\uffe6\112\uffe6" +
    "\001\002\000\052\010\uffe2\037\uffe2\040\uffe2\042\uffe2\055" +
    "\044\067\uffe2\071\uffe2\072\uffe2\073\uffe2\077\uffe2\100\uffe2" +
    "\102\uffe2\103\uffe2\104\uffe2\105\uffe2\106\uffe2\107\uffe2\110" +
    "\uffe2\111\uffe2\112\uffe2\001\002\000\050\010\uffe8\037\uffe8" +
    "\040\uffe8\042\uffe8\067\uffe8\071\uffe8\072\uffe8\073\uffe8\077" +
    "\uffe8\100\uffe8\102\uffe8\103\uffe8\104\uffe8\105\uffe8\106\uffe8" +
    "\107\uffe8\110\uffe8\111\uffe8\112\uffe8\001\002\000\050\010" +
    "\uffea\037\uffea\040\uffea\042\uffea\067\uffea\071\uffea\072\uffea" +
    "\073\uffea\077\uffea\100\uffea\102\uffea\103\uffea\104\uffea\105" +
    "\uffea\106\uffea\107\uffea\110\uffea\111\uffea\112\uffea\001\002" +
    "\000\050\010\uffe3\037\uffe3\040\uffe3\042\uffe3\067\uffe3\071" +
    "\uffe3\072\uffe3\073\uffe3\077\uffe3\100\uffe3\102\uffe3\103\uffe3" +
    "\104\uffe3\105\uffe3\106\uffe3\107\uffe3\110\uffe3\111\uffe3\112" +
    "\uffe3\001\002\000\022\002\000\010\014\071\023\102\022" +
    "\104\011\110\016\111\004\112\005\001\002\000\046\010" +
    "\ufff2\037\ufff2\040\ufff2\067\ufff2\071\ufff2\072\ufff2\073\ufff2" +
    "\077\ufff2\100\ufff2\102\ufff2\103\ufff2\104\ufff2\105\ufff2\106" +
    "\ufff2\107\ufff2\110\ufff2\111\ufff2\112\ufff2\001\002\000\022" +
    "\002\uffdc\010\uffdc\071\uffdc\102\uffdc\104\uffdc\110\uffdc\111" +
    "\uffdc\112\uffdc\001\002\000\006\056\054\057\055\001\002" +
    "\000\006\037\066\042\070\001\002\000\026\010\014\037" +
    "\uffbb\042\uffbb\057\060\071\023\072\061\102\022\110\016" +
    "\111\004\112\005\001\002\000\006\037\uffba\042\uffba\001" +
    "\002\000\006\044\uffb6\057\uffb6\001\002\000\006\044\063" +
    "\057\064\001\002\000\006\037\uffbc\042\uffbc\001\002\000" +
    "\016\010\014\071\023\102\022\110\016\111\004\112\005" +
    "\001\002\000\006\044\uffb5\057\uffb5\001\002\000\016\010" +
    "\014\071\023\102\022\110\016\111\004\112\005\001\002" +
    "\000\006\037\uffbd\042\uffbd\001\002\000\006\044\uffb7\057" +
    "\uffb7\001\002\000\044\010\014\037\066\040\111\067\110" +
    "\071\023\072\024\073\073\077\116\100\101\102\022\103" +
    "\077\105\076\106\072\107\103\110\016\111\004\112\005" +
    "\001\002\000\022\002\uffda\010\uffda\071\uffda\102\uffda\104" +
    "\uffda\110\uffda\111\uffda\112\uffda\001\002\000\022\002\uffd9" +
    "\010\uffd9\071\uffd9\102\uffd9\104\uffd9\110\uffd9\111\uffd9\112" +
    "\uffd9\001\002\000\034\010\uffc6\037\uffc6\040\uffc6\042\356" +
    "\067\uffc6\073\uffc6\077\uffc6\100\uffc6\103\uffc6\105\uffc6\106" +
    "\uffc6\107\uffc6\110\uffc6\001\002\000\004\056\352\001\002" +
    "\000\004\042\uff73\001\002\000\032\010\uffcc\037\uffcc\040" +
    "\uffcc\067\uffcc\073\uffcc\077\uffcc\100\uffcc\103\uffcc\105\uffcc" +
    "\106\uffcc\107\uffcc\110\uffcc\001\002\000\032\010\uffd1\037" +
    "\uffd1\040\uffd1\067\uffd1\073\uffd1\077\uffd1\100\uffd1\103\uffd1" +
    "\105\uffd1\106\uffd1\107\uffd1\110\uffd1\001\002\000\006\056" +
    "\344\057\252\001\002\000\006\056\271\103\270\001\002" +
    "\000\006\037\066\042\267\001\002\000\006\056\250\057" +
    "\252\001\002\000\032\010\uffc9\037\uffc9\040\uffc9\067\uffc9" +
    "\073\uffc9\077\uffc9\100\uffc9\103\uffc9\105\uffc9\106\uffc9\107" +
    "\uffc9\110\uffc9\001\002\000\004\056\245\001\002\000\076" +
    "\010\uff90\021\uff90\023\uff90\024\uff90\025\uff90\026\uff90\027" +
    "\163\030\164\037\uff90\040\uff90\042\uff90\047\205\050\227" +
    "\054\uff90\055\uff90\056\162\067\uff90\071\uff90\072\uff90\073" +
    "\uff90\077\uff90\100\uff90\102\uff90\103\uff90\105\uff90\106\uff90" +
    "\107\uff90\110\uff90\111\uff90\112\uff90\001\002\000\004\042" +
    "\244\001\002\000\044\010\014\037\066\040\241\067\110" +
    "\071\023\072\024\073\073\077\116\100\101\102\022\103" +
    "\077\105\076\106\072\107\103\110\016\111\004\112\005" +
    "\001\002\000\004\042\240\001\002\000\004\042\uff74\001" +
    "\002\000\050\002\uffd4\010\uffd4\037\uffd4\040\uffd4\067\uffd4" +
    "\071\uffd4\073\uffd4\076\uffd4\077\uffd4\100\uffd4\102\uffd4\103" +
    "\uffd4\104\uffd4\105\uffd4\106\uffd4\107\uffd4\110\uffd4\111\uffd4" +
    "\112\uffd4\001\002\000\032\010\uffcf\037\uffcf\040\uffcf\067" +
    "\uffcf\073\uffcf\077\uffcf\100\uffcf\103\uffcf\105\uffcf\106\uffcf" +
    "\107\uffcf\110\uffcf\001\002\000\032\010\uffce\037\uffce\040" +
    "\uffce\067\uffce\073\uffce\077\uffce\100\uffce\103\uffce\105\uffce" +
    "\106\uffce\107\uffce\110\uffce\001\002\000\032\010\uffcd\037" +
    "\uffcd\040\uffcd\067\uffcd\073\uffcd\077\uffcd\100\uffcd\103\uffcd" +
    "\105\uffcd\106\uffcd\107\uffcd\110\uffcd\001\002\000\032\010" +
    "\014\037\066\040\225\067\110\073\073\077\116\100\101" +
    "\103\077\105\076\106\072\107\103\110\016\001\002\000" +
    "\004\056\121\001\002\000\064\010\uffee\021\033\023\030" +
    "\024\026\025\037\026\036\037\uffee\040\uffee\042\uffee\054" +
    "\032\055\027\067\uffee\071\uffee\072\uffee\073\uffee\077\uffee" +
    "\100\uffee\102\uffee\103\uffee\105\uffee\106\uffee\107\uffee\110" +
    "\uffee\111\uffee\112\uffee\001\002\000\050\010\uffec\037\uffec" +
    "\040\uffec\042\uffec\067\uffec\071\uffec\072\uffec\073\uffec\077" +
    "\uffec\100\uffec\102\uffec\103\uffec\104\uffec\105\uffec\106\uffec" +
    "\107\uffec\110\uffec\111\uffec\112\uffec\001\002\000\020\010" +
    "\014\042\122\071\023\102\022\110\016\111\004\112\005" +
    "\001\002\000\030\010\ufff3\020\ufff3\022\ufff3\023\ufff3\024" +
    "\ufff3\025\ufff3\042\ufff3\043\ufff3\056\ufff3\065\ufff3\110\ufff3" +
    "\001\002\000\006\042\220\050\217\001\002\000\030\010" +
    "\014\020\142\022\140\023\135\024\130\025\141\042\175" +
    "\043\137\056\132\065\143\110\016\001\002\000\006\010" +
    "\014\110\016\001\002\000\004\050\127\001\002\000\026" +
    "\010\014\020\142\022\140\023\135\024\130\025\141\043" +
    "\137\056\132\065\143\110\016\001\002\000\060\010\uff76" +
    "\031\uff76\035\uff76\037\uff76\040\uff76\042\uff76\043\uff76\044" +
    "\uff76\045\uff76\046\uff76\057\uff76\064\uff76\067\uff76\070\uff76" +
    "\073\uff76\074\uff76\077\uff76\100\uff76\103\uff76\105\uff76\106" +
    "\uff76\107\uff76\110\uff76\001\002\000\060\010\uff83\031\uff83" +
    "\035\uff83\037\uff83\040\uff83\042\uff83\043\uff83\044\uff83\045" +
    "\uff83\046\uff83\057\uff83\064\uff83\067\uff83\070\uff83\073\uff83" +
    "\074\uff83\077\uff83\100\uff83\103\uff83\105\uff83\106\uff83\107" +
    "\uff83\110\uff83\001\002\000\026\010\014\020\142\022\140" +
    "\023\135\024\130\025\141\043\137\056\132\065\143\110" +
    "\016\001\002\000\060\010\uff81\031\uff81\035\uff81\037\uff81" +
    "\040\uff81\042\uff81\043\uff81\044\uff81\045\uff81\046\uff81\057" +
    "\uff81\064\uff81\067\uff81\070\uff81\073\uff81\074\uff81\077\uff81" +
    "\100\uff81\103\uff81\105\uff81\106\uff81\107\uff81\110\uff81\001" +
    "\002\000\066\010\uff82\027\163\030\164\031\uff82\035\uff82" +
    "\037\uff82\040\uff82\042\uff82\043\uff82\044\uff82\045\uff82\046" +
    "\uff82\056\162\057\uff82\064\uff82\067\uff82\070\uff82\073\uff82" +
    "\074\uff82\077\uff82\100\uff82\103\uff82\105\uff82\106\uff82\107" +
    "\uff82\110\uff82\001\002\000\060\010\uff77\031\uff77\035\uff77" +
    "\037\uff77\040\uff77\042\uff77\043\uff77\044\uff77\045\uff77\046" +
    "\uff77\057\uff77\064\uff77\067\uff77\070\uff77\073\uff77\074\uff77" +
    "\077\uff77\100\uff77\103\uff77\105\uff77\106\uff77\107\uff77\110" +
    "\uff77\001\002\000\020\031\151\035\146\042\157\043\145" +
    "\045\153\046\150\064\147\001\002\000\026\010\014\020" +
    "\142\022\140\023\135\024\130\025\141\043\137\056\132" +
    "\065\143\110\016\001\002\000\060\010\uff78\031\uff78\035" +
    "\uff78\037\uff78\040\uff78\042\uff78\043\uff78\044\uff78\045\uff78" +
    "\046\uff78\057\uff78\064\uff78\067\uff78\070\uff78\073\uff78\074" +
    "\uff78\077\uff78\100\uff78\103\uff78\105\uff78\106\uff78\107\uff78" +
    "\110\uff78\001\002\000\060\010\uff75\031\uff75\035\uff75\037" +
    "\uff75\040\uff75\042\uff75\043\uff75\044\uff75\045\uff75\046\uff75" +
    "\057\uff75\064\uff75\067\uff75\070\uff75\073\uff75\074\uff75\077" +
    "\uff75\100\uff75\103\uff75\105\uff75\106\uff75\107\uff75\110\uff75" +
    "\001\002\000\060\010\uff79\031\uff79\035\uff79\037\uff79\040" +
    "\uff79\042\uff79\043\uff79\044\uff79\045\uff79\046\uff79\057\uff79" +
    "\064\uff79\067\uff79\070\uff79\073\uff79\074\uff79\077\uff79\100" +
    "\uff79\103\uff79\105\uff79\106\uff79\107\uff79\110\uff79\001\002" +
    "\000\026\010\014\020\142\022\140\023\135\024\130\025" +
    "\141\043\137\056\132\065\143\110\016\001\002\000\060" +
    "\010\uff88\031\151\035\146\037\uff88\040\uff88\042\uff88\043" +
    "\145\044\uff88\045\153\046\150\057\uff88\064\147\067\uff88" +
    "\070\uff88\073\uff88\074\uff88\077\uff88\100\uff88\103\uff88\105" +
    "\uff88\106\uff88\107\uff88\110\uff88\001\002\000\026\010\uff7d" +
    "\020\uff7d\022\uff7d\023\uff7d\024\uff7d\025\uff7d\043\uff7d\056" +
    "\uff7d\065\uff7d\110\uff7d\001\002\000\026\010\uff7b\020\uff7b" +
    "\022\uff7b\023\uff7b\024\uff7b\025\uff7b\043\uff7b\056\uff7b\065" +
    "\uff7b\110\uff7b\001\002\000\026\010\014\020\142\022\140" +
    "\023\135\024\130\025\141\043\137\056\132\065\143\110" +
    "\016\001\002\000\026\010\uff7a\020\uff7a\022\uff7a\023\uff7a" +
    "\024\uff7a\025\uff7a\043\uff7a\056\uff7a\065\uff7a\110\uff7a\001" +
    "\002\000\026\010\uff7e\020\uff7e\022\uff7e\023\uff7e\024\uff7e" +
    "\025\uff7e\043\uff7e\056\uff7e\065\uff7e\110\uff7e\001\002\000" +
    "\026\010\014\020\142\022\140\023\135\024\130\025\141" +
    "\043\137\056\132\065\143\110\016\001\002\000\026\010" +
    "\uff7c\020\uff7c\022\uff7c\023\uff7c\024\uff7c\025\uff7c\043\uff7c" +
    "\056\uff7c\065\uff7c\110\uff7c\001\002\000\060\010\uff85\031" +
    "\151\035\146\037\uff85\040\uff85\042\uff85\043\145\044\uff85" +
    "\045\153\046\150\057\uff85\064\147\067\uff85\070\uff85\073" +
    "\uff85\074\uff85\077\uff85\100\uff85\103\uff85\105\uff85\106\uff85" +
    "\107\uff85\110\uff85\001\002\000\060\010\uff87\031\151\035" +
    "\146\037\uff87\040\uff87\042\uff87\043\145\044\uff87\045\153" +
    "\046\150\057\uff87\064\uff87\067\uff87\070\uff87\073\uff87\074" +
    "\uff87\077\uff87\100\uff87\103\uff87\105\uff87\106\uff87\107\uff87" +
    "\110\uff87\001\002\000\060\010\uff86\031\uff86\035\146\037" +
    "\uff86\040\uff86\042\uff86\043\uff86\044\uff86\045\153\046\150" +
    "\057\uff86\064\uff86\067\uff86\070\uff86\073\uff86\074\uff86\077" +
    "\uff86\100\uff86\103\uff86\105\uff86\106\uff86\107\uff86\110\uff86" +
    "\001\002\000\030\010\ufff6\020\ufff6\022\ufff6\023\ufff6\024" +
    "\ufff6\025\ufff6\042\ufff6\043\ufff6\056\ufff6\065\ufff6\110\ufff6" +
    "\001\002\000\060\010\uffc0\031\uffc0\035\uffc0\037\uffc0\040" +
    "\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\057\uffc0" +
    "\064\uffc0\067\uffc0\070\uffc0\073\uffc0\074\uffc0\077\uffc0\100" +
    "\uffc0\103\uffc0\105\uffc0\106\uffc0\107\uffc0\110\uffc0\001\002" +
    "\000\060\010\uffc1\031\uffc1\035\uffc1\037\uffc1\040\uffc1\042" +
    "\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\057\uffc1\064\uffc1" +
    "\067\uffc1\070\uffc1\073\uffc1\074\uffc1\077\uffc1\100\uffc1\103" +
    "\uffc1\105\uffc1\106\uffc1\107\uffc1\110\uffc1\001\002\000\030" +
    "\010\014\020\142\022\140\023\135\024\130\025\141\043" +
    "\137\056\132\057\167\065\143\110\016\001\002\000\060" +
    "\010\uff80\031\uff80\035\uff80\037\uff80\040\uff80\042\uff80\043" +
    "\uff80\044\uff80\045\uff80\046\uff80\057\uff80\064\uff80\067\uff80" +
    "\070\uff80\073\uff80\074\uff80\077\uff80\100\uff80\103\uff80\105" +
    "\uff80\106\uff80\107\uff80\110\uff80\001\002\000\060\010\uff7f" +
    "\031\uff7f\035\uff7f\037\uff7f\040\uff7f\042\uff7f\043\uff7f\044" +
    "\uff7f\045\uff7f\046\uff7f\057\uff7f\064\uff7f\067\uff7f\070\uff7f" +
    "\073\uff7f\074\uff7f\077\uff7f\100\uff7f\103\uff7f\105\uff7f\106" +
    "\uff7f\107\uff7f\110\uff7f\001\002\000\006\044\170\057\171" +
    "\001\002\000\024\031\151\035\146\040\uffb8\043\145\044" +
    "\uffb8\045\153\046\150\057\uffb8\064\147\001\002\000\060" +
    "\010\uffbe\031\uffbe\035\uffbe\037\uffbe\040\uffbe\042\uffbe\043" +
    "\uffbe\044\uffbe\045\uffbe\046\uffbe\057\uffbe\064\uffbe\067\uffbe" +
    "\070\uffbe\073\uffbe\074\uffbe\077\uffbe\100\uffbe\103\uffbe\105" +
    "\uffbe\106\uffbe\107\uffbe\110\uffbe\001\002\000\026\010\014" +
    "\020\142\022\140\023\135\024\130\025\141\043\137\056" +
    "\132\065\143\110\016\001\002\000\060\010\uffbf\031\uffbf" +
    "\035\uffbf\037\uffbf\040\uffbf\042\uffbf\043\uffbf\044\uffbf\045" +
    "\uffbf\046\uffbf\057\uffbf\064\uffbf\067\uffbf\070\uffbf\073\uffbf" +
    "\074\uffbf\077\uffbf\100\uffbf\103\uffbf\105\uffbf\106\uffbf\107" +
    "\uffbf\110\uffbf\001\002\000\024\031\151\035\146\040\uffb9" +
    "\043\145\044\uffb9\045\153\046\150\057\uffb9\064\147\001" +
    "\002\000\020\031\151\035\146\043\145\045\153\046\150" +
    "\057\174\064\147\001\002\000\060\010\uff84\031\uff84\035" +
    "\uff84\037\uff84\040\uff84\042\uff84\043\uff84\044\uff84\045\uff84" +
    "\046\uff84\057\uff84\064\uff84\067\uff84\070\uff84\073\uff84\074" +
    "\uff84\077\uff84\100\uff84\103\uff84\105\uff84\106\uff84\107\uff84" +
    "\110\uff84\001\002\000\030\010\014\020\142\022\140\023" +
    "\135\024\130\025\141\043\137\056\132\057\215\065\143" +
    "\110\016\001\002\000\032\027\163\030\164\031\uff82\035" +
    "\uff82\042\uff82\043\uff82\045\uff82\046\uff82\047\205\050\206" +
    "\056\162\064\uff82\001\002\000\020\031\151\035\146\042" +
    "\200\043\145\045\153\046\150\064\147\001\002\000\030" +
    "\010\014\020\142\022\140\023\135\024\130\025\141\043" +
    "\137\056\132\057\202\065\143\110\016\001\002\000\020" +
    "\031\151\035\146\043\145\045\153\046\150\057\203\064" +
    "\147\001\002\000\006\037\ufff9\042\ufff9\001\002\000\006" +
    "\037\ufffc\042\ufffc\001\002\000\026\010\014\020\142\022" +
    "\140\023\135\024\130\025\141\043\137\056\132\065\143" +
    "\110\016\001\002\000\026\010\uffb2\020\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\025\uffb2\043\uffb2\056\uffb2\065\uffb2\110\uffb2" +
    "\001\002\000\026\010\uffb1\020\uffb1\022\uffb1\023\uffb1\024" +
    "\uffb1\025\uffb1\043\uffb1\056\uffb1\065\uffb1\110\uffb1\001\002" +
    "\000\020\031\151\035\146\042\210\043\145\045\153\046" +
    "\150\064\147\001\002\000\030\010\014\020\142\022\140" +
    "\023\135\024\130\025\141\043\137\056\132\057\212\065" +
    "\143\110\016\001\002\000\020\031\151\035\146\043\145" +
    "\045\153\046\150\057\213\064\147\001\002\000\006\037" +
    "\ufff8\042\ufff8\001\002\000\006\037\ufffb\042\ufffb\001\002" +
    "\000\020\031\151\035\146\043\145\045\153\046\150\057" +
    "\216\064\147\001\002\000\006\037\ufff7\042\ufff7\001\002" +
    "\000\006\037\ufffa\042\ufffa\001\002\000\026\010\014\020" +
    "\142\022\140\023\135\024\130\025\141\043\137\056\132" +
    "\065\143\110\016\001\002\000\030\010\ufff4\020\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\042\ufff4\043\ufff4\056\ufff4" +
    "\065\ufff4\110\ufff4\001\002\000\020\031\151\035\146\042" +
    "\222\043\145\045\153\046\150\064\147\001\002\000\030" +
    "\010\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\042" +
    "\ufff5\043\ufff5\056\ufff5\065\ufff5\110\ufff5\001\002\000\032" +
    "\010\uffd2\037\uffd2\040\uffd2\067\uffd2\073\uffd2\077\uffd2\100" +
    "\uffd2\103\uffd2\105\uffd2\106\uffd2\107\uffd2\110\uffd2\001\002" +
    "\000\014\027\163\030\164\047\205\050\227\056\162\001" +
    "\002\000\050\002\uffd5\010\uffd5\037\uffd5\040\uffd5\067\uffd5" +
    "\071\uffd5\073\uffd5\076\uffd5\077\uffd5\100\uffd5\102\uffd5\103" +
    "\uffd5\104\uffd5\105\uffd5\106\uffd5\107\uffd5\110\uffd5\111\uffd5" +
    "\112\uffd5\001\002\000\026\010\014\020\142\022\140\023" +
    "\135\024\130\025\141\043\137\056\132\065\143\110\016" +
    "\001\002\000\030\010\uffb1\020\uffb1\022\uffb1\023\uffb1\024" +
    "\uffb1\025\uffb1\037\231\043\uffb1\056\uffb1\065\uffb1\110\uffb1" +
    "\001\002\000\004\042\235\001\002\000\030\010\014\020" +
    "\142\022\140\023\135\024\130\025\141\040\232\043\137" +
    "\056\132\065\143\110\016\001\002\000\004\042\uffb3\001" +
    "\002\000\006\040\234\044\170\001\002\000\004\042\uffb4" +
    "\001\002\000\032\010\uffca\037\uffca\040\uffca\067\uffca\073" +
    "\uffca\077\uffca\100\uffca\103\uffca\105\uffca\106\uffca\107\uffca" +
    "\110\uffca\001\002\000\050\010\uffc5\031\151\035\146\037" +
    "\uffc5\040\uffc5\042\237\043\145\045\153\046\150\064\147" +
    "\067\uffc5\073\uffc5\077\uffc5\100\uffc5\103\uffc5\105\uffc5\106" +
    "\uffc5\107\uffc5\110\uffc5\001\002\000\032\010\uffcb\037\uffcb" +
    "\040\uffcb\067\uffcb\073\uffcb\077\uffcb\100\uffcb\103\uffcb\105" +
    "\uffcb\106\uffcb\107\uffcb\110\uffcb\001\002\000\032\010\uffc7" +
    "\037\uffc7\040\uffc7\067\uffc7\073\uffc7\077\uffc7\100\uffc7\103" +
    "\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7\001\002\000\050" +
    "\002\uffd3\010\uffd3\037\uffd3\040\uffd3\067\uffd3\071\uffd3\073" +
    "\uffd3\076\uffd3\077\uffd3\100\uffd3\102\uffd3\103\uffd3\104\uffd3" +
    "\105\uffd3\106\uffd3\107\uffd3\110\uffd3\111\uffd3\112\uffd3\001" +
    "\002\000\032\010\014\037\066\040\243\067\110\073\073" +
    "\077\116\100\101\103\077\105\076\106\072\107\103\110" +
    "\016\001\002\000\050\002\uffd6\010\uffd6\037\uffd6\040\uffd6" +
    "\067\uffd6\071\uffd6\073\uffd6\076\uffd6\077\uffd6\100\uffd6\102" +
    "\uffd6\103\uffd6\104\uffd6\105\uffd6\106\uffd6\107\uffd6\110\uffd6" +
    "\111\uffd6\112\uffd6\001\002\000\032\010\uffc8\037\uffc8\040" +
    "\uffc8\067\uffc8\073\uffc8\077\uffc8\100\uffc8\103\uffc8\105\uffc8" +
    "\106\uffc8\107\uffc8\110\uffc8\001\002\000\026\010\014\020" +
    "\142\022\140\023\135\024\130\025\141\043\137\056\132" +
    "\065\143\110\016\001\002\000\020\031\151\035\146\043" +
    "\145\045\153\046\150\057\247\064\147\001\002\000\004" +
    "\042\uffc2\001\002\000\026\010\014\020\142\022\140\023" +
    "\135\024\130\025\141\043\137\056\132\065\143\110\016" +
    "\001\002\000\032\010\uff8d\037\uff8d\040\uff8d\067\uff8d\073" +
    "\uff8d\077\uff8d\100\uff8d\103\uff8d\105\uff8d\106\uff8d\107\uff8d" +
    "\110\uff8d\001\002\000\032\010\uff71\037\uff71\040\uff71\067" +
    "\uff71\073\uff71\077\uff71\100\uff71\103\uff71\105\uff71\106\uff71" +
    "\107\uff71\110\uff71\001\002\000\062\010\uff82\027\163\030" +
    "\164\031\uff82\035\uff82\037\uff82\040\uff82\043\uff82\045\uff82" +
    "\046\uff82\047\205\050\206\056\162\057\uff82\064\uff82\067" +
    "\uff82\073\uff82\077\uff82\100\uff82\103\uff82\105\uff82\106\uff82" +
    "\107\uff82\110\uff82\001\002\000\050\010\uff89\031\151\035" +
    "\146\037\uff89\040\uff89\043\145\045\153\046\150\057\uff89" +
    "\064\147\067\uff89\073\uff89\077\uff89\100\uff89\103\uff89\105" +
    "\uff89\106\uff89\107\uff89\110\uff89\001\002\000\034\010\uff72" +
    "\037\uff72\040\uff72\057\256\067\uff72\073\uff72\077\uff72\100" +
    "\uff72\103\uff72\105\uff72\106\uff72\107\uff72\110\uff72\001\002" +
    "\000\004\037\066\001\002\000\034\010\uff8e\037\uff8e\040" +
    "\uff8e\067\uff8e\073\uff8e\076\261\077\uff8e\100\uff8e\103\uff8e" +
    "\105\uff8e\106\uff8e\107\uff8e\110\uff8e\001\002\000\032\010" +
    "\uff8f\037\uff8f\040\uff8f\067\uff8f\073\uff8f\077\uff8f\100\uff8f" +
    "\103\uff8f\105\uff8f\106\uff8f\107\uff8f\110\uff8f\001\002\000" +
    "\006\037\066\100\101\001\002\000\032\010\uff8b\037\uff8b" +
    "\040\uff8b\067\uff8b\073\uff8b\077\uff8b\100\uff8b\103\uff8b\105" +
    "\uff8b\106\uff8b\107\uff8b\110\uff8b\001\002\000\032\010\uff8c" +
    "\037\uff8c\040\uff8c\067\uff8c\073\uff8c\077\uff8c\100\uff8c\103" +
    "\uff8c\105\uff8c\106\uff8c\107\uff8c\110\uff8c\001\002\000\026" +
    "\010\014\020\142\022\140\023\135\024\130\025\141\043" +
    "\137\056\132\065\143\110\016\001\002\000\050\010\uff8a" +
    "\031\151\035\146\037\uff8a\040\uff8a\043\145\045\153\046" +
    "\150\057\uff8a\064\147\067\uff8a\073\uff8a\077\uff8a\100\uff8a" +
    "\103\uff8a\105\uff8a\106\uff8a\107\uff8a\110\uff8a\001\002\000" +
    "\032\010\ufffe\037\ufffe\040\ufffe\067\ufffe\073\ufffe\077\ufffe" +
    "\100\ufffe\103\ufffe\105\ufffe\106\ufffe\107\ufffe\110\ufffe\001" +
    "\002\000\032\010\ufffd\037\ufffd\040\ufffd\067\ufffd\073\ufffd" +
    "\077\ufffd\100\ufffd\103\ufffd\105\ufffd\106\ufffd\107\ufffd\110" +
    "\ufffd\001\002\000\004\056\331\001\002\000\042\010\uffaa" +
    "\023\276\024\275\025\274\037\uffaa\040\uffaa\057\277\067" +
    "\uffaa\073\uffaa\077\uffaa\100\uffaa\103\uffaa\105\uffaa\106\uffaa" +
    "\107\uffaa\110\uffaa\001\002\000\032\010\uffac\037\uffac\040" +
    "\uffac\067\uffac\073\uffac\077\uffac\100\uffac\103\uffac\105\uffac" +
    "\106\uffac\107\uffac\110\uffac\001\002\000\034\010\uffab\037" +
    "\uffab\040\uffab\057\300\067\uffab\073\uffab\077\uffab\100\uffab" +
    "\103\uffab\105\uffab\106\uffab\107\uffab\110\uffab\001\002\000" +
    "\042\010\uff9c\037\uff9c\040\uff9c\057\uff9c\066\uff9c\067\uff9c" +
    "\070\uff9c\073\uff9c\074\uff9c\077\uff9c\100\uff9c\103\uff9c\105" +
    "\uff9c\106\uff9c\107\uff9c\110\uff9c\001\002\000\042\010\uff9d" +
    "\037\uff9d\040\uff9d\057\uff9d\066\uff9d\067\uff9d\070\uff9d\073" +
    "\uff9d\074\uff9d\077\uff9d\100\uff9d\103\uff9d\105\uff9d\106\uff9d" +
    "\107\uff9d\110\uff9d\001\002\000\042\010\uff9b\037\uff9b\040" +
    "\uff9b\057\uff9b\066\uff9b\067\uff9b\070\uff9b\073\uff9b\074\uff9b" +
    "\077\uff9b\100\uff9b\103\uff9b\105\uff9b\106\uff9b\107\uff9b\110" +
    "\uff9b\001\002\000\032\010\uffa9\037\uffa9\040\uffa9\067\uffa9" +
    "\073\uffa9\077\uffa9\100\uffa9\103\uffa9\105\uffa9\106\uffa9\107" +
    "\uffa9\110\uffa9\001\002\000\004\037\301\001\002\000\010" +
    "\040\304\070\306\074\302\001\002\000\004\066\326\001" +
    "\002\000\010\040\uffa5\070\uffa5\074\uffa5\001\002\000\032" +
    "\010\uffad\037\uffad\040\uffad\067\uffad\073\uffad\077\uffad\100" +
    "\uffad\103\uffad\105\uffad\106\uffad\107\uffad\110\uffad\001\002" +
    "\000\010\040\uffa0\070\uffa0\074\uffa0\001\002\000\012\023" +
    "\276\024\275\025\274\066\316\001\002\000\010\040\311" +
    "\070\306\074\310\001\002\000\004\066\313\001\002\000" +
    "\032\010\uffae\037\uffae\040\uffae\067\uffae\073\uffae\077\uffae" +
    "\100\uffae\103\uffae\105\uffae\106\uffae\107\uffae\110\uffae\001" +
    "\002\000\010\040\uffa6\070\uffa6\074\uffa6\001\002\000\026" +
    "\010\014\020\142\022\140\023\135\024\130\025\141\043" +
    "\137\056\132\065\143\110\016\001\002\000\020\031\151" +
    "\035\146\040\315\043\145\045\153\046\150\064\147\001" +
    "\002\000\032\010\uffb0\037\uffb0\040\uffb0\067\uffb0\073\uffb0" +
    "\077\uffb0\100\uffb0\103\uffb0\105\uffb0\106\uffb0\107\uffb0\110" +
    "\uffb0\001\002\000\010\040\uff9f\070\uff9f\074\uff9f\001\002" +
    "\000\012\040\uff9e\066\320\070\uff9e\074\uff9e\001\002\000" +
    "\036\010\014\020\142\022\140\023\135\024\130\025\141" +
    "\040\uffa1\043\137\056\132\065\143\067\322\070\uffa1\074" +
    "\uffa1\110\016\001\002\000\026\031\151\035\146\040\uffa2" +
    "\043\145\045\153\046\150\064\147\067\324\070\uffa2\074" +
    "\uffa2\001\002\000\004\042\323\001\002\000\010\040\uffa3" +
    "\070\uffa3\074\uffa3\001\002\000\004\042\325\001\002\000" +
    "\010\040\uffa4\070\uffa4\074\uffa4\001\002\000\026\010\014" +
    "\020\142\022\140\023\135\024\130\025\141\043\137\056" +
    "\132\065\143\110\016\001\002\000\020\031\151\035\146" +
    "\040\330\043\145\045\153\046\150\064\147\001\002\000" +
    "\032\010\uffaf\037\uffaf\040\uffaf\067\uffaf\073\uffaf\077\uffaf" +
    "\100\uffaf\103\uffaf\105\uffaf\106\uffaf\107\uffaf\110\uffaf\001" +
    "\002\000\010\023\276\024\275\025\274\001\002\000\004" +
    "\057\333\001\002\000\004\037\334\001\002\000\006\070" +
    "\306\074\335\001\002\000\004\066\342\001\002\000\006" +
    "\070\306\074\337\001\002\000\004\066\340\001\002\000" +
    "\004\040\341\001\002\000\032\010\uffa8\037\uffa8\040\uffa8" +
    "\067\uffa8\073\uffa8\077\uffa8\100\uffa8\103\uffa8\105\uffa8\106" +
    "\uffa8\107\uffa8\110\uffa8\001\002\000\004\040\343\001\002" +
    "\000\032\010\uffa7\037\uffa7\040\uffa7\067\uffa7\073\uffa7\077" +
    "\uffa7\100\uffa7\103\uffa7\105\uffa7\106\uffa7\107\uffa7\110\uffa7" +
    "\001\002\000\030\010\014\020\142\022\140\023\135\024" +
    "\130\025\141\043\137\056\132\057\347\065\143\110\016" +
    "\001\002\000\032\010\uff98\037\uff98\040\uff98\067\uff98\073" +
    "\uff98\077\uff98\100\uff98\103\uff98\105\uff98\106\uff98\107\uff98" +
    "\110\uff98\001\002\000\034\010\uff72\037\uff72\040\uff72\057" +
    "\350\067\uff72\073\uff72\077\uff72\100\uff72\103\uff72\105\uff72" +
    "\106\uff72\107\uff72\110\uff72\001\002\000\032\010\uff99\037" +
    "\uff99\040\uff99\067\uff99\073\uff99\077\uff99\100\uff99\103\uff99" +
    "\105\uff99\106\uff99\107\uff99\110\uff99\001\002\000\004\037" +
    "\066\001\002\000\032\010\uff9a\037\uff9a\040\uff9a\067\uff9a" +
    "\073\uff9a\077\uff9a\100\uff9a\103\uff9a\105\uff9a\106\uff9a\107" +
    "\uff9a\110\uff9a\001\002\000\010\010\014\057\354\110\016" +
    "\001\002\000\004\057\355\001\002\000\004\042\uffc4\001" +
    "\002\000\004\042\uffc3\001\002\000\032\010\uffd0\037\uffd0" +
    "\040\uffd0\067\uffd0\073\uffd0\077\uffd0\100\uffd0\103\uffd0\105" +
    "\uffd0\106\uffd0\107\uffd0\110\uffd0\001\002\000\074\010\uff91" +
    "\021\uff91\023\uff91\024\uff91\025\uff91\026\uff91\037\uff91\040" +
    "\uff91\042\uff91\044\uff91\054\uff91\055\uff91\056\uff91\057\uff91" +
    "\067\uff91\071\uff91\072\uff91\073\uff91\077\uff91\100\uff91\102" +
    "\uff91\103\uff91\104\uff91\105\uff91\106\uff91\107\uff91\110\uff91" +
    "\111\uff91\112\uff91\001\002\000\046\010\ufff0\037\ufff0\040" +
    "\ufff0\067\ufff0\071\ufff0\072\ufff0\073\ufff0\077\ufff0\100\ufff0" +
    "\102\ufff0\103\ufff0\104\ufff0\105\ufff0\106\ufff0\107\ufff0\110" +
    "\ufff0\111\ufff0\112\ufff0\001\002\000\004\002\001\001\002" +
    "\000\006\056\054\057\055\001\002\000\006\037\066\042" +
    "\365\001\002\000\022\002\uffd8\010\uffd8\071\uffd8\102\uffd8" +
    "\104\uffd8\110\uffd8\111\uffd8\112\uffd8\001\002\000\022\002" +
    "\uffd7\010\uffd7\071\uffd7\102\uffd7\104\uffd7\110\uffd7\111\uffd7" +
    "\112\uffd7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\363\000\024\002\011\003\007\004\017\005\014\007" +
    "\020\010\016\011\012\017\006\020\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\007\004\017\005\051\020\050\001\001\000\002\001\001" +
    "\000\004\003\361\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\117\021\052\055\034" +
    "\056\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\356\001\001\000\020\003\007\004\017\005\014" +
    "\010\047\011\012\017\046\020\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\007\004\017\005\024" +
    "\001\001\000\010\012\030\055\034\056\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\056\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\007\004\017\005\051\020" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\052\001\001\000\004\047\066\001\001\000\012\003" +
    "\007\004\017\005\055\024\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\007\004\017\005\061\001\001\000\002\001\001" +
    "\000\010\003\007\004\017\005\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\003\103\004\017\005\116" +
    "\007\105\010\016\011\012\014\070\022\074\025\114\032" +
    "\113\033\106\043\111\044\077\045\073\047\101\052\104" +
    "\053\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\054\344\001\001\000" +
    "\004\034\271\001\001\000\004\047\265\001\001\000\004" +
    "\054\250\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\225\015\157\023\160\001\001\000\002\001\001" +
    "\000\042\003\103\004\017\005\116\010\047\011\012\014" +
    "\070\022\074\025\241\032\113\033\106\043\111\044\077" +
    "\045\073\047\101\052\104\053\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\223\014" +
    "\070\022\222\032\113\033\106\043\111\044\077\045\073" +
    "\047\101\052\104\053\112\001\001\000\002\001\001\000" +
    "\010\012\117\055\034\056\033\001\001\000\002\001\001" +
    "\000\010\003\122\004\124\050\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\175\013\130\014\132" +
    "\026\176\001\001\000\004\003\125\001\001\000\002\001" +
    "\001\000\012\003\133\013\130\014\132\026\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\133\013" +
    "\130\014\132\026\172\001\001\000\002\001\001\000\006" +
    "\015\157\023\160\001\001\000\002\001\001\000\004\016" +
    "\151\001\001\000\012\003\133\013\130\014\132\026\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\133\013\130\014\132\026\143\001\001" +
    "\000\004\016\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\133\013\130\014\132\026\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\133\013" +
    "\130\014\132\026\153\001\001\000\002\001\001\000\004" +
    "\016\151\001\001\000\004\016\151\001\001\000\004\016" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\133\013\130\014\132\026\165\027" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\151\001\001\000\002\001\001\000" +
    "\012\003\133\013\130\014\132\026\171\001\001\000\002" +
    "\001\001\000\004\016\151\001\001\000\004\016\151\001" +
    "\001\000\002\001\001\000\012\003\133\013\130\014\132" +
    "\026\213\001\001\000\010\006\203\015\157\023\160\001" +
    "\001\000\004\016\151\001\001\000\012\003\133\013\130" +
    "\014\132\026\200\001\001\000\004\016\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\133\013\130" +
    "\014\132\026\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\151\001\001\000\012\003\133\013\130" +
    "\014\132\026\210\001\001\000\004\016\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\133\013" +
    "\130\014\132\026\220\001\001\000\002\001\001\000\004" +
    "\016\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\225\015\157\023\160\001\001\000\002\001\001" +
    "\000\012\003\133\013\130\014\132\026\235\001\001\000" +
    "\004\030\227\001\001\000\002\001\001\000\014\003\133" +
    "\013\130\014\132\026\165\027\232\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\223\014\070\022\222" +
    "\032\113\033\106\043\111\044\077\045\073\047\101\052" +
    "\104\053\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\133\013\130\014\132\026\245\001\001\000" +
    "\004\016\151\001\001\000\002\001\001\000\014\003\252" +
    "\013\130\014\132\026\253\040\254\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\263\015\157\023\160" +
    "\001\001\000\004\016\151\001\001\000\002\001\001\000" +
    "\004\047\256\001\001\000\004\046\257\001\001\000\002" +
    "\001\001\000\006\045\262\047\261\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\133\013\130\014\132" +
    "\026\264\001\001\000\004\016\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\272" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\035\306\036\302\041\304\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\316\001\001\000\006\036" +
    "\311\041\304\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\133\013\130\014\132\026" +
    "\313\001\001\000\004\016\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\133\013" +
    "\130\014\132\026\320\001\001\000\004\016\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\133\013\130\014\132\026\326" +
    "\001\001\000\004\016\151\001\001\000\002\001\001\000" +
    "\004\042\331\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\035\335\036\302\041\304\001\001\000\002\001" +
    "\001\000\006\036\311\041\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\252\013\130\014\132\026\253" +
    "\040\345\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\350\001\001\000\002\001\001" +
    "\000\004\003\352\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\362\001" +
    "\001\000\004\047\363\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

        if (currentSymbol != null) this.previousSymbol = currentSymbol;
        this.currentSymbol = this.getScanner().next_token();
        return currentSymbol;

    }



    private Symbol currentSymbol;
    private Symbol previousSymbol;

    public Symbol getCurrentSymbol(){
        return this.currentSymbol;
    }

     public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.right+1)+" columna "+(s.left+1) );
    }

    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.right+1)+" columna "+(s.left+1) );
    }

    private ArrayList<SyntaxError> syntaxerrors = new ArrayList<SyntaxError>();

    @Override
    public String toString() {
        String result = "";

        if (!syntaxerrors.isEmpty()) {
            result += "====== Syntax Errors ======\n";

            for (int i = 0; i < syntaxerrors.size(); i++) {
                result += syntaxerrors.get(i).toString();
            }
        }
        return result;
    }

    public void newSyntaxError(ErrorTypes pType) {
        syntaxerrors.add(new SyntaxError(pType, previousSymbol.right + 1, previousSymbol.left + 1));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initial ::= var_declarations func_declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // initial ::= func_declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // for_loop ::= for_expression brackets 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_loop",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // for_loop ::= for_expression OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_loop",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // for_expression ::= FOR OPERATOR_PARENTHESIS_L for_variable expression OPERATOR_END_LINE expression OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_expression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // for_expression ::= FOR OPERATOR_PARENTHESIS_L for_variable valid_name assignments expression OPERATOR_END_LINE expression OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_expression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // for_expression ::= FOR OPERATOR_PARENTHESIS_L for_variable OPERATOR_END_LINE expression OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_expression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // for_expression ::= FOR OPERATOR_PARENTHESIS_L for_variable expression OPERATOR_END_LINE OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_expression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // for_expression ::= FOR OPERATOR_PARENTHESIS_L for_variable valid_name assignments expression OPERATOR_END_LINE OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_expression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // for_expression ::= FOR OPERATOR_PARENTHESIS_L for_variable OPERATOR_END_LINE OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_expression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // for_variable ::= data_type valid_name OPERATOR_ASSIGNMENT_EQUALS expression OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_variable",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // for_variable ::= valid_name OPERATOR_ASSIGNMENT_EQUALS expression OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_variable",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // for_variable ::= valid_name OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_variable",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // for_variable ::= OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_variable",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_declarations ::= var_declarations var_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declarations",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_declarations ::= var_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declarations",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_declaration ::= var_expression OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_declaration ::= var_expression 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.MISSING_SEMICOLON); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // var_expression ::= typed_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_expression ::= CONST typed_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var_expression ::= typed_identifier var_list_brackets 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var_expression ::= CONST typed_identifier var_list_brackets 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // var_list_brackets ::= OPERATOR_SQ_BRACKET_L LITERAL_DECIMAL OPERATOR_SQ_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list_brackets",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // var_list_brackets ::= OPERATOR_SQ_BRACKET_L OPERATOR_SQ_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list_brackets",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // var_list_brackets ::= OPERATOR_SQ_BRACKET_L var_list_types OPERATOR_SQ_BRACKET_R 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.INVALID_DATA_TYPE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list_brackets",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // var_list_brackets ::= var_list_errors 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.MISSING_SQUARE_BRACKETS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list_brackets",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // var_list_errors ::= OPERATOR_SQ_BRACKET_L LITERAL_DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list_errors",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // var_list_errors ::= OPERATOR_SQ_BRACKET_L 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list_errors",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // var_list_errors ::= OPERATOR_SQ_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list_errors",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // var_list_errors ::= LITERAL_DECIMAL OPERATOR_SQ_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list_errors",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var_list_errors ::= OPERATOR_SQ_BRACKET_L var_list_types 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.INVALID_DATA_TYPE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list_errors",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // var_list_errors ::= var_list_types OPERATOR_SQ_BRACKET_L 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.INVALID_DATA_TYPE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list_errors",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // var_list_types ::= LITERAL_FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list_types",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // var_list_types ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list_types",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // var_list_types ::= LITERAL_CHARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list_types",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var_list_types ::= LITERAL_EXPONENTIAL_FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list_types",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // func_declarations ::= func_declarations func_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_declarations",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // func_declarations ::= func_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_declarations",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // func_declaration ::= typed_identifier func_decl_parentheses brackets 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_declaration",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // func_declaration ::= typed_identifier func_decl_parentheses OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_declaration",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // func_declaration ::= VOID valid_name func_decl_parentheses brackets 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_declaration",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // func_declaration ::= VOID valid_name func_decl_parentheses OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_declaration",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // brackets ::= OPERATOR_BRACKET_L var_declarations statements OPERATOR_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brackets",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // brackets ::= OPERATOR_BRACKET_L statements OPERATOR_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brackets",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // brackets ::= OPERATOR_BRACKET_L OPERATOR_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brackets",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // brackets ::= OPERATOR_BRACKET_L var_declarations OPERATOR_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brackets",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= valid_statement OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= while_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= for_loop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= switch 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= if_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement ::= valid_name assignments expression OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement ::= valid_name OPERATOR_ASSIGNMENT_EQUALS list_expression OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statement ::= brackets 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement ::= loop_words OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statement ::= read_write OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement ::= valid_statement 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.MISSING_SEMICOLON); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement ::= valid_name assignments expression 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.MISSING_SEMICOLON); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // read_write ::= READ OPERATOR_PARENTHESIS_L OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_write",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // read_write ::= READ OPERATOR_PARENTHESIS_L valid_name OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_write",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // read_write ::= WRITE OPERATOR_PARENTHESIS_L expression OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_write",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // valid_statement ::= valid_name func_call_parentheses 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valid_statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // valid_statement ::= valid_name inc_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valid_statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // func_call_parentheses ::= OPERATOR_PARENTHESIS_L expressions OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call_parentheses",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // func_call_parentheses ::= OPERATOR_PARENTHESIS_L OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call_parentheses",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // func_decl_parentheses ::= OPERATOR_PARENTHESIS_L parameter OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_decl_parentheses",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // func_decl_parentheses ::= OPERATOR_PARENTHESIS_L OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_decl_parentheses",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // func_decl_parentheses ::= OPERATOR_PARENTHESIS_L 
            {
              Object RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_decl_parentheses",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // func_decl_parentheses ::= OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_decl_parentheses",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expressions ::= expressions OPERATOR_SEPARATE expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expressions ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parameter ::= parameter OPERATOR_SEPARATE typed_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parameter ::= typed_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parameter ::= CONST typed_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // list_expression ::= OPERATOR_BRACKET_L expressions OPERATOR_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // list_expression ::= OPERATOR_BRACKET_L OPERATOR_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // assignments ::= OPERATOR_ASSIGNMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignments",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // assignments ::= OPERATOR_ASSIGNMENT_EQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignments",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // switch ::= SWITCH OPERATOR_PARENTHESIS_L switch_data_type OPERATOR_PARENTHESIS_R OPERATOR_BRACKET_L case_expressions DEFAULT OPERATOR_COLON expression OPERATOR_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // switch ::= SWITCH OPERATOR_PARENTHESIS_L switch_data_type OPERATOR_PARENTHESIS_R OPERATOR_BRACKET_L DEFAULT OPERATOR_COLON expression OPERATOR_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // switch ::= SWITCH OPERATOR_PARENTHESIS_L switch_data_type OPERATOR_PARENTHESIS_R OPERATOR_BRACKET_L case_expressions OPERATOR_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // switch ::= SWITCH OPERATOR_PARENTHESIS_L switch_data_type OPERATOR_PARENTHESIS_R OPERATOR_BRACKET_L OPERATOR_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // switch ::= SWITCH switch_error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // switch_error ::= OPERATOR_PARENTHESIS_L switch_data_type 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.MISSING_PARENTHESES); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_error",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // switch_error ::= OPERATOR_PARENTHESIS_L 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.MISSING_PARENTHESES); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_error",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // switch_error ::= OPERATOR_PARENTHESIS_L OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.MISSING_EXPRESSION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_error",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // switch_error ::= SWITCH OPERATOR_PARENTHESIS_L switch_data_type OPERATOR_PARENTHESIS_R OPERATOR_BRACKET_L case_expressions DEFAULT OPERATOR_COLON OPERATOR_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_error",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // switch_error ::= SWITCH OPERATOR_PARENTHESIS_L switch_data_type OPERATOR_PARENTHESIS_R OPERATOR_BRACKET_L DEFAULT OPERATOR_COLON OPERATOR_BRACKET_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_error",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // case_expressions ::= case_expressions case_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_expressions",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // case_expressions ::= case_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_expressions",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // case_expression ::= CASE switch_data_type OPERATOR_COLON expression BREAK OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // case_expression ::= CASE switch_data_type OPERATOR_COLON BREAK OPERATOR_END_LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // case_expression ::= CASE switch_data_type OPERATOR_COLON expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // case_expression ::= CASE switch_data_type OPERATOR_COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // case_expression ::= case_expression_error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // case_expression_error ::= CASE OPERATOR_COLON 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.MISSING_EXPRESSION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_expression_error",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // case_expression_error ::= CASE switch_data_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_expression_error",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // switch_data_type ::= LITERAL_DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_data_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // switch_data_type ::= LITERAL_CHARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_data_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // switch_data_type ::= LITERAL_STRING 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.INVALID_DATA_TYPE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_data_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // while_expression ::= WHILE OPERATOR_PARENTHESIS_L assignment_expression OPERATOR_PARENTHESIS_R brackets 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_expression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // while_expression ::= WHILE OPERATOR_PARENTHESIS_L OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_expression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // while_expression ::= WHILE error_detection_parentheses 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.MISSING_PARENTHESES); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_expression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // data_type ::= LONG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // data_type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // data_type ::= SHORT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // data_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // valid_name ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valid_name",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // valid_name ::= IDENTIFIER_ERROR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valid_name",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // typed_identifier ::= data_type valid_name 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typed_identifier",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // typed_identifier ::= valid_name 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.MISSING_DATA_TYPE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typed_identifier",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // if_expression ::= IF OPERATOR_PARENTHESIS_L assignment_expression OPERATOR_PARENTHESIS_R brackets else_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_expression",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // if_expression ::= IF OPERATOR_PARENTHESIS_L assignment_expression OPERATOR_PARENTHESIS_R brackets 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_expression",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // if_expression ::= IF error_detection_parentheses 
            {
              Object RESULT =null;
		 newSyntaxError(ErrorTypes.MISSING_PARENTHESES); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_expression",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // else_expression ::= ELSE if_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_expression",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // else_expression ::= ELSE brackets 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_expression",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // assignment_expression ::= valid_name assignments expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // assignment_expression ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expression ::= OPERATOR_NOT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expression ::= expression OPERATOR_COMPARATIVE expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expression ::= OPERATOR_NEGATIVE expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expression ::= expression math expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expression ::= OPERATOR_PARENTHESIS_L expression OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression ::= literals 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expression ::= valid_name 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expression ::= valid_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // inc_dec ::= OPERATOR_INC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inc_dec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // inc_dec ::= OPERATOR_DEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inc_dec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // math ::= OPERATOR_ADD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("math",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // math ::= OPERATOR_NEGATIVE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("math",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // math ::= OPERATOR_MULTIPLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("math",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // math ::= OPERATOR_DIVIDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("math",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // math ::= OPERATOR_REMAINDER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("math",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // literals ::= LITERAL_HEXA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // literals ::= LITERAL_OCTAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // literals ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // literals ::= LITERAL_DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // literals ::= LITERAL_CHARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // loop_words ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_words",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // loop_words ::= CONTINUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_words",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // error_detection_parentheses ::= OPERATOR_PARENTHESIS_L assignment_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_detection_parentheses",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // error_detection_parentheses ::= OPERATOR_PARENTHESIS_R 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_detection_parentheses",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
