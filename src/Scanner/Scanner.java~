/* The following code was generated by JFlex 1.4.3 on 22/05/21 16:51 */

package Scanner;

import java.util.*;
import Scanner.DataStructure.*;
import Scanner.Constants.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 22/05/21 16:51 from the specification file
 * <tt>src/Scanner/Regex.flex</tt>
 */
public class Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\16\1\17\26\0\1\64\1\20\2\0\1\60\1\66\1\31"+
    "\1\36\1\36\1\35\1\57\1\55\1\12\1\7\1\34\1\3\7\4"+
    "\2\2\1\67\1\56\1\63\1\61\1\62\1\32\1\0\4\6\1\11"+
    "\1\6\11\13\1\50\12\13\1\71\1\30\1\71\1\70\1\47\1\0"+
    "\1\21\1\22\1\42\1\1\1\10\1\23\1\53\1\33\1\40\1\13"+
    "\1\51\1\52\1\54\1\24\1\41\1\46\1\13\1\25\1\15\1\26"+
    "\1\37\1\27\1\43\1\5\1\45\1\44\1\72\1\65\1\72\1\73"+
    "\101\0\100\14\uff00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\2\4\1\3\1\5\1\3\1\6"+
    "\1\1\2\7\1\10\6\3\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\4\3\1\2\2\3\1\17\1\20\1\21"+
    "\1\22\1\23\3\13\3\24\1\25\1\26\1\24\1\3"+
    "\1\27\2\0\1\30\1\0\3\3\1\31\1\23\1\32"+
    "\4\3\1\33\1\0\7\3\1\12\1\0\2\12\1\34"+
    "\1\7\1\35\1\3\1\36\4\3\1\0\1\3\1\37"+
    "\2\3\1\40\2\41\1\0\1\42\13\3\1\27\6\3"+
    "\3\12\1\34\2\0\2\3\1\43\3\3\1\0\3\3"+
    "\1\44\1\3\1\45\11\3\3\12\5\3\1\0\11\3"+
    "\1\46\1\3\1\0\1\47\3\3\1\0\2\3\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[169];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\74\0\u0168"+
    "\0\u01a4\0\u01e0\0\u021c\0\74\0\u0258\0\u0294\0\u02d0\0\u030c"+
    "\0\u0348\0\u0384\0\u03c0\0\74\0\u03fc\0\74\0\u0438\0\u0474"+
    "\0\74\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618"+
    "\0\74\0\74\0\u0654\0\74\0\u0690\0\u06cc\0\u0708\0\u0690"+
    "\0\u0744\0\u0780\0\u0474\0\74\0\74\0\74\0\u07bc\0\u07f8"+
    "\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u099c\0\74"+
    "\0\74\0\74\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0ac8"+
    "\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8"+
    "\0\u0ce4\0\u0d20\0\u0d5c\0\74\0\u0d98\0\u0dd4\0\u0e10\0\u012c"+
    "\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\74\0\u0fb4"+
    "\0\u0ff0\0\u102c\0\u1068\0\74\0\u10a4\0\u10e0\0\u111c\0\u1158"+
    "\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338"+
    "\0\u1374\0\u012c\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc"+
    "\0\u1518\0\u1554\0\u1590\0\u0ce4\0\u15cc\0\u1608\0\u1644\0\u1680"+
    "\0\u012c\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824"+
    "\0\u1860\0\u189c\0\u012c\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8"+
    "\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\74\0\u1af4\0\u1b30\0\u1b6c"+
    "\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c"+
    "\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u012c\0\u1ef0"+
    "\0\u1f2c\0\u012c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094"+
    "\0\74";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[169];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\4\2\6\1\7\1\10"+
    "\1\6\1\11\1\6\1\12\1\13\2\14\1\15\1\16"+
    "\1\17\1\20\1\6\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\6\1\27\1\30\1\31\1\32\1\33\1\6"+
    "\1\34\1\35\3\6\1\36\2\6\1\37\1\40\1\6"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\26\1\53\1\54\1\55\1\56\75\0"+
    "\1\6\3\0\2\6\1\0\1\57\1\6\1\0\1\6"+
    "\1\12\1\6\3\0\7\6\3\0\1\6\3\0\2\6"+
    "\1\60\5\6\1\0\5\6\21\0\3\4\2\0\1\61"+
    "\2\62\66\0\1\63\1\64\1\0\1\61\2\62\63\0"+
    "\1\6\3\0\2\6\1\0\2\6\1\0\1\6\1\12"+
    "\1\6\3\0\7\6\3\0\1\6\3\0\10\6\1\0"+
    "\5\6\20\0\1\6\3\0\1\65\1\6\1\0\2\6"+
    "\1\0\1\6\1\12\1\6\3\0\3\6\1\66\3\6"+
    "\3\0\1\6\3\0\10\6\1\0\2\6\1\67\2\6"+
    "\31\0\1\70\46\0\1\71\1\72\12\0\1\12\3\0"+
    "\2\12\1\0\2\12\1\0\3\12\3\0\7\12\3\0"+
    "\1\12\3\0\10\12\1\0\5\12\20\0\1\6\3\0"+
    "\2\6\1\0\2\6\1\0\1\6\1\12\1\6\3\0"+
    "\5\6\1\73\1\6\3\0\1\74\3\0\1\6\1\75"+
    "\2\6\1\76\3\6\1\0\5\6\17\0\17\15\1\0"+
    "\1\77\15\15\1\100\35\15\1\0\1\6\3\0\2\6"+
    "\1\0\2\6\1\0\1\6\1\12\1\6\3\0\7\6"+
    "\3\0\1\6\3\0\1\101\7\6\1\0\5\6\20\0"+
    "\1\6\3\0\2\6\1\0\2\6\1\0\1\6\1\12"+
    "\1\6\3\0\4\6\1\102\2\6\3\0\1\6\3\0"+
    "\10\6\1\0\5\6\20\0\1\6\3\0\2\6\1\0"+
    "\2\6\1\0\1\6\1\12\1\6\3\0\7\6\3\0"+
    "\1\6\3\0\2\6\1\103\5\6\1\0\2\6\1\104"+
    "\2\6\20\0\1\6\3\0\2\6\1\0\1\105\1\6"+
    "\1\0\1\6\1\12\1\6\3\0\7\6\3\0\1\6"+
    "\3\0\10\6\1\0\5\6\20\0\1\6\3\0\2\6"+
    "\1\0\2\6\1\0\1\6\1\12\1\6\3\0\7\6"+
    "\3\0\1\6\3\0\6\6\1\106\1\6\1\0\5\6"+
    "\20\0\1\6\3\0\2\6\1\0\2\6\1\0\1\6"+
    "\1\12\1\6\3\0\7\6\3\0\1\6\3\0\2\6"+
    "\1\107\5\6\1\0\5\6\17\0\17\110\1\111\1\112"+
    "\7\110\1\113\1\114\4\110\1\111\35\110\34\0\1\115"+
    "\1\116\23\0\1\71\73\0\1\71\13\0\1\6\3\0"+
    "\2\6\1\0\2\6\1\0\1\6\1\12\1\6\3\0"+
    "\3\6\1\117\3\6\3\0\1\6\3\0\10\6\1\0"+
    "\5\6\20\0\1\6\3\0\2\6\1\0\2\6\1\0"+
    "\1\6\1\12\1\6\3\0\2\6\1\120\1\121\3\6"+
    "\3\0\1\6\3\0\10\6\1\0\5\6\20\0\1\6"+
    "\3\0\2\6\1\0\2\6\1\0\1\6\1\12\1\6"+
    "\3\0\1\67\6\6\3\0\1\122\3\0\2\6\1\123"+
    "\5\6\1\0\5\6\20\0\1\6\3\0\2\6\1\0"+
    "\2\6\1\0\1\6\1\12\1\6\3\0\7\6\3\0"+
    "\1\124\3\0\10\6\1\0\5\6\67\0\1\125\24\0"+
    "\1\6\3\0\2\6\1\0\2\6\1\0\1\6\1\12"+
    "\1\6\3\0\7\6\3\0\1\6\3\0\2\6\1\126"+
    "\5\6\1\0\5\6\20\0\1\6\3\0\2\6\1\0"+
    "\2\6\1\0\1\6\1\12\1\6\3\0\7\6\3\0"+
    "\1\6\3\0\2\6\1\101\5\6\1\0\5\6\76\0"+
    "\1\127\1\0\1\71\73\0\1\26\73\0\1\26\1\53"+
    "\72\0\1\26\1\0\1\53\71\0\1\71\3\0\1\26"+
    "\67\0\1\71\4\0\1\26\6\0\1\6\3\0\2\6"+
    "\1\0\2\6\1\0\1\6\1\12\1\6\3\0\2\6"+
    "\1\130\4\6\3\0\1\6\3\0\10\6\1\0\5\6"+
    "\20\0\1\6\3\0\2\6\1\0\2\6\1\0\1\6"+
    "\1\12\1\6\3\0\7\6\3\0\1\6\3\0\1\131"+
    "\7\6\1\0\5\6\21\0\3\132\71\0\1\133\1\134"+
    "\1\133\5\0\1\135\64\0\2\63\71\0\1\136\1\0"+
    "\1\136\1\0\1\136\2\0\1\136\63\0\1\6\3\0"+
    "\2\6\1\0\2\6\1\0\1\6\1\12\1\6\3\0"+
    "\5\6\1\137\1\6\3\0\1\6\3\0\10\6\1\0"+
    "\5\6\20\0\1\6\3\0\2\6\1\0\2\6\1\0"+
    "\1\6\1\12\1\6\3\0\7\6\3\0\1\6\3\0"+
    "\1\140\7\6\1\0\5\6\20\0\1\6\3\0\2\6"+
    "\1\0\2\6\1\0\1\6\1\12\1\141\3\0\7\6"+
    "\3\0\1\6\3\0\10\6\1\0\5\6\20\0\1\6"+
    "\3\0\2\6\1\0\2\6\1\0\1\6\1\12\1\6"+
    "\3\0\1\142\3\6\1\143\2\6\3\0\1\6\3\0"+
    "\10\6\1\0\5\6\20\0\1\6\3\0\2\6\1\0"+
    "\2\6\1\0\1\6\1\12\1\6\3\0\7\6\3\0"+
    "\1\6\3\0\2\6\1\144\5\6\1\0\5\6\20\0"+
    "\1\6\3\0\2\6\1\0\2\6\1\0\1\6\1\12"+
    "\1\6\3\0\7\6\3\0\1\6\3\0\5\6\1\145"+
    "\2\6\1\0\3\6\1\146\1\6\20\0\1\6\3\0"+
    "\2\6\1\0\2\6\1\0\1\6\1\12\1\6\3\0"+
    "\7\6\3\0\1\6\3\0\1\6\1\147\6\6\1\0"+
    "\5\6\17\0\17\100\1\0\1\77\53\100\1\0\1\6"+
    "\3\0\2\6\1\0\2\6\1\0\1\6\1\12\1\6"+
    "\3\0\5\6\1\150\1\6\3\0\1\6\3\0\10\6"+
    "\1\0\5\6\20\0\1\6\3\0\2\6\1\0\1\151"+
    "\1\6\1\0\1\6\1\12\1\6\3\0\7\6\3\0"+
    "\1\6\3\0\10\6\1\0\5\6\20\0\1\6\3\0"+
    "\2\6\1\0\2\6\1\0\1\6\1\12\1\6\3\0"+
    "\4\6\1\152\2\6\3\0\1\6\3\0\10\6\1\0"+
    "\5\6\20\0\1\6\3\0\2\6\1\0\2\6\1\0"+
    "\1\6\1\12\1\6\3\0\7\6\3\0\1\6\3\0"+
    "\2\6\1\153\5\6\1\0\5\6\20\0\1\6\3\0"+
    "\2\6\1\0\2\6\1\0\1\6\1\12\1\6\3\0"+
    "\5\6\1\154\1\6\3\0\1\6\3\0\10\6\1\0"+
    "\3\6\1\155\1\6\20\0\1\6\3\0\2\6\1\0"+
    "\2\6\1\0\1\6\1\12\1\6\3\0\7\6\3\0"+
    "\1\6\3\0\7\6\1\156\1\0\5\6\20\0\1\6"+
    "\3\0\2\6\1\0\2\6\1\0\1\6\1\12\1\6"+
    "\3\0\7\6\3\0\1\6\3\0\1\6\1\157\6\6"+
    "\1\0\2\6\1\160\2\6\17\0\17\161\1\0\11\161"+
    "\1\114\4\161\1\0\35\161\31\0\1\114\42\0\17\161"+
    "\1\0\11\161\1\0\4\161\1\0\40\161\1\110\1\161"+
    "\1\162\11\161\1\0\4\110\1\163\4\110\1\164\1\110"+
    "\3\161\1\0\35\161\17\115\1\0\54\115\34\116\1\165"+
    "\1\166\1\165\35\116\1\0\1\6\3\0\2\6\1\0"+
    "\2\6\1\0\1\6\1\12\1\167\3\0\7\6\3\0"+
    "\1\6\3\0\1\6\1\170\6\6\1\0\5\6\20\0"+
    "\1\6\3\0\2\6\1\0\2\6\1\0\1\6\1\12"+
    "\1\6\3\0\5\6\1\171\1\6\3\0\1\6\3\0"+
    "\10\6\1\0\5\6\20\0\1\6\3\0\2\6\1\0"+
    "\2\6\1\0\1\6\1\12\1\6\3\0\1\172\6\6"+
    "\3\0\1\6\3\0\10\6\1\0\5\6\20\0\1\6"+
    "\3\0\2\6\1\0\2\6\1\0\1\6\1\12\1\6"+
    "\3\0\3\6\1\173\3\6\3\0\1\6\3\0\10\6"+
    "\1\0\5\6\20\0\1\6\3\0\2\6\1\0\2\6"+
    "\1\0\1\6\1\12\1\6\3\0\7\6\3\0\1\6"+
    "\3\0\1\6\1\174\6\6\1\0\5\6\40\0\1\175"+
    "\53\0\1\6\3\0\2\6\1\0\2\6\1\0\1\6"+
    "\1\12\1\6\3\0\3\6\1\176\3\6\3\0\1\6"+
    "\3\0\10\6\1\0\5\6\20\0\1\6\3\0\2\6"+
    "\1\0\2\6\1\0\1\6\1\12\1\6\3\0\1\177"+
    "\6\6\3\0\1\6\3\0\10\6\1\0\5\6\20\0"+
    "\1\6\3\0\2\6\1\0\2\6\1\0\1\6\1\12"+
    "\1\6\3\0\1\6\1\200\5\6\3\0\1\6\3\0"+
    "\10\6\1\0\5\6\21\0\3\132\2\0\1\201\2\62"+
    "\64\0\3\133\71\0\1\133\1\134\1\133\71\0\3\136"+
    "\1\0\1\136\2\0\1\136\63\0\1\6\3\0\2\6"+
    "\1\0\1\202\1\6\1\0\1\6\1\12\1\6\3\0"+
    "\7\6\3\0\1\6\3\0\10\6\1\0\5\6\20\0"+
    "\1\6\3\0\2\6\1\0\2\6\1\0\1\6\1\12"+
    "\1\6\3\0\7\6\3\0\1\6\3\0\10\6\1\0"+
    "\4\6\1\203\20\0\1\6\3\0\2\6\1\0\1\120"+
    "\1\6\1\0\1\6\1\12\1\6\3\0\7\6\3\0"+
    "\1\6\3\0\10\6\1\0\5\6\20\0\1\6\3\0"+
    "\2\6\1\0\2\6\1\0\1\6\1\12\1\6\3\0"+
    "\5\6\1\204\1\6\3\0\1\6\3\0\10\6\1\0"+
    "\5\6\20\0\1\6\3\0\2\6\1\0\2\6\1\0"+
    "\1\6\1\12\1\6\3\0\7\6\3\0\1\6\3\0"+
    "\1\205\7\6\1\0\5\6\20\0\1\6\3\0\2\6"+
    "\1\0\2\6\1\0\1\6\1\12\1\6\3\0\4\6"+
    "\1\121\2\6\3\0\1\6\3\0\10\6\1\0\5\6"+
    "\20\0\1\6\3\0\2\6\1\0\1\206\1\6\1\0"+
    "\1\6\1\12\1\6\3\0\7\6\3\0\1\6\3\0"+
    "\10\6\1\0\5\6\20\0\1\6\3\0\2\6\1\0"+
    "\2\6\1\0\1\6\1\12\1\6\3\0\3\6\1\207"+
    "\3\6\3\0\1\6\3\0\10\6\1\0\5\6\20\0"+
    "\1\6\3\0\2\6\1\0\2\6\1\0\1\6\1\12"+
    "\1\6\3\0\5\6\1\210\1\6\3\0\1\6\3\0"+
    "\10\6\1\0\5\6\20\0\1\6\3\0\2\6\1\0"+
    "\2\6\1\0\1\6\1\12\1\6\3\0\7\6\3\0"+
    "\1\6\3\0\2\6\1\120\5\6\1\0\5\6\20\0"+
    "\1\6\3\0\2\6\1\0\2\6\1\0\1\6\1\12"+
    "\1\6\3\0\1\211\6\6\3\0\1\6\3\0\10\6"+
    "\1\0\5\6\20\0\1\6\3\0\2\6\1\0\2\6"+
    "\1\0\1\6\1\12\1\6\3\0\1\121\6\6\3\0"+
    "\1\6\3\0\10\6\1\0\5\6\20\0\1\6\3\0"+
    "\2\6\1\0\2\6\1\0\1\6\1\12\1\6\3\0"+
    "\7\6\3\0\1\6\3\0\1\202\7\6\1\0\5\6"+
    "\20\0\1\6\3\0\2\6\1\0\2\6\1\0\1\6"+
    "\1\12\1\6\3\0\7\6\3\0\1\6\3\0\1\6"+
    "\1\212\6\6\1\0\5\6\20\0\1\6\3\0\2\6"+
    "\1\0\1\213\1\6\1\0\1\6\1\12\1\6\3\0"+
    "\7\6\3\0\1\6\3\0\10\6\1\0\5\6\20\0"+
    "\1\171\3\0\2\6\1\0\2\6\1\0\1\6\1\12"+
    "\1\6\3\0\7\6\3\0\1\6\3\0\10\6\1\0"+
    "\5\6\20\0\1\6\3\0\2\6\1\0\2\6\1\0"+
    "\1\6\1\12\1\6\3\0\1\214\6\6\3\0\1\6"+
    "\3\0\10\6\1\0\5\6\17\0\17\161\1\0\11\161"+
    "\1\215\4\161\1\0\54\161\1\0\11\161\1\215\1\161"+
    "\1\216\2\161\1\0\54\161\1\0\4\161\1\217\4\161"+
    "\1\114\4\161\1\0\35\161\35\165\1\166\72\165\1\14"+
    "\1\166\36\165\1\0\1\6\3\0\2\6\1\0\2\6"+
    "\1\0\1\6\1\12\1\6\3\0\7\6\3\0\1\6"+
    "\3\0\1\6\1\220\6\6\1\0\5\6\20\0\1\6"+
    "\3\0\2\6\1\0\2\6\1\0\1\6\1\12\1\6"+
    "\3\0\7\6\3\0\1\6\3\0\2\6\1\221\5\6"+
    "\1\0\5\6\20\0\1\6\3\0\2\6\1\0\2\6"+
    "\1\0\1\6\1\12\1\6\3\0\4\6\1\171\2\6"+
    "\3\0\1\6\3\0\10\6\1\0\5\6\20\0\1\6"+
    "\3\0\2\6\1\0\2\6\1\0\1\6\1\12\1\222"+
    "\3\0\5\6\1\223\1\6\3\0\1\6\3\0\10\6"+
    "\1\0\5\6\20\0\1\6\3\0\2\6\1\0\2\6"+
    "\1\0\1\6\1\12\1\6\3\0\7\6\3\0\1\6"+
    "\3\0\10\6\1\0\2\6\1\224\2\6\61\0\1\225"+
    "\32\0\1\6\3\0\2\6\1\0\2\6\1\0\1\6"+
    "\1\12\1\6\3\0\7\6\3\0\1\6\3\0\10\6"+
    "\1\0\3\6\1\171\1\6\20\0\1\6\3\0\2\6"+
    "\1\0\2\6\1\0\1\6\1\12\1\6\3\0\7\6"+
    "\3\0\1\6\3\0\1\226\7\6\1\0\5\6\20\0"+
    "\1\6\3\0\2\6\1\0\2\6\1\0\1\6\1\12"+
    "\1\6\3\0\7\6\3\0\1\6\3\0\10\6\1\0"+
    "\2\6\1\227\2\6\20\0\1\201\5\0\1\201\65\0"+
    "\1\6\3\0\2\6\1\0\2\6\1\0\1\6\1\12"+
    "\1\6\3\0\4\6\1\221\2\6\3\0\1\6\3\0"+
    "\10\6\1\0\5\6\20\0\1\6\3\0\2\6\1\0"+
    "\2\6\1\0\1\6\1\12\1\6\3\0\7\6\3\0"+
    "\1\6\3\0\1\6\1\230\6\6\1\0\5\6\20\0"+
    "\1\6\3\0\2\6\1\0\2\6\1\0\1\6\1\12"+
    "\1\6\3\0\7\6\3\0\1\6\3\0\3\6\1\222"+
    "\4\6\1\0\5\6\20\0\1\6\3\0\2\6\1\0"+
    "\2\6\1\0\1\6\1\12\1\6\3\0\7\6\3\0"+
    "\1\6\3\0\2\6\1\231\5\6\1\0\5\6\20\0"+
    "\1\6\3\0\2\6\1\0\1\232\1\6\1\0\1\6"+
    "\1\12\1\6\3\0\7\6\3\0\1\6\3\0\10\6"+
    "\1\0\5\6\20\0\1\6\3\0\2\6\1\0\2\6"+
    "\1\0\1\6\1\12\1\6\3\0\7\6\3\0\1\6"+
    "\3\0\3\6\1\233\4\6\1\0\5\6\20\0\1\6"+
    "\3\0\2\6\1\0\2\6\1\0\1\6\1\12\1\6"+
    "\3\0\7\6\3\0\1\6\3\0\10\6\1\0\1\6"+
    "\1\152\3\6\20\0\1\6\3\0\2\6\1\0\2\6"+
    "\1\0\1\6\1\12\1\234\3\0\7\6\3\0\1\6"+
    "\3\0\10\6\1\0\5\6\20\0\1\235\3\0\2\6"+
    "\1\0\2\6\1\0\1\6\1\12\1\6\3\0\7\6"+
    "\3\0\1\6\3\0\10\6\1\0\5\6\20\0\1\6"+
    "\3\0\2\6\1\0\2\6\1\0\1\6\1\12\1\6"+
    "\3\0\5\6\1\236\1\6\3\0\1\6\3\0\10\6"+
    "\1\0\5\6\17\0\17\161\1\0\11\161\1\215\1\161"+
    "\1\110\2\161\1\0\54\161\1\0\4\161\1\110\4\161"+
    "\1\215\4\161\1\0\35\161\1\0\1\6\3\0\2\6"+
    "\1\0\2\6\1\0\1\6\1\12\1\6\3\0\7\6"+
    "\3\0\1\6\3\0\10\6\1\0\3\6\1\146\1\6"+
    "\20\0\1\6\3\0\2\6\1\0\2\6\1\0\1\6"+
    "\1\12\1\6\3\0\3\6\1\237\3\6\3\0\1\6"+
    "\3\0\10\6\1\0\5\6\20\0\1\6\3\0\2\6"+
    "\1\0\2\6\1\0\1\6\1\12\1\6\3\0\5\6"+
    "\1\237\1\6\3\0\1\6\3\0\10\6\1\0\5\6"+
    "\20\0\1\6\3\0\2\6\1\0\2\6\1\0\1\6"+
    "\1\12\1\6\3\0\7\6\3\0\1\6\3\0\1\6"+
    "\1\240\6\6\1\0\5\6\20\0\1\6\3\0\2\6"+
    "\1\0\1\152\1\6\1\0\1\6\1\12\1\6\3\0"+
    "\7\6\3\0\1\6\3\0\10\6\1\0\5\6\70\0"+
    "\1\241\23\0\1\6\3\0\2\6\1\0\2\6\1\0"+
    "\1\6\1\12\1\6\3\0\7\6\3\0\1\6\3\0"+
    "\10\6\1\0\2\6\1\222\2\6\20\0\1\6\3\0"+
    "\2\6\1\0\1\171\1\6\1\0\1\6\1\12\1\6"+
    "\3\0\7\6\3\0\1\6\3\0\10\6\1\0\5\6"+
    "\20\0\1\6\3\0\2\6\1\0\2\6\1\0\1\6"+
    "\1\12\1\6\3\0\7\6\3\0\1\6\3\0\3\6"+
    "\1\242\4\6\1\0\5\6\20\0\1\6\3\0\2\6"+
    "\1\0\2\6\1\0\1\6\1\12\1\6\3\0\2\6"+
    "\1\237\4\6\3\0\1\6\3\0\10\6\1\0\5\6"+
    "\20\0\1\242\3\0\2\6\1\0\2\6\1\0\1\6"+
    "\1\12\1\6\3\0\7\6\3\0\1\6\3\0\10\6"+
    "\1\0\5\6\20\0\1\6\3\0\2\6\1\0\2\6"+
    "\1\0\1\6\1\12\1\6\3\0\7\6\3\0\1\237"+
    "\3\0\10\6\1\0\5\6\20\0\1\6\3\0\2\6"+
    "\1\0\2\6\1\0\1\6\1\12\1\6\3\0\5\6"+
    "\1\243\1\6\3\0\1\6\3\0\10\6\1\0\5\6"+
    "\20\0\1\6\3\0\2\6\1\0\1\231\1\6\1\0"+
    "\1\6\1\12\1\6\3\0\7\6\3\0\1\6\3\0"+
    "\10\6\1\0\5\6\20\0\1\6\3\0\2\6\1\0"+
    "\2\6\1\0\1\6\1\12\1\6\3\0\7\6\3\0"+
    "\1\6\3\0\1\6\1\244\6\6\1\0\5\6\20\0"+
    "\1\6\3\0\2\6\1\0\2\6\1\0\1\6\1\12"+
    "\1\6\3\0\3\6\1\245\3\6\3\0\1\6\3\0"+
    "\10\6\1\0\5\6\27\0\1\246\64\0\1\6\3\0"+
    "\2\6\1\0\1\247\1\6\1\0\1\6\1\12\1\6"+
    "\3\0\7\6\3\0\1\6\3\0\10\6\1\0\5\6"+
    "\20\0\1\6\3\0\2\6\1\0\2\6\1\0\1\6"+
    "\1\12\1\6\3\0\7\6\3\0\1\6\3\0\10\6"+
    "\1\0\2\6\1\250\2\6\20\0\1\6\3\0\2\6"+
    "\1\0\2\6\1\0\1\6\1\12\1\6\3\0\7\6"+
    "\3\0\1\6\3\0\1\224\7\6\1\0\5\6\20\0"+
    "\1\251\73\0\1\6\3\0\2\6\1\0\2\6\1\0"+
    "\1\6\1\12\1\6\3\0\4\6\1\237\2\6\3\0"+
    "\1\6\3\0\10\6\1\0\5\6\20\0\1\6\3\0"+
    "\2\6\1\0\1\242\1\6\1\0\1\6\1\12\1\6"+
    "\3\0\7\6\3\0\1\6\3\0\10\6\1\0\5\6"+
    "\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\4\1\1\11\4\1\1\11\7\1\1\11"+
    "\1\1\1\11\2\1\1\11\7\1\2\11\1\1\1\11"+
    "\7\1\3\11\2\1\2\0\1\1\1\0\3\1\3\11"+
    "\5\1\1\0\10\1\1\0\2\1\1\11\10\1\1\0"+
    "\1\1\1\11\4\1\1\11\1\0\27\1\2\0\6\1"+
    "\1\0\17\1\1\11\7\1\1\0\13\1\1\0\4\1"+
    "\1\0\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[169];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
private Structure data = new Structure();
private Structure errors = new Structure();

public Structure getData() {
    return this.data;
}

public Structure getErrors() {
    return this.errors;
}

/**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   */
  public void readFile(String argv) {

        String encodingName = "UTF-8";

        try {
            java.io.FileInputStream stream = new java.io.FileInputStream(argv);
            this.zzReader = new java.io.InputStreamReader(stream, encodingName);

            while (!this.zzAtEOF) this.yylex();

          } catch (java.io.FileNotFoundException e) {
            System.out.println("File not found : " + argv + "");
          } catch (java.io.IOException e) {
            System.out.println("IO error scanning file " + argv + "");
            System.out.println(e);
          } catch (Exception e) {
            System.out.println("Unexpected exception:");
            e.printStackTrace();
        }
      }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 146) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { data.addData(yytext(), Types.OPERATOR_CONTINUE_LINE, yyline);
          }
        case 40: break;
        case 27: 
          { data.addData(yytext(), Types.LITERAL_STRING, yyline);
          }
        case 41: break;
        case 4: 
          { data.addData(yytext(), Types.LITERAL_DECIMAL, yyline);
          }
        case 42: break;
        case 2: 
          { errors.addData(yytext(), Types.UNKNOWN_ERROR, yyline);
          }
        case 43: break;
        case 24: 
          { data.addData(yytext(), Types.LITERAL_OCTAL, yyline);
          }
        case 44: break;
        case 32: 
          { data.addData(yytext(), Types.LITERAL_FLOAT, yyline);
          }
        case 45: break;
        case 17: 
          { data.addData(yytext(), Types.OPERATOR_ADD, yyline);
          }
        case 46: break;
        case 19: 
          { data.addData(yytext(), Types.OPERATOR_ASSIGNMENT, yyline);
          }
        case 47: break;
        case 18: 
          { data.addData(yytext(), Types.OPERATOR_REMAINDER, yyline);
          }
        case 48: break;
        case 5: 
          { data.addData(yytext(), Types.OPERATOR_DOT, yyline);
          }
        case 49: break;
        case 1: 
          { errors.addData(yytext(), Types.IDENTIFIER_ERROR, yyline);
          }
        case 50: break;
        case 23: 
          { data.addData(yytext(), Types.RESERVED_LOOP, yyline);
          }
        case 51: break;
        case 39: 
          { data.addData(yytext(), Types.RESERVED_MODIFIER, yyline);
          }
        case 52: break;
        case 37: 
          { data.addData(yytext(), Types.RESERVED_ENUM, yyline);
          }
        case 53: break;
        case 25: 
          { data.addData(yytext(), Types.OPERATOR_DEC, yyline);
          }
        case 54: break;
        case 16: 
          { data.addData(yytext(), Types.OPERATOR_END_LINE, yyline);
          }
        case 55: break;
        case 30: 
          { data.addData(yytext(), Types.RESERVED_CONDITION, yyline);
          }
        case 56: break;
        case 21: 
          { data.addData(yytext(), Types.OPERATOR_SQ_BRACKET, yyline);
          }
        case 57: break;
        case 8: 
          { errors.addData(yytext(), Types.STRING_ERROR, yyline);
          }
        case 58: break;
        case 38: 
          { data.addData(yytext(), Types.RESERVED_WORDS, yyline);
          }
        case 59: break;
        case 14: 
          { data.addData(yytext(), Types.OPERATOR_PARENTHESIS, yyline);
          }
        case 60: break;
        case 7: 
          { /* DO NOTHING */
          }
        case 61: break;
        case 28: 
          { data.addData(yytext(), Types.LITERAL_CHARACTER, yyline);
          }
        case 62: break;
        case 3: 
          { data.addData(yytext(), Types.IDENTIFIER, yyline);
          }
        case 63: break;
        case 20: 
          { data.addData(yytext(), Types.OPERATOR_BINARY, yyline);
          }
        case 64: break;
        case 15: 
          { data.addData(yytext(), Types.OPERATOR_SEPARATE, yyline);
          }
        case 65: break;
        case 22: 
          { data.addData(yytext(), Types.OPERATOR_BRACKET, yyline);
          }
        case 66: break;
        case 12: 
          { data.addData(yytext(), Types.OPERATOR_DIVIDE, yyline);
          }
        case 67: break;
        case 31: 
          { data.addData(yytext(), Types.OPERATOR_INC, yyline);
          }
        case 68: break;
        case 13: 
          { data.addData(yytext(), Types.OPERATOR_MULTIPLY, yyline);
          }
        case 69: break;
        case 29: 
          { errors.addData(yytext(), Types.COMMENTS_ERROR, yyline);
          }
        case 70: break;
        case 26: 
          { data.addData(yytext(), Types.OPERATOR_MEMORY, yyline);
          }
        case 71: break;
        case 33: 
          { data.addData(yytext(), Types.LITERAL_EXPONENTIAL_FLOAT, yyline);
          }
        case 72: break;
        case 36: 
          { errors.addData(yytext(), Types.FLOAT_MANY_DOTS_ERROR, yyline);
          }
        case 73: break;
        case 11: 
          { data.addData(yytext(), Types.OPERATOR_BOOLEAN, yyline);
          }
        case 74: break;
        case 6: 
          { data.addData(yytext(), Types.OPERATOR_NEGATIVE, yyline);
          }
        case 75: break;
        case 10: 
          { errors.addData(yytext(), Types.CHARACTER_ERROR, yyline);
          }
        case 76: break;
        case 34: 
          { data.addData(yytext(), Types.LITERAL_HEXA, yyline);
          }
        case 77: break;
        case 35: 
          { data.addData(yytext(), Types.RESERVED_DATA_TYPE, yyline);
          }
        case 78: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          scanner = new Scanner( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
