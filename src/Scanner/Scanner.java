/* The following code was generated by JFlex 1.4.3 on 5/26/21 3:45 PM */

package Scanner;

import java.util.*;
import Scanner.DataStructure.*;
import Scanner.Constants.*;

import java_cup.runtime.Symbol;

import Parser.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/26/21 3:45 PM from the specification file
 * <tt>src/Scanner/Regex.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 30, 14,  0, 30, 13,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    30, 55, 15,  0,  0, 49, 54, 24, 57, 29, 28, 48, 46, 10,  7, 27, 
     3,  4,  4,  4,  4,  4,  4,  4,  2,  2, 56, 47, 52, 50, 51, 25, 
     0,  6,  6,  6,  6,  9,  6, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
    40, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 58, 23, 58, 60, 39, 
     0, 16, 17, 36,  1,  8, 18, 42, 26, 32, 11, 41, 45, 43, 19, 34, 
    38, 11, 20, 31, 21, 35, 22, 44,  5, 37, 33, 59, 53, 59, 60,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
    12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
    12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
    12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\2\4\1\3\1\5\1\3\1\6"+
    "\1\1\2\7\1\10\6\3\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\4\3\1\2\3\3\1\17\1\20\1\21"+
    "\1\22\1\23\2\24\2\25\1\26\1\27\1\30\1\31"+
    "\1\25\1\3\1\32\1\0\1\1\1\0\1\33\1\1"+
    "\3\3\1\34\1\35\1\36\1\37\1\0\7\3\1\12"+
    "\1\0\2\12\1\40\1\7\1\41\1\42\4\3\1\43"+
    "\5\3\1\0\2\3\1\44\1\24\2\3\1\45\2\46"+
    "\1\0\1\47\5\3\1\50\6\3\3\12\1\40\2\0"+
    "\6\3\1\51\5\3\1\0\4\3\1\52\1\0\2\46"+
    "\1\3\1\53\1\54\1\55\5\3\1\56\1\3\3\12"+
    "\10\3\1\57\1\60\2\3\1\0\1\3\1\61\2\3"+
    "\1\62\1\63\6\3\1\64\3\3\1\65\1\3\1\66"+
    "\1\0\1\67\1\3\1\70\3\3\1\71\1\72\1\73"+
    "\1\3\1\0\1\74\3\3\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\75\0\u016e"+
    "\0\u01ab\0\u01e8\0\u0225\0\75\0\u0262\0\u029f\0\u02dc\0\u0319"+
    "\0\u0356\0\u0393\0\u03d0\0\75\0\u040d\0\75\0\u044a\0\u0487"+
    "\0\75\0\u04c4\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632"+
    "\0\u066f\0\75\0\75\0\u06ac\0\75\0\u06e9\0\u0726\0\u0763"+
    "\0\u07a0\0\u07dd\0\u081a\0\75\0\75\0\75\0\75\0\u0857"+
    "\0\u0894\0\u08d1\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02\0\u0a3f"+
    "\0\u0a7c\0\75\0\75\0\75\0\u0ab9\0\u0ab9\0\u0af6\0\u0b33"+
    "\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b"+
    "\0\u0d58\0\75\0\u0d95\0\u0dd2\0\75\0\u0e0f\0\u0e4c\0\u0e89"+
    "\0\u0ec6\0\u0131\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034"+
    "\0\u1071\0\u10ae\0\75\0\75\0\u10eb\0\u1128\0\u1165\0\u11a2"+
    "\0\u01e8\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d"+
    "\0\u0131\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8"+
    "\0\u1535\0\u1572\0\u0cde\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3"+
    "\0\u16e0\0\u171d\0\u175a\0\u0131\0\u1797\0\u17d4\0\u1811\0\u184e"+
    "\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36"+
    "\0\u1a73\0\75\0\u1ab0\0\u0131\0\u0131\0\u0131\0\u1aed\0\u1b2a"+
    "\0\u1b67\0\u1ba4\0\u1be1\0\u0131\0\u1c1e\0\75\0\u1c5b\0\u1c98"+
    "\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80"+
    "\0\u0131\0\u0131\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u0131\0\u1fb1"+
    "\0\u1fee\0\u0131\0\u0131\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f"+
    "\0\u215c\0\u0131\0\u2199\0\u21d6\0\u2213\0\u0131\0\u2250\0\u0131"+
    "\0\u228d\0\u0131\0\u22ca\0\u0131\0\u2307\0\u2344\0\u2381\0\u0131"+
    "\0\u0131\0\u0131\0\u23be\0\u23fb\0\u0131\0\u2438\0\u2475\0\u24b2"+
    "\0\75";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\4\2\6\1\7\1\10"+
    "\1\6\1\11\1\6\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\6\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\6\1\27\1\30\1\31\1\14\1\32\1\33"+
    "\2\6\1\34\1\35\2\6\1\36\2\6\1\37\1\6"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\26\1\54\1\55\1\56"+
    "\1\57\76\0\6\6\1\0\1\60\1\6\1\0\1\6"+
    "\1\12\3\0\7\6\3\0\1\6\4\0\3\6\1\61"+
    "\4\6\1\0\6\6\20\0\1\12\3\4\2\12\1\62"+
    "\2\63\1\0\2\12\3\0\7\12\3\0\1\12\4\0"+
    "\10\12\1\0\6\12\20\0\1\12\2\64\1\65\1\66"+
    "\1\12\1\62\2\63\1\0\2\12\3\0\7\12\3\0"+
    "\1\12\4\0\10\12\1\0\6\12\20\0\6\6\1\0"+
    "\2\6\1\0\1\6\1\12\3\0\7\6\3\0\1\6"+
    "\4\0\10\6\1\0\6\6\20\0\4\6\1\67\1\6"+
    "\1\0\2\6\1\0\1\6\1\12\3\0\3\6\1\70"+
    "\3\6\3\0\1\6\4\0\10\6\1\0\5\6\1\71"+
    "\31\0\1\72\47\0\1\73\1\74\12\0\6\12\1\0"+
    "\2\12\1\0\2\12\3\0\7\12\3\0\1\12\4\0"+
    "\10\12\1\0\6\12\35\0\1\14\56\0\16\15\1\0"+
    "\1\75\15\15\1\76\33\15\1\76\3\15\1\0\6\6"+
    "\1\0\2\6\1\0\1\6\1\12\3\0\7\6\3\0"+
    "\1\6\4\0\4\6\1\77\3\6\1\0\6\6\20\0"+
    "\6\6\1\0\2\6\1\0\1\6\1\12\3\0\4\6"+
    "\1\100\2\6\3\0\1\6\4\0\10\6\1\0\6\6"+
    "\20\0\6\6\1\0\2\6\1\0\1\6\1\12\3\0"+
    "\7\6\3\0\1\6\4\0\3\6\1\101\4\6\1\0"+
    "\5\6\1\102\20\0\6\6\1\0\1\103\1\6\1\0"+
    "\1\6\1\12\3\0\7\6\3\0\1\6\4\0\10\6"+
    "\1\0\6\6\20\0\6\6\1\0\2\6\1\0\1\6"+
    "\1\12\3\0\7\6\3\0\1\6\4\0\6\6\1\104"+
    "\1\6\1\0\6\6\20\0\6\6\1\0\2\6\1\0"+
    "\1\6\1\12\3\0\7\6\3\0\1\6\4\0\3\6"+
    "\1\105\4\6\1\0\6\6\17\0\16\106\1\107\1\110"+
    "\7\106\1\111\1\112\4\106\1\107\33\106\1\107\3\106"+
    "\33\0\1\113\1\114\25\0\1\115\74\0\1\73\13\0"+
    "\6\6\1\0\2\6\1\0\1\6\1\12\3\0\5\6"+
    "\1\116\1\6\3\0\1\117\4\0\1\6\1\120\6\6"+
    "\1\0\4\6\1\121\1\6\20\0\6\6\1\0\2\6"+
    "\1\0\1\6\1\12\3\0\2\6\1\122\1\123\3\6"+
    "\3\0\1\6\4\0\10\6\1\0\6\6\20\0\6\6"+
    "\1\0\2\6\1\0\1\6\1\12\3\0\3\6\1\124"+
    "\3\6\3\0\1\6\4\0\10\6\1\0\6\6\20\0"+
    "\6\6\1\0\2\6\1\0\1\6\1\12\3\0\1\125"+
    "\6\6\3\0\1\126\4\0\3\6\1\127\4\6\1\0"+
    "\6\6\67\0\1\130\25\0\6\6\1\0\2\6\1\0"+
    "\1\6\1\12\3\0\7\6\3\0\1\6\4\0\3\6"+
    "\1\77\4\6\1\0\6\6\20\0\6\6\1\0\2\6"+
    "\1\0\1\6\1\12\3\0\7\6\3\0\1\131\4\0"+
    "\10\6\1\0\6\6\20\0\6\6\1\0\2\6\1\0"+
    "\1\6\1\12\3\0\7\6\3\0\1\6\4\0\3\6"+
    "\1\132\4\6\1\0\6\6\77\0\1\133\1\0\1\73"+
    "\74\0\1\134\74\0\1\134\1\57\73\0\1\134\1\0"+
    "\1\57\75\0\1\134\75\0\1\134\70\0\1\26\13\0"+
    "\6\6\1\0\2\6\1\0\1\6\1\12\3\0\2\6"+
    "\1\135\4\6\3\0\1\6\4\0\10\6\1\0\6\6"+
    "\20\0\6\6\1\0\2\6\1\0\1\6\1\12\3\0"+
    "\7\6\3\0\1\6\4\0\4\6\1\136\3\6\1\0"+
    "\6\6\21\0\3\137\71\0\1\12\1\140\1\141\1\140"+
    "\2\12\1\0\2\12\1\142\2\12\3\0\7\12\3\0"+
    "\1\12\4\0\10\12\1\0\6\12\20\0\1\12\3\64"+
    "\2\12\1\0\2\12\1\0\2\12\3\0\7\12\3\0"+
    "\1\12\4\0\10\12\1\0\6\12\20\0\1\12\1\64"+
    "\2\65\2\12\1\0\2\12\1\0\2\12\3\0\7\12"+
    "\3\0\1\12\4\0\10\12\1\0\6\12\20\0\1\12"+
    "\1\143\1\12\1\143\1\12\1\143\1\0\1\12\1\143"+
    "\1\0\2\12\3\0\7\12\3\0\1\12\4\0\10\12"+
    "\1\0\6\12\20\0\6\6\1\0\2\6\1\0\1\6"+
    "\1\12\3\0\5\6\1\144\1\6\3\0\1\6\4\0"+
    "\10\6\1\0\6\6\20\0\6\6\1\0\2\6\1\0"+
    "\1\6\1\12\3\0\7\6\3\0\1\6\4\0\4\6"+
    "\1\145\3\6\1\0\6\6\20\0\6\6\1\0\2\6"+
    "\1\0\1\6\1\12\3\0\7\6\3\0\1\6\4\0"+
    "\1\146\7\6\1\0\6\6\17\0\16\76\1\0\1\75"+
    "\55\76\1\0\6\6\1\0\2\6\1\0\1\6\1\12"+
    "\3\0\5\6\1\147\1\6\3\0\1\6\4\0\10\6"+
    "\1\0\6\6\20\0\6\6\1\0\1\150\1\6\1\0"+
    "\1\6\1\12\3\0\7\6\3\0\1\6\4\0\10\6"+
    "\1\0\6\6\20\0\6\6\1\0\2\6\1\0\1\6"+
    "\1\12\3\0\4\6\1\151\2\6\3\0\1\6\4\0"+
    "\10\6\1\0\6\6\20\0\6\6\1\0\2\6\1\0"+
    "\1\6\1\12\3\0\7\6\3\0\1\6\4\0\3\6"+
    "\1\152\4\6\1\0\6\6\20\0\6\6\1\0\2\6"+
    "\1\0\1\6\1\12\3\0\5\6\1\153\1\6\3\0"+
    "\1\6\4\0\10\6\1\0\2\6\1\154\3\6\20\0"+
    "\6\6\1\0\2\6\1\0\1\6\1\12\3\0\7\6"+
    "\3\0\1\6\4\0\7\6\1\155\1\0\6\6\20\0"+
    "\6\6\1\0\2\6\1\0\1\6\1\12\3\0\7\6"+
    "\3\0\1\6\4\0\1\6\1\156\6\6\1\0\5\6"+
    "\1\157\17\0\16\160\1\0\11\160\1\112\4\160\1\0"+
    "\33\160\1\0\3\160\30\0\1\112\44\0\16\160\1\0"+
    "\11\160\1\0\4\160\1\0\33\160\1\0\6\160\1\106"+
    "\1\160\1\161\10\160\1\0\4\106\1\162\4\106\1\163"+
    "\1\106\3\160\1\0\33\160\1\0\3\160\16\113\1\0"+
    "\56\113\33\114\1\164\1\165\1\164\33\114\1\164\3\114"+
    "\1\0\6\6\1\0\2\6\1\0\1\6\1\12\3\0"+
    "\1\166\3\6\1\167\2\6\3\0\1\6\4\0\10\6"+
    "\1\0\6\6\20\0\6\6\1\0\2\6\1\0\1\6"+
    "\1\12\3\0\7\6\3\0\1\6\4\0\3\6\1\170"+
    "\4\6\1\0\6\6\20\0\6\6\1\0\2\6\1\0"+
    "\1\6\1\12\3\0\7\6\3\0\1\6\4\0\2\6"+
    "\1\171\5\6\1\0\2\6\1\172\3\6\20\0\6\6"+
    "\1\0\2\6\1\0\1\6\1\12\3\0\7\6\3\0"+
    "\1\6\4\0\1\6\1\173\6\6\1\0\6\6\20\0"+
    "\6\6\1\0\2\6\1\0\1\6\1\12\3\0\5\6"+
    "\1\174\1\6\3\0\1\6\4\0\10\6\1\0\6\6"+
    "\20\0\6\6\1\0\2\6\1\0\1\6\1\12\3\0"+
    "\7\6\3\0\1\6\4\0\1\175\1\176\6\6\1\0"+
    "\6\6\20\0\6\6\1\0\2\6\1\0\1\6\1\12"+
    "\3\0\7\6\3\0\1\6\4\0\1\177\7\6\1\0"+
    "\6\6\20\0\6\6\1\0\2\6\1\0\1\6\1\12"+
    "\3\0\1\200\6\6\3\0\1\6\4\0\10\6\1\0"+
    "\6\6\20\0\6\6\1\0\2\6\1\0\1\6\1\12"+
    "\3\0\3\6\1\201\3\6\3\0\1\6\4\0\10\6"+
    "\1\0\6\6\37\0\1\202\55\0\6\6\1\0\2\6"+
    "\1\0\1\6\1\12\3\0\7\6\3\0\1\6\4\0"+
    "\1\6\1\203\6\6\1\0\6\6\20\0\6\6\1\0"+
    "\2\6\1\0\1\6\1\12\3\0\3\6\1\204\3\6"+
    "\3\0\1\6\4\0\10\6\1\0\6\6\20\0\6\6"+
    "\1\0\2\6\1\0\1\6\1\12\3\0\1\205\6\6"+
    "\3\0\1\6\4\0\10\6\1\0\6\6\20\0\6\6"+
    "\1\0\2\6\1\0\1\6\1\12\3\0\1\6\1\206"+
    "\5\6\3\0\1\6\4\0\10\6\1\0\6\6\21\0"+
    "\3\137\2\0\1\207\2\210\64\0\1\12\3\140\2\12"+
    "\1\0\2\12\1\0\2\12\3\0\7\12\3\0\1\12"+
    "\4\0\10\12\1\0\6\12\21\0\1\211\1\212\1\211"+
    "\71\0\1\12\3\143\1\12\1\143\1\0\1\12\1\143"+
    "\1\0\2\12\3\0\7\12\3\0\1\12\4\0\10\12"+
    "\1\0\6\12\20\0\6\6\1\0\1\213\1\6\1\0"+
    "\1\6\1\12\3\0\7\6\3\0\1\6\4\0\10\6"+
    "\1\0\6\6\20\0\6\6\1\0\2\6\1\0\1\6"+
    "\1\12\3\0\7\6\3\0\1\6\4\0\10\6\1\0"+
    "\3\6\1\214\2\6\20\0\6\6\1\0\1\215\1\6"+
    "\1\0\1\6\1\12\3\0\7\6\3\0\1\6\4\0"+
    "\10\6\1\0\6\6\20\0\6\6\1\0\2\6\1\0"+
    "\1\6\1\12\3\0\7\6\3\0\1\6\4\0\3\6"+
    "\1\216\4\6\1\0\6\6\20\0\6\6\1\0\2\6"+
    "\1\0\1\6\1\12\3\0\1\217\6\6\3\0\1\6"+
    "\4\0\10\6\1\0\6\6\20\0\6\6\1\0\2\6"+
    "\1\0\1\6\1\12\3\0\1\220\6\6\3\0\1\6"+
    "\4\0\10\6\1\0\6\6\20\0\6\6\1\0\2\6"+
    "\1\0\1\6\1\12\3\0\7\6\3\0\1\6\4\0"+
    "\4\6\1\221\3\6\1\0\6\6\20\0\6\6\1\0"+
    "\2\6\1\0\1\6\1\12\3\0\7\6\3\0\1\6"+
    "\4\0\1\6\1\222\6\6\1\0\6\6\20\0\6\6"+
    "\1\0\1\223\1\6\1\0\1\6\1\12\3\0\7\6"+
    "\3\0\1\6\4\0\10\6\1\0\6\6\20\0\1\224"+
    "\5\6\1\0\2\6\1\0\1\6\1\12\3\0\7\6"+
    "\3\0\1\6\4\0\10\6\1\0\6\6\20\0\6\6"+
    "\1\0\2\6\1\0\1\6\1\12\3\0\1\225\6\6"+
    "\3\0\1\6\4\0\10\6\1\0\6\6\17\0\16\160"+
    "\1\0\11\160\1\226\4\160\1\0\33\160\1\0\21\160"+
    "\1\0\11\160\1\226\1\160\1\227\2\160\1\0\33\160"+
    "\1\0\21\160\1\0\4\160\1\230\4\160\1\112\4\160"+
    "\1\0\33\160\1\0\3\160\34\164\1\165\73\164\1\14"+
    "\1\165\40\164\1\0\6\6\1\0\2\6\1\0\1\6"+
    "\1\12\3\0\5\6\1\231\1\6\3\0\1\6\4\0"+
    "\10\6\1\0\6\6\20\0\6\6\1\0\2\6\1\0"+
    "\1\6\1\12\3\0\7\6\3\0\1\6\4\0\4\6"+
    "\1\232\3\6\1\0\6\6\20\0\6\6\1\0\2\6"+
    "\1\0\1\6\1\12\3\0\4\6\1\233\2\6\3\0"+
    "\1\6\4\0\10\6\1\0\6\6\20\0\6\6\1\0"+
    "\1\234\1\6\1\0\1\6\1\12\3\0\7\6\3\0"+
    "\1\6\4\0\10\6\1\0\6\6\20\0\6\6\1\0"+
    "\2\6\1\0\1\6\1\12\3\0\3\6\1\235\3\6"+
    "\3\0\1\6\4\0\10\6\1\0\6\6\20\0\6\6"+
    "\1\0\2\6\1\0\1\6\1\12\3\0\5\6\1\236"+
    "\1\6\3\0\1\6\4\0\10\6\1\0\6\6\20\0"+
    "\6\6\1\0\2\6\1\0\1\6\1\12\3\0\7\6"+
    "\3\0\1\6\4\0\1\6\1\237\6\6\1\0\6\6"+
    "\20\0\6\6\1\0\2\6\1\0\1\6\1\12\3\0"+
    "\7\6\3\0\1\6\4\0\3\6\1\240\4\6\1\0"+
    "\6\6\20\0\6\6\1\0\1\241\1\6\1\0\1\6"+
    "\1\12\3\0\7\6\3\0\1\6\4\0\10\6\1\0"+
    "\6\6\20\0\6\6\1\0\2\6\1\0\1\6\1\12"+
    "\3\0\4\6\1\242\2\6\3\0\1\6\4\0\10\6"+
    "\1\0\6\6\20\0\6\6\1\0\2\6\1\0\1\6"+
    "\1\12\3\0\5\6\1\243\1\6\3\0\1\6\4\0"+
    "\1\244\7\6\1\0\6\6\63\0\1\245\31\0\6\6"+
    "\1\0\2\6\1\0\1\6\1\12\3\0\7\6\3\0"+
    "\1\6\4\0\10\6\1\0\5\6\1\246\20\0\6\6"+
    "\1\0\2\6\1\0\1\6\1\12\3\0\7\6\3\0"+
    "\1\6\4\0\10\6\1\0\2\6\1\247\3\6\20\0"+
    "\6\6\1\0\2\6\1\0\1\6\1\12\3\0\7\6"+
    "\3\0\1\6\4\0\4\6\1\250\3\6\1\0\6\6"+
    "\20\0\6\6\1\0\2\6\1\0\1\6\1\12\3\0"+
    "\7\6\3\0\1\6\4\0\10\6\1\0\5\6\1\251"+
    "\20\0\1\207\5\0\1\207\67\0\1\211\1\212\1\211"+
    "\5\0\1\142\64\0\3\211\71\0\6\6\1\0\2\6"+
    "\1\0\1\6\1\12\3\0\4\6\1\240\2\6\3\0"+
    "\1\6\4\0\10\6\1\0\6\6\20\0\6\6\1\0"+
    "\2\6\1\0\1\6\1\12\3\0\7\6\3\0\1\6"+
    "\4\0\10\6\1\0\1\6\1\252\4\6\20\0\6\6"+
    "\1\0\2\6\1\0\1\6\1\12\3\0\5\6\1\253"+
    "\1\6\3\0\1\6\4\0\10\6\1\0\6\6\20\0"+
    "\6\6\1\0\2\6\1\0\1\6\1\12\3\0\4\6"+
    "\1\254\2\6\3\0\1\6\4\0\10\6\1\0\6\6"+
    "\20\0\6\6\1\0\2\6\1\0\1\6\1\12\3\0"+
    "\7\6\3\0\1\6\4\0\1\255\7\6\1\0\6\6"+
    "\20\0\1\256\5\6\1\0\2\6\1\0\1\6\1\12"+
    "\3\0\7\6\3\0\1\6\4\0\10\6\1\0\6\6"+
    "\20\0\6\6\1\0\2\6\1\0\1\6\1\12\3\0"+
    "\5\6\1\257\1\6\3\0\1\6\4\0\10\6\1\0"+
    "\6\6\17\0\16\160\1\0\11\160\1\226\1\160\1\106"+
    "\2\160\1\0\33\160\1\0\21\160\1\0\4\160\1\106"+
    "\4\160\1\226\4\160\1\0\33\160\1\0\3\160\1\0"+
    "\6\6\1\0\2\6\1\0\1\6\1\12\3\0\7\6"+
    "\3\0\1\6\4\0\1\6\1\260\6\6\1\0\6\6"+
    "\20\0\6\6\1\0\2\6\1\0\1\6\1\12\3\0"+
    "\7\6\3\0\1\6\4\0\5\6\1\261\2\6\1\0"+
    "\6\6\20\0\6\6\1\0\2\6\1\0\1\6\1\12"+
    "\3\0\5\6\1\262\1\6\3\0\1\6\4\0\10\6"+
    "\1\0\6\6\20\0\6\6\1\0\2\6\1\0\1\6"+
    "\1\12\3\0\7\6\3\0\1\6\4\0\3\6\1\263"+
    "\4\6\1\0\6\6\20\0\6\6\1\0\1\264\1\6"+
    "\1\0\1\6\1\12\3\0\7\6\3\0\1\6\4\0"+
    "\10\6\1\0\6\6\20\0\6\6\1\0\2\6\1\0"+
    "\1\6\1\12\3\0\7\6\3\0\1\6\4\0\5\6"+
    "\1\265\2\6\1\0\6\6\20\0\6\6\1\0\2\6"+
    "\1\0\1\6\1\12\3\0\7\6\3\0\1\6\4\0"+
    "\10\6\1\0\2\6\1\172\3\6\20\0\6\6\1\0"+
    "\2\6\1\0\1\6\1\12\3\0\3\6\1\266\3\6"+
    "\3\0\1\6\4\0\10\6\1\0\6\6\20\0\6\6"+
    "\1\0\2\6\1\0\1\6\1\12\3\0\7\6\3\0"+
    "\1\6\4\0\1\6\1\267\6\6\1\0\6\6\20\0"+
    "\6\6\1\0\2\6\1\0\1\6\1\12\3\0\5\6"+
    "\1\270\1\6\3\0\1\6\4\0\10\6\1\0\6\6"+
    "\70\0\1\271\24\0\6\6\1\0\1\272\1\6\1\0"+
    "\1\6\1\12\3\0\7\6\3\0\1\6\4\0\10\6"+
    "\1\0\6\6\20\0\6\6\1\0\2\6\1\0\1\6"+
    "\1\12\3\0\7\6\3\0\1\6\4\0\10\6\1\0"+
    "\5\6\1\273\20\0\6\6\1\0\1\253\1\6\1\0"+
    "\1\6\1\12\3\0\7\6\3\0\1\6\4\0\10\6"+
    "\1\0\6\6\20\0\6\6\1\0\2\6\1\0\1\6"+
    "\1\12\3\0\3\6\1\274\3\6\3\0\1\6\4\0"+
    "\10\6\1\0\6\6\20\0\6\6\1\0\2\6\1\0"+
    "\1\6\1\12\3\0\5\6\1\275\1\6\3\0\1\6"+
    "\4\0\10\6\1\0\6\6\20\0\6\6\1\0\1\276"+
    "\1\6\1\0\1\6\1\12\3\0\7\6\3\0\1\6"+
    "\4\0\10\6\1\0\6\6\20\0\6\6\1\0\2\6"+
    "\1\0\1\6\1\12\3\0\7\6\3\0\1\6\4\0"+
    "\1\6\1\277\6\6\1\0\6\6\20\0\6\6\1\0"+
    "\2\6\1\0\1\6\1\12\3\0\7\6\3\0\1\6"+
    "\4\0\5\6\1\300\2\6\1\0\6\6\20\0\6\6"+
    "\1\0\2\6\1\0\1\6\1\12\3\0\5\6\1\266"+
    "\1\6\3\0\1\6\4\0\10\6\1\0\6\6\20\0"+
    "\6\6\1\0\2\6\1\0\1\6\1\12\3\0\2\6"+
    "\1\301\4\6\3\0\1\6\4\0\10\6\1\0\6\6"+
    "\20\0\1\300\5\6\1\0\2\6\1\0\1\6\1\12"+
    "\3\0\7\6\3\0\1\6\4\0\10\6\1\0\6\6"+
    "\20\0\6\6\1\0\2\6\1\0\1\6\1\12\3\0"+
    "\7\6\3\0\1\302\4\0\10\6\1\0\6\6\20\0"+
    "\6\6\1\0\2\6\1\0\1\6\1\12\3\0\3\6"+
    "\1\303\3\6\3\0\1\6\4\0\10\6\1\0\6\6"+
    "\27\0\1\304\65\0\6\6\1\0\2\6\1\0\1\6"+
    "\1\12\3\0\5\6\1\305\1\6\3\0\1\6\4\0"+
    "\10\6\1\0\6\6\20\0\6\6\1\0\1\306\1\6"+
    "\1\0\1\6\1\12\3\0\7\6\3\0\1\6\4\0"+
    "\10\6\1\0\6\6\20\0\6\6\1\0\2\6\1\0"+
    "\1\6\1\12\3\0\2\6\1\266\4\6\3\0\1\6"+
    "\4\0\10\6\1\0\6\6\20\0\6\6\1\0\2\6"+
    "\1\0\1\6\1\12\3\0\7\6\3\0\1\6\4\0"+
    "\10\6\1\0\5\6\1\307\20\0\6\6\1\0\2\6"+
    "\1\0\1\6\1\12\3\0\7\6\3\0\1\6\4\0"+
    "\4\6\1\310\3\6\1\0\6\6\20\0\1\311\74\0"+
    "\6\6\1\0\2\6\1\0\1\6\1\12\3\0\4\6"+
    "\1\266\2\6\3\0\1\6\4\0\10\6\1\0\6\6"+
    "\20\0\6\6\1\0\1\300\1\6\1\0\1\6\1\12"+
    "\3\0\7\6\3\0\1\6\4\0\10\6\1\0\6\6"+
    "\20\0\6\6\1\0\1\252\1\6\1\0\1\6\1\12"+
    "\3\0\7\6\3\0\1\6\4\0\10\6\1\0\6\6"+
    "\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9455];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\4\1\1\11\4\1\1\11\7\1\1\11"+
    "\1\1\1\11\2\1\1\11\10\1\2\11\1\1\1\11"+
    "\6\1\4\11\2\1\1\0\1\1\1\0\5\1\3\11"+
    "\1\1\1\0\10\1\1\0\2\1\1\11\2\1\1\11"+
    "\12\1\1\0\2\1\2\11\5\1\1\0\21\1\2\0"+
    "\14\1\1\0\5\1\1\0\1\1\1\11\13\1\1\11"+
    "\16\1\1\0\23\1\1\0\12\1\1\0\4\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Structure data = new Structure();
    private Structure errors = new Structure();

    public Structure getData() {
        return this.data;
    }

    public Structure getErrors() {
        return this.errors;
    }

    private Symbol symbol(int type, Object value) {
            return new Symbol(type, yyline, yycolumn, value);
        }

        private Symbol symbol(int type) {
            return new Symbol(type, yyline, yycolumn);
        }

  public void readFile(String argv) {

        String encodingName = "UTF-8";

        try {
            java.io.FileInputStream stream = new java.io.FileInputStream(argv);
            this.zzReader = new java.io.InputStreamReader(stream, encodingName);

            while (!this.zzAtEOF) this.next_token();

          } catch (java.io.FileNotFoundException e) {
            System.out.println("File not found : " + argv + "");
          } catch (java.io.IOException e) {
            System.out.println("IO error scanning file " + argv + "");
            System.out.println(e);
          } catch (Exception e) {
            System.out.println("Unexpected exception:");
            e.printStackTrace();
        }
      }

  /**
   * Creates a new scanner
   *
   */
  public Scanner() {
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 52: 
          { data.addData(yytext(), Types.RESERVED_DATA_TYPE, yyline);
          return new Symbol(sym.SHORT, yycolumn, yyline, yytext());
          }
        case 61: break;
        case 44: 
          { data.addData(yytext(), Types.RESERVED_CONDITION, yyline);
          return new Symbol(sym.ELSE, yycolumn, yyline, yytext());
          }
        case 62: break;
        case 39: 
          { data.addData(yytext(), Types.LITERAL_HEXA, yyline);
        return new Symbol(sym.LITERAL_HEXA, yycolumn, yyline, yytext());
          }
        case 63: break;
        case 49: 
          { data.addData(yytext(), Types.RESERVED_DATA_TYPE, yyline);
          return new Symbol(sym.LONG, yycolumn, yyline, yytext());
          }
        case 64: break;
        case 29: 
          { data.addData(yytext(), Types.OPERATOR_ASSIGNMENT, yyline);
               return new Symbol(sym.OPERATOR_ASSIGNMENT, yycolumn, yyline, yytext());
          }
        case 65: break;
        case 45: 
          { data.addData(yytext(), Types.RESERVED_CONDITION, yyline);
            return new Symbol(sym.RESERVED_CONDITION, yycolumn, yyline, yytext());
          }
        case 66: break;
        case 21: 
          { data.addData(yytext(), Types.OPERATOR_BINARY, yyline);
          return new Symbol(sym.OPERATOR_BINARY, yycolumn, yyline, yytext());
          }
        case 67: break;
        case 11: 
          { data.addData(yytext(), Types.OPERATOR_BOOLEAN, yyline);
        return new Symbol(sym.OPERATOR_BOOLEAN, yycolumn, yyline, yytext());
          }
        case 68: break;
        case 12: 
          { data.addData(yytext(), Types.OPERATOR_DIVIDE, yyline);
        return new Symbol(sym.OPERATOR_DIVIDE, yycolumn, yyline, yytext());
          }
        case 69: break;
        case 42: 
          { errors.addData(yytext(), Types.FLOAT_MANY_DOTS_ERROR, yyline);
      return new Symbol(sym.FLOAT_MANY_DOTS_ERROR, yycolumn, yyline, yytext());
          }
        case 70: break;
        case 31: 
          { data.addData(yytext(), Types.LITERAL_STRING, yyline);
        return new Symbol(sym.LITERAL_STRING, yycolumn, yyline, yytext());
          }
        case 71: break;
        case 33: 
          { errors.addData(yytext(), Types.COMMENTS_ERROR, yyline);
        return new Symbol(sym.COMMENTS_ERROR, yycolumn, yyline, yytext());
          }
        case 72: break;
        case 1: 
          { errors.addData(yytext(), Types.IDENTIFIER_ERROR, yyline);
        return new Symbol(sym.IDENTIFIER_ERROR, yycolumn, yyline, yytext());
          }
        case 73: break;
        case 41: 
          { data.addData(yytext(), Types.RESERVED_DATA_TYPE, yyline);
          return new Symbol(sym.INT, yycolumn, yyline, yytext());
          }
        case 74: break;
        case 16: 
          { data.addData(yytext(), Types.OPERATOR_END_LINE, yyline);
        return new Symbol(sym.OPERATOR_END_LINE, yycolumn, yyline, yytext());
          }
        case 75: break;
        case 56: 
          { data.addData(yytext(), Types.RESERVED_WORDS, yyline);
          return new Symbol(sym.RETURN, yycolumn, yyline, yytext());
          }
        case 76: break;
        case 48: 
          { data.addData(yytext(), Types.RESERVED_DATA_TYPE, yyline);
          return new Symbol(sym.CHAR, yycolumn, yyline, yytext());
          }
        case 77: break;
        case 2: 
          { errors.addData(yytext(), Types.UNKNOWN_ERROR, yyline);
        return new Symbol(sym.UNKNOWN_ERROR, yycolumn, yyline, yytext());
          }
        case 78: break;
        case 35: 
          { data.addData(yytext(), Types.RESERVED_CONDITION, yyline);
          return new Symbol(sym.IF, yycolumn, yyline, yytext());
          }
        case 79: break;
        case 23: 
          { data.addData(yytext(), Types.OPERATOR_PARENTHESIS, yyline);
           return new Symbol(sym.OPERATOR_PARENTHESIS_L, yycolumn, yyline, yytext());
          }
        case 80: break;
        case 17: 
          { data.addData(yytext(), Types.OPERATOR_ADD, yyline);
         return new Symbol(sym.OPERATOR_ADD, yycolumn, yyline, yytext());
          }
        case 81: break;
        case 40: 
          { data.addData(yytext(), Types.RESERVED_LOOP, yyline);
          return new Symbol(sym.FOR, yycolumn, yyline, yytext());
          }
        case 82: break;
        case 37: 
          { data.addData(yytext(), Types.LITERAL_FLOAT, yyline);
        return new Symbol(sym.LITERAL_FLOAT, yycolumn, yyline, yytext());
          }
        case 83: break;
        case 27: 
          { data.addData(yytext(), Types.LITERAL_OCTAL, yyline);
        return new Symbol(sym.LITERAL_OCTAL, yycolumn, yyline, yytext());
          }
        case 84: break;
        case 59: 
          { data.addData(yytext(), Types.RESERVED_WORDS, yyline);
          return new Symbol(sym.SWITCH, yycolumn, yyline, yytext());
          }
        case 85: break;
        case 43: 
          { data.addData(yytext(), Types.RESERVED_ENUM, yyline);
             return new Symbol(sym.RESERVED_ENUM , yycolumn, yyline, yytext());
          }
        case 86: break;
        case 20: 
          { data.addData(yytext(), Types.OPERATOR_BOOLEAN, yyline);
                return new Symbol(sym.OPERATOR_COMPARATIVE, yycolumn, yyline, yytext());
          }
        case 87: break;
        case 25: 
          { data.addData(yytext(), Types.OPERATOR_BRACKET, yyline);
        return new Symbol(sym.OPERATOR_BRACKET, yycolumn, yyline, yytext());
          }
        case 88: break;
        case 9: 
          { data.addData(yytext(), Types.OPERATOR_CONTINUE_LINE, yyline);
        return new Symbol(sym.OPERATOR_CONTINUE_LINE, yycolumn, yyline, yytext());
          }
        case 89: break;
        case 30: 
          { data.addData(yytext(), Types.OPERATOR_MEMORY, yyline);
        return new Symbol(sym.OPERATOR_MEMORY, yycolumn, yyline, yytext());
          }
        case 90: break;
        case 18: 
          { data.addData(yytext(), Types.OPERATOR_REMAINDER, yyline);
        return new Symbol(sym.OPERATOR_REMAINDER, yycolumn, yyline, yytext());
          }
        case 91: break;
        case 3: 
          { data.addData(yytext(), Types.IDENTIFIER, yyline);
        return new Symbol(sym.IDENTIFIER, yycolumn, yyline, yytext());
          }
        case 92: break;
        case 47: 
          { data.addData(yytext(), Types.RESERVED_CONDITION, yyline);
          return new Symbol(sym.CASE, yycolumn, yyline, yytext());
          }
        case 93: break;
        case 5: 
          { data.addData(yytext(), Types.OPERATOR_DOT, yyline);
        return new Symbol(sym.OPERATOR_DOT, yycolumn, yyline, yytext());
          }
        case 94: break;
        case 7: 
          { /* DO NOTHING */
          }
        case 95: break;
        case 32: 
          { data.addData(yytext(), Types.LITERAL_CHARACTER, yyline);
        return new Symbol(sym.LITERAL_CHARACTER, yycolumn, yyline, yytext());
          }
        case 96: break;
        case 6: 
          { data.addData(yytext(), Types.OPERATOR_NEGATIVE, yyline);
        return new Symbol(sym.OPERATOR_NEGATIVE, yycolumn, yyline, yytext());
          }
        case 97: break;
        case 60: 
          { data.addData(yytext(), Types.RESERVED_WORDS, yyline);
          return new Symbol(sym.DEFAULT, yycolumn, yyline, yytext());
          }
        case 98: break;
        case 50: 
          { data.addData(yytext(), Types.RESERVED_LOOP, yyline);
          return new Symbol(sym.BREAK, yycolumn, yyline, yytext());
          }
        case 99: break;
        case 22: 
          { data.addData(yytext(), Types.OPERATOR_BOOLEAN, yyline);
                        return new Symbol(sym.OPERATOR_NOT, yycolumn, yyline, yytext());
          }
        case 100: break;
        case 38: 
          { data.addData(yytext(), Types.LITERAL_EXPONENTIAL_FLOAT, yyline);
        return new Symbol(sym.LITERAL_EXPONENTIAL_FLOAT, yycolumn, yyline, yytext());
          }
        case 101: break;
        case 55: 
          { data.addData(yytext(), Types.RESERVED_LOOP, yyline);
          return new Symbol(sym.WHILE, yycolumn, yyline, yytext());
          }
        case 102: break;
        case 26: 
          { data.addData(yytext(), Types.RESERVED_LOOP, yyline);
          return new Symbol(sym.DO, yycolumn, yyline, yytext());
          }
        case 103: break;
        case 54: 
          { data.addData(yytext(), Types.RESERVED_WORDS, yyline);
          return new Symbol(sym.CONST, yycolumn, yyline, yytext());
          }
        case 104: break;
        case 57: 
          { data.addData(yytext(), Types.RESERVED_MODIFIER, yyline);
        return new Symbol(sym.RESERVED_MODIFIER, yycolumn, yyline, yytext());
          }
        case 105: break;
        case 19: 
          { data.addData(yytext(), Types.OPERATOR_ASSIGNMENT, yyline);
              return new Symbol(sym.OPERATOR_ASSIGNMENT, yycolumn, yyline, yytext());
          }
        case 106: break;
        case 51: 
          { data.addData(yytext(), Types.RESERVED_DATA_TYPE, yyline);
            return new Symbol(sym.RESERVED_DATA_TYPE, yycolumn, yyline, yytext());
          }
        case 107: break;
        case 15: 
          { data.addData(yytext(), Types.OPERATOR_SEPARATE, yyline);
        return new Symbol(sym.OPERATOR_SEPARATE, yycolumn, yyline, yytext());
          }
        case 108: break;
        case 10: 
          { errors.addData(yytext(), Types.CHARACTER_ERROR, yyline);
        return new Symbol(sym.CHARACTER_ERROR, yycolumn, yyline, yytext());
          }
        case 109: break;
        case 4: 
          { data.addData(yytext(), Types.LITERAL_DECIMAL, yyline);
        return new Symbol(sym.LITERAL_DECIMAL, yycolumn, yyline, yytext());
          }
        case 110: break;
        case 8: 
          { errors.addData(yytext(), Types.STRING_ERROR, yyline);
        return new Symbol(sym.STRING_ERROR, yycolumn, yyline, yytext());
          }
        case 111: break;
        case 36: 
          { data.addData(yytext(), Types.OPERATOR_INC, yyline);
        return new Symbol(sym.OPERATOR_INC, yycolumn, yyline, yytext());
          }
        case 112: break;
        case 28: 
          { data.addData(yytext(), Types.OPERATOR_DEC, yyline);
        return new Symbol(sym.OPERATOR_DEC, yycolumn, yyline, yytext());
          }
        case 113: break;
        case 46: 
          { data.addData(yytext(), Types.RESERVED_DATA_TYPE, yyline);
          return new Symbol(sym.VOID, yycolumn, yyline, yytext());
          }
        case 114: break;
        case 14: 
          { data.addData(yytext(), Types.OPERATOR_PARENTHESIS, yyline);
           return new Symbol(sym.OPERATOR_PARENTHESIS_R, yycolumn, yyline, yytext());
          }
        case 115: break;
        case 13: 
          { data.addData(yytext(), Types.OPERATOR_MULTIPLY, yyline);
        return new Symbol(sym.OPERATOR_MULTIPLY, yycolumn, yyline, yytext());
          }
        case 116: break;
        case 24: 
          { data.addData(yytext(), Types.OPERATOR_SQ_BRACKET, yyline);
        return new Symbol(sym.OPERATOR_SQ_BRACKET, yycolumn, yyline, yytext());
          }
        case 117: break;
        case 58: 
          { return new Symbol(sym.RESERVED_WORDS, yycolumn, yyline, yytext());
          }
        case 118: break;
        case 53: 
          { data.addData(yytext(), Types.RESERVED_WORDS, yyline);
                return new Symbol(sym.RESERVED_WORDS, yycolumn, yyline, yytext());
          }
        case 119: break;
        case 34: 
          { data.addData(yytext(), Types.OPERATOR_ASSIGNMENT, yyline);
                return new Symbol(sym.OPERATOR_ASSIGNMENT, yycolumn, yyline, yytext());
          }
        case 120: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          scanner = new Scanner( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
